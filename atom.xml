<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小歪的博客</title>
  <subtitle>人生苦短，我学Python</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhangslob.github.io/"/>
  <updated>2018-04-12T14:08:23.122Z</updated>
  <id>https://zhangslob.github.io/</id>
  
  <author>
    <name>小歪</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>来codewars与我一起玩耍吧</title>
    <link href="https://zhangslob.github.io/2018/04/12/%E6%9D%A5codewars%E4%B8%8E%E6%88%91%E4%B8%80%E8%B5%B7%E7%8E%A9%E8%80%8D%E5%90%A7/"/>
    <id>https://zhangslob.github.io/2018/04/12/来codewars与我一起玩耍吧/</id>
    <published>2018-04-12T13:25:13.000Z</published>
    <updated>2018-04-12T14:08:23.122Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是崔斯特的第四十篇原创文章
</code></pre><p>并肩作战  (๑• . •๑)</p>
<p><img src="https://i.imgur.com/tyYtQ02.jpg" alt=""></p>
<a id="more"></a>
<h1 id="先看一道题目"><a href="#先看一道题目" class="headerlink" title="先看一道题目"></a>先看一道题目</h1><p>如何使用代码表示“石头、剪刀、布”之间的关系。</p>
<blockquote>
<p>即：石头 &gt; 剪刀，剪刀 &gt; 布， 剪刀 &gt; 布</p>
</blockquote>
<p>当时我想了很多，构造一个字典，和数字对应，但是应该如何表示“大小”关系呢？想破脑袋都想不出来，最后看了答案，形如</p>
<p><code>dict = {&#39;a&#39;: &#39;b&#39;, &#39;b&#39;: &#39;c&#39;, &#39;c&#39;: &#39;a&#39;}</code></p>
<p>简直是妙啊！！！</p>
<p>原题在这里，<a href="https://www.codewars.com/kata/5672a98bdbdd995fad00000f" target="_blank" rel="external">Rock Paper Scissors!</a>，可以自己试试看。</p>
<p>我觉得很妙的解法</p>
<h1 id="CodeWars"><a href="#CodeWars" class="headerlink" title="CodeWars"></a>CodeWars</h1><p>这是CodeWars上的一题，我觉得挺有意思的。CodeWars其实和leetcode差不多，但是我更喜欢有这几点。</p>
<h2 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h2><p><img src="https://i.imgur.com/iJDJEyh.png" alt=""></p>
<p>看着挺舒服的，同时提供了测试代码。</p>
<h2 id="够简单"><a href="#够简单" class="headerlink" title="够简单"></a>够简单</h2><p>真的，CodeWars上有些题目真的很简单，适合我这种新手，哈哈，比如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Complete the solution so that it reverses the string value passed into it.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># solution('world') # returns 'dlrow'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(string)</span>:</span></div><div class="line">    <span class="keyword">return</span> string[::<span class="number">-1</span>]</div></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/76PQr2I.png" alt=""></p>
<p>还可以选择问题类型。</p>
<h2 id="可以自己出题，还可以邀请队友"><a href="#可以自己出题，还可以邀请队友" class="headerlink" title="可以自己出题，还可以邀请队友"></a>可以自己出题，还可以邀请队友</h2><p><a href="www.codewars.com/r/UsAiUQ">www.codewars.com/r/UsAiUQ</a><br><a href="www.codewars.com/r/UsAiUQ">codewars</a> 点一下，就可以成为我的盟友。</p>
<p><img src="https://i.imgur.com/MGFfIiV.jpg" alt=""></p>
<p>点一下，玩一年，装逼不花一分钱！</p>
<h2 id="可以上榜"><a href="#可以上榜" class="headerlink" title="可以上榜"></a>可以上榜</h2><p><a href="https://www.codewars.com/users/leaderboard" target="_blank" rel="external">leaderboard</a></p>
<p><img src="https://i.imgur.com/BsP8kJP.png" alt=""></p>
<p>第二名竟然是国人唉，不知是哪位大佬。希望有更多中国人可以出现在上面。</p>
<h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>目前我也还是一个萌新，希望大佬能带带我。</p>
<p>我在Github上开了一个仓库，<a href="https://github.com/zhangslob/codewars_python" target="_blank" rel="external">codewars_python</a> 里面都是用 python的解题方法，但是现在还只有几题而已，希望大家可以一起来参与，多提pr。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ATM machines allow 4 or 6 digit PIN codes and PIN codes cannot contain anything but exactly 4 digits or exactly 6 digits.</span></div><div class="line"></div><div class="line"><span class="comment"># If the function is passed a valid PIN string, return true, else return false.</span></div><div class="line"></div><div class="line"><span class="comment"># eg:</span></div><div class="line"></div><div class="line"><span class="comment"># validate_pin("1234") == True</span></div><div class="line"><span class="comment"># validate_pin("12345") == False</span></div><div class="line"><span class="comment"># validate_pin("a234") == False</span></div><div class="line"></div><div class="line"><span class="comment"># My Solutiuon</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate_pin</span><span class="params">(pin)</span>:</span></div><div class="line">    <span class="comment">#return true or false</span></div><div class="line">    <span class="keyword">return</span> pin.isdigit() <span class="keyword">if</span> len(pin) == <span class="number">4</span> <span class="keyword">or</span> len(pin) == <span class="number">6</span> <span class="keyword">else</span> <span class="keyword">False</span></div><div class="line"></div><div class="line"> <span class="comment"># Wonderful Solutiuon</span></div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">def</span> <span class="title">validate_pin</span><span class="params">(pin)</span>:</span></div><div class="line">    <span class="keyword">return</span> len(pin) <span class="keyword">in</span> (<span class="number">4</span>, <span class="number">6</span>) <span class="keyword">and</span> pin.isdigit()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这是崔斯特的第四十篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;并肩作战  (๑• . •๑)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/tyYtQ02.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://zhangslob.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://zhangslob.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="codewars" scheme="https://zhangslob.github.io/tags/codewars/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy中如何提高数据的插入速度</title>
    <link href="https://zhangslob.github.io/2018/03/28/Scrapy%E4%B8%AD%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E6%95%B0%E6%8D%AE%E7%9A%84%E6%8F%92%E5%85%A5%E9%80%9F%E5%BA%A6/"/>
    <id>https://zhangslob.github.io/2018/03/28/Scrapy中如何提高数据的插入速度/</id>
    <published>2018-03-28T13:18:32.000Z</published>
    <updated>2018-03-28T13:34:51.830Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是崔斯特的第三十九篇原创文章
</code></pre><p>长期更新  (๑• . •๑)</p>
<p><img src="https://i.imgur.com/ThJm8v5.jpg" alt=""></p>
<a id="more"></a>
<h1 id="速度问题"><a href="#速度问题" class="headerlink" title="速度问题"></a>速度问题</h1><p>最近工作中遇到这么一个问题，全站抓取时采用分布式：爬虫A与爬虫B，爬虫A给爬虫B<code>喂饼</code>，爬虫B由于各种原因<code>运行</code>的比较慢，达不到预期效果，所以必须对爬虫B进行优化。</p>
<p>提升Scrapy运行速度有很多方法，国外有大佬说过</p>
<p><a href="https://stackoverflow.com/questions/17029752/speed-up-web-scraper" target="_blank" rel="external">Speed up web scraper
</a></p>
<p>Here’s a collection of things to try:</p>
<ol>
<li>use latest scrapy version (if not using already)</li>
<li>check if non-standard middlewares are used</li>
<li>try to increase CONCURRENT_REQUESTS_PER_DOMAIN, CONCURRENT_REQUESTS settings (docs)<br>turn off logging LOG_ENABLED = False (docs)</li>
<li>try yielding an item in a loop instead of collecting items into the items list and returning them<br>use local cache DNS (see this thread)</li>
<li>check if this site is using download threshold and limits your download speed (see this thread)<br>log cpu and memory usage during the spider run - see if there are any problems there</li>
<li>try run the same spider under scrapyd service</li>
<li>see if grequests + lxml will perform better (ask if you need any help with implementing this solution)</li>
<li>try running Scrapy on pypy, see Running Scrapy on PyPy</li>
</ol>
<p>大致看了下，确实可以提高爬虫运行速度，但是对于海量数据（这里说的是百万级）还需要考虑一点的就是数据插入问题，这里我们使用的是 Mongo。</p>
<h1 id="官方示例"><a href="#官方示例" class="headerlink" title="官方示例"></a>官方示例</h1><p>让我们先从官方文档开始 <a href="http://scrapy.readthedocs.io/en/latest/topics/item-pipeline.html#write-items-to-mongodb" target="_blank" rel="external">Write items to MongoDB</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pymongo</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoPipeline</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    collection_name = <span class="string">'scrapy_items'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, mongo_uri, mongo_db)</span>:</span></div><div class="line">        self.mongo_uri = mongo_uri</div><div class="line">        self.mongo_db = mongo_db</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span>:</span></div><div class="line">        <span class="keyword">return</span> cls(</div><div class="line">            mongo_uri=crawler.settings.get(<span class="string">'MONGO_URI'</span>),</div><div class="line">            mongo_db=crawler.settings.get(<span class="string">'MONGO_DATABASE'</span>, <span class="string">'items'</span>)</div><div class="line">        )</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></div><div class="line">        self.client = pymongo.MongoClient(self.mongo_uri)</div><div class="line">        self.db = self.client[self.mongo_db]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></div><div class="line">        self.client.close()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></div><div class="line">        self.db[self.collection_name].insert_one(dict(item))</div><div class="line">        <span class="keyword">return</span> item</div></pre></td></tr></table></figure>
<p>比较简单，这里插入使用的方法是 <code>insert_one</code>，继续文档：</p>
<p><code>insert_one(document, bypass_document_validation=False, session=None)</code></p>
<p>Insert a single document.<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; db.test.count(&#123;'x': <span class="number">1</span>&#125;)</div><div class="line"><span class="number">0</span></div><div class="line">&gt;&gt;&gt; result = db.test.insert_one(&#123;'x': <span class="number">1</span>&#125;)</div><div class="line">&gt;&gt;&gt; result.inserted_id</div><div class="line">ObjectId('<span class="number">54</span>f112defba522406c9cc208')</div><div class="line">&gt;&gt;&gt; db.test.find_one(&#123;'x': <span class="number">1</span>&#125;)</div><div class="line">&#123;u'x': <span class="number">1</span>, u'_id': ObjectId('<span class="number">54</span>f112defba522406c9cc208')&#125;</div></pre></td></tr></table></figure></p>
<p>以前经常使用的 <code>insert</code> 方法，已经不被赞同</p>
<p><code>insert(doc_or_docs, manipulate=True, check_keys=True, continue_on_error=False, **kwargs)</code></p>
<p>Insert a document(s) into this collection.<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">DEPRECATED - Use insert_one() or insert_many() instead.</div><div class="line"></div><div class="line">Changed <span class="keyword">in</span> version <span class="number">3</span>.<span class="number">0</span>: Removed the safe parameter. Pass w=<span class="number">0</span> <span class="keyword">for</span> unacknowledged write operations.</div></pre></td></tr></table></figure></p>
<p><code>insert</code> 简单理解就是插入，把我们采集到的 <code>item</code> 插入到数据库，这样存在一个很严重的问题，就是<strong>去重</strong></p>
<h1 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h1><p>晚上有一种很流行的写法，使用 <code>update</code>命令，如：</p>
<p><code>self.db[self.collection_name].update({&#39;id&#39;: item[&#39;id&#39;]}, {&#39;$set&#39;: dict(item)}, True)</code></p>
<p>解释为：</p>
<blockquote>
<p>比较重要的一点就在于process_item，在这里使用了update方法，第一个参数传入查询条件，这里使用的是id，第二个参数传入字典类型的对象，就是我们的item，第三个参数传入True，这样就可以保证，如果查询数据存在的话就更新，不存在的话就插入。这样就可以保证去重了。</p>
</blockquote>
<p>这确实是一种很简单的方法，其实原理很简单，就是在每次插入数据前，对数据库中查询，是否有该 ID，如果没有就插入，如果有就放弃。</p>
<p>对于数据量比较少的项目，这确实是一种很简单的方法，很简单就完成了目标。</p>
<p>但是，我们现在说的是百万级数据，如果每一条数据在插入前，都需要去查询该数据是否在数据库，那会多么耗时，效率会大大较低，那么还有什么好办法呢？</p>
<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><h3 id="MongoDB-索引"><a href="#MongoDB-索引" class="headerlink" title="MongoDB 索引"></a>MongoDB 索引</h3><p>索引能够实现高效地查询。没有索引，MongoDB 就必须扫描集合中的所有文档，才能找到匹配查询语句的文档。这种扫描毫无效率可言，需要处理大量的数据。</p>
<p>索引是一种特殊的数据结构，将一小块数据集保存为容易遍历的形式。索引能够存储某种特殊字段或字段集的值，并按照索引指定的方式将字段值进行排序。</p>
<p>我们可以借助索引，使用 <code>insert_one</code>方法提高效率。代码实现：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoDBPipeline</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></div><div class="line">        self.client = mongodb_client</div><div class="line">        self.db = self.client.get_database()</div><div class="line">        self.collection = self.db[<span class="string">'test'</span>]</div><div class="line">        <span class="comment"># 添加唯一索引</span></div><div class="line">        self.collection.create_index(<span class="string">'id'</span>, unique=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></div><div class="line">        self.client.close()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.collection.insert_one(dict(item))</div><div class="line">            <span class="keyword">return</span> item</div><div class="line">        <span class="keyword">except</span> DuplicateKeyError:</div><div class="line">            spider.logger.debug(<span class="string">' duplicate key error collection'</span>)</div><div class="line">            <span class="keyword">return</span> item</div></pre></td></tr></table></figure>
<p>其实很简单，就是在 <code>open_spider</code>先创建唯一索引，然后再插入数据。注意需要在<code>process_item</code>中使用异常处理，因为很有可能插入重复数据，到时候就会输出日志。</p>
<h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><p>mongo 除了 <code>insert_one</code>方法还有一种，<code>insert_many</code></p>
<p><code>insert_many(documents, ordered=True, bypass_document_validation=False, session=None)</code></p>
<p>Insert an iterable of documents.<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; db.test.count()</div><div class="line"><span class="number">0</span></div><div class="line">&gt;&gt;&gt; result = db.test.insert_many([&#123;'x': i&#125; <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>)])</div><div class="line">&gt;&gt;&gt; result.inserted_ids</div><div class="line">[ObjectId('<span class="number">54</span>f113fffba522406c9cc20e'), ObjectId('<span class="number">54</span>f113fffba522406c9cc20f')]</div><div class="line">&gt;&gt;&gt; db.test.count()</div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>这样插入的数据不再是一条，而是很多，</p>
<p><a href="https://stackoverflow.com/questions/36792649/whats-the-difference-between-insert-insertone-and-insertmany-method" target="_blank" rel="external">What’s the difference between insert(), insertOne() and insertMany() methods on MongoDB</a></p>
<p>大佬有写到，可以去看看。</p>
<p>同时插入多条数据，减轻数据库压力。但是这个“多”到底还是多少，目前不得而知。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>除了更多机器和更多节点，还有很多方法可以提升 <code>Scrapy</code>运行速度。</p>
<p>今天说到的是管道阻塞问题，还有其他地方也可以优化，还需要努力。</p>
<p><img src="https://i.imgur.com/SQrGHds.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这是崔斯特的第三十九篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;长期更新  (๑• . •๑)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/ThJm8v5.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Scrapy" scheme="https://zhangslob.github.io/categories/Scrapy/"/>
    
    
      <category term="爬虫" scheme="https://zhangslob.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Scrapy" scheme="https://zhangslob.github.io/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>Hi，这里是我的爬虫笔记</title>
    <link href="https://zhangslob.github.io/2018/03/25/Hi%EF%BC%8C%E8%BF%99%E9%87%8C%E6%98%AF%E6%88%91%E7%9A%84%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/"/>
    <id>https://zhangslob.github.io/2018/03/25/Hi，这里是我的爬虫笔记/</id>
    <published>2018-03-25T13:37:15.000Z</published>
    <updated>2018-03-25T14:41:17.359Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是崔斯特的第三十八篇原创文章
</code></pre><p>长期更新  (๑• . •๑)</p>
<p><img src="https://i.imgur.com/St35Zmv.jpg" alt=""></p>
<a id="more"></a>
<p>平时有个习惯，会把自己的笔记写在有道云里面，现在做个整理。会长期更新，因为我是BUG制造机。</p>
<h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><h2 id="xpath提取所有节点文本"><a href="#xpath提取所有节点文本" class="headerlink" title="xpath提取所有节点文本"></a>xpath提取所有节点文本</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test3"</span>&gt;</span>我左青龙，<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"tiger"</span>&gt;</span>右白虎，<span class="tag">&lt;<span class="name">ul</span>&gt;</span>上朱雀，<span class="tag">&lt;<span class="name">li</span>&gt;</span>下玄武。<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>老牛在当中，<span class="tag">&lt;/<span class="name">span</span>&gt;</span>龙头在胸口。<span class="tag">&lt;<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>使用xpath的string(.)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> scrapy.selector <span class="keyword">import</span> Selector</div><div class="line"></div><div class="line">text = <span class="string">'&lt;div id="test3"&gt;我左青龙，&lt;span id="tiger"&gt;右白虎，&lt;ul&gt;上朱雀，&lt;li&gt;下玄武。&lt;/li&gt;&lt;/ul&gt;老牛在当中，&lt;/span&gt;龙头在胸口。&lt;div&gt;'</span></div><div class="line">s = Selector(text=text)</div><div class="line">data = s.xpath(<span class="string">'//div[@id="test3"]'</span>)</div><div class="line">info = data.xpath(<span class="string">'string(.)'</span>).extract()[<span class="number">0</span>]</div><div class="line">print(info)</div><div class="line"></div><div class="line"><span class="comment"># output: 我左青龙，右白虎，上朱雀，下玄武。老牛在当中，龙头在胸口。</span></div></pre></td></tr></table></figure>
<h2 id="如何解决详情页面元素改变"><a href="#如何解决详情页面元素改变" class="headerlink" title="如何解决详情页面元素改变"></a>如何解决详情页面元素改变</h2><p>这个问题是这样产生的，在很多PC站，比如链家，这个页面有这些字段A，但是下个页面这个字段A没了，取而代之的是字段B，在xpath定位时就失效了。这个问题很常见，大体思路是这样的。</p>
<ol>
<li>创建一个包含所有字段的dict: <code>data = {}.fromkeys((&#39;url&#39;, &#39;price&#39;, &#39;address&#39;))</code></li>
<li>然后根据网页中是否有字段来取值，例如，有’url’就取对应的value，没有则为空</li>
<li>这样就可以完美解决匹配不全问题</li>
</ol>
<h1 id="Scrapy-相关"><a href="#Scrapy-相关" class="headerlink" title="Scrapy 相关"></a>Scrapy 相关</h1><h2 id="文件编写"><a href="#文件编写" class="headerlink" title="文件编写"></a>文件编写</h2><p>逻辑文件和解析部分分开写，匹配文件目录是<code>utils/parse/</code>，爬虫文件目录是<code>spiders/</code></p>
<h2 id="Scrapy-中文乱码"><a href="#Scrapy-中文乱码" class="headerlink" title="Scrapy 中文乱码"></a>Scrapy 中文乱码</h2><p>在 <code>setting</code> 文件中设置：<code>FEED_EXPORT_ENCODING = &#39;utf-8&#39;</code></p>
<h2 id="Scrapy-使用Mongo"><a href="#Scrapy-使用Mongo" class="headerlink" title="Scrapy 使用Mongo"></a>Scrapy 使用Mongo</h2><p><code>pipelines.py</code></p>
<ol>
<li>首先我们要从settings文件中读取数据的地址、端口、数据库名称。</li>
<li>拿到数据库的基本信息后进行连接。</li>
<li>将数据写入数据库（update制定唯一键）</li>
<li>关闭数据库</li>
</ol>
<blockquote>
<p>注意：只有打开和关闭是只执行一次，而写入操作会根据具体的写入次数而定。<br>Redis 无需关闭<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pymongo</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoDBPipeline</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    1、连接数据库操作</div><div class="line">    """</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,mongourl,mongoport,mongodb)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line">        初始化mongodb数据的url、端口号、数据库名称</div><div class="line">        :param mongourl:</div><div class="line">        :param mongoport:</div><div class="line">        :param mongodb:</div><div class="line">        '''</div><div class="line">        self.mongourl = mongourl</div><div class="line">        self.mongoport = mongoport</div><div class="line">        self.mongodb = mongodb</div><div class="line"> </div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls,crawler)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        1、读取settings里面的mongodb数据的url、port、DB。</div><div class="line">        :param crawler:</div><div class="line">        :return:</div><div class="line">        """</div><div class="line">        <span class="keyword">return</span> cls(</div><div class="line">            mongourl = crawler.settings.get(<span class="string">"MONGO_URL"</span>),</div><div class="line">            mongoport = crawler.settings.get(<span class="string">"MONGO_PORT"</span>),</div><div class="line">            mongodb = crawler.settings.get(<span class="string">"MONGO_DB"</span>)</div><div class="line">        )</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self,spider)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line">        1、连接mongodb数据</div><div class="line">        :param spider:</div><div class="line">        :return:</div><div class="line">        '''</div><div class="line">        self.client = pymongo.MongoClient(self.mongourl,self.mongoport)</div><div class="line">        self.db = self.client[self.mongodb]</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self,item,spider)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line">        1、将数据写入数据库</div><div class="line">        :param item:</div><div class="line">        :param spider:</div><div class="line">        :return:</div><div class="line">        '''</div><div class="line">        name = item.__class__.__name__</div><div class="line">        <span class="comment"># self.db[name].insert(dict(item))</span></div><div class="line">        self.db[<span class="string">'user'</span>].update(&#123;<span class="string">'url_token'</span>:item[<span class="string">'url_token'</span>]&#125;,&#123;<span class="string">'$set'</span>:item&#125;,<span class="keyword">True</span>)</div><div class="line">        <span class="keyword">return</span> item</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self,spider)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line">        1、关闭数据库连接</div><div class="line">        :param spider:</div><div class="line">        :return:</div><div class="line">        '''</div><div class="line">        self.client.close()</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="scrapy图片下载"><a href="#scrapy图片下载" class="headerlink" title="scrapy图片下载"></a>scrapy图片下载</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="keyword">from</span> scrapy.pipelines.images <span class="keyword">import</span> ImagesPipeline</div><div class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> DropItem</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyImagesPipeline</span><span class="params">(ImagesPipeline)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_media_requests</span><span class="params">(self, item, info)</span>:</span></div><div class="line">        <span class="keyword">for</span> image_url <span class="keyword">in</span> item[<span class="string">'image_urls'</span>]:</div><div class="line">            <span class="keyword">yield</span> scrapy.Request(image_url)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">item_completed</span><span class="params">(self, results, item, info)</span>:</span></div><div class="line">        image_paths = [x[<span class="string">'path'</span>] <span class="keyword">for</span> ok, x <span class="keyword">in</span> results <span class="keyword">if</span> ok]</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> image_paths:</div><div class="line">            <span class="keyword">raise</span> DropItem(<span class="string">"Item contains no images"</span>)</div><div class="line">        item[<span class="string">'image_paths'</span>] = image_paths</div><div class="line">        <span class="keyword">return</span> item</div></pre></td></tr></table></figure>
<h2 id="scrapy-暂停爬虫"><a href="#scrapy-暂停爬虫" class="headerlink" title="scrapy 暂停爬虫"></a>scrapy 暂停爬虫</h2><p><code>scrapy crawl somespider -s JOBDIR=crawls/somespider-1</code></p>
<h2 id="scrapy-redis-分布式"><a href="#scrapy-redis-分布式" class="headerlink" title="scrapy_redis 分布式"></a>scrapy_redis 分布式</h2><p>使用队列与去重即可完成分布式需求，需要注意的是 Redis 格式，默认采用的是 <code>list</code>， 可以在 <code>settings.py</code> 文件中设置 <code>REDIS_START_URLS_AS_SET = True</code>，使用 <code>Redis</code>的 <code>set</code>类型（去重种子链接）</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="超时问题"><a href="#超时问题" class="headerlink" title="超时问题"></a>超时问题</h2><p>自定义超时时间</p>
<p><code>sudo pip3 --default-timeout=100 install -U scrapy</code></p>
<p>或者 使用其他源</p>
<p><code>sudo pip3 install scrapy -i https://pypi.tuna.tsinghua.edu.cn/simple</code></p>
<h2 id="权限问题"><a href="#权限问题" class="headerlink" title="权限问题"></a>权限问题</h2><p>安装某模块时，报错：<code>PermissionError: [WinError 5] 拒绝访问。: &#39;c:\\program files\\python35\\Lib\\sit
e-packages\\lxml&#39;</code></p>
<p>最简单方法：<code>pip install --user lxml</code></p>
<h1 id="Pycharm-相关"><a href="#Pycharm-相关" class="headerlink" title="Pycharm 相关"></a>Pycharm 相关</h1><h2 id="gitignore-文件"><a href="#gitignore-文件" class="headerlink" title=".gitignore 文件"></a>.gitignore 文件</h2><p>安装插件： <code>Preferences &gt; Plugins &gt; Browse repositories... &gt; Search for &quot;.ignore&quot; &gt; Install Plugin</code></p>
<p>然后就可以很方便的添加到 .gitignore </p>
<p><img src="https://i.imgur.com/ZvPCFIV.png" alt=""></p>
<h2 id="显示函数"><a href="#显示函数" class="headerlink" title="显示函数"></a>显示函数</h2><p><img src="https://i.imgur.com/iLhj1d9.png" alt=""></p>
<p>点击 <code>Show Members</code>，查看目录，会显示相应的类和函数</p>
<h2 id="激活码"><a href="#激活码" class="headerlink" title="激活码"></a>激活码</h2><ol>
<li><a href="http://idea.liyang.io" target="_blank" rel="external">http://idea.liyang.io</a></li>
<li><a href="http://xidea.online" target="_blank" rel="external">http://xidea.online</a></li>
</ol>
<h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><h2 id="Mongo导出命令"><a href="#Mongo导出命令" class="headerlink" title="Mongo导出命令"></a>Mongo导出命令</h2><p><code>λ mongoexport -d test -c set --type=csv -f name,age -o set.csv</code></p>
<p><code>λ mongoexport -h 10.10.10.11 -d test -c test --type=csv -f url,id,title -o data.csv</code></p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="requirements-txt-文件"><a href="#requirements-txt-文件" class="headerlink" title="requirements.txt 文件"></a>requirements.txt 文件</h2><p>小提示：使用 <a href="https://github.com/damnever/pigar" target="_blank" rel="external">pigar</a> 可以一键生成 requirements.txt 文件</p>
<p>Installation：<code>pip install pigar</code></p>
<p>Usage：<code>pigar</code> </p>
<p><img src="https://raw.githubusercontent.com/Damnever/pigar/master/short-guide.gif" alt=""></p>
<p>好了，今天先写这点，以后再补上。</p>
<p><img src="https://i.imgur.com/e4InMl7.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这是崔斯特的第三十八篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;长期更新  (๑• . •๑)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/St35Zmv.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://zhangslob.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://zhangslob.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>学习Git（二）基本操作</title>
    <link href="https://zhangslob.github.io/2018/03/19/%E5%AD%A6%E4%B9%A0Git%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>https://zhangslob.github.io/2018/03/19/学习Git（二）基本操作/</id>
    <published>2018-03-19T13:11:39.000Z</published>
    <updated>2018-03-19T14:46:11.372Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是崔斯特的第三十七篇原创文章
</code></pre><p>继续补基础  (๑• . •๑)</p>
<p><img src="https://i.imgur.com/nSjj0lk.png" alt=""></p>
<a id="more"></a>
<h1 id="Git-基础操作"><a href="#Git-基础操作" class="headerlink" title="Git 基础操作"></a>Git 基础操作</h1><h2 id="1-创建版本库"><a href="#1-创建版本库" class="headerlink" title="1. 创建版本库"></a>1. 创建版本库</h2><p>什么是版本库呢？版本库又名仓库，英文名 repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被 Git 管理起来，每个文件的修改、删除，Git 都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p>
<p>所以，创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>mkdir learngit</div><div class="line"><span class="variable">$ </span>cd learngit</div><div class="line"><span class="variable">$ </span>pwd</div><div class="line">/Users/learngit</div></pre></td></tr></table></figure>
<p><code>pwd</code>命令用于显示当前目录。</p>
<p>如果你使用 Windows 系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。</p>
<p>第二步，通过<code>git init</code>命令把这个目录变成 Git 可以管理的仓库：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git init</div><div class="line">Initialized empty Git repository <span class="keyword">in</span> <span class="regexp">/Users/</span>learngit<span class="regexp">/.git/</span></div></pre></td></tr></table></figure>
<p>瞬间 Git 就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository）</p>
<p>用<code>ls -ah</code>命令就可以看见当前目录下多了一个<code>.git</code>的目录，这个目录是 Git 来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把 Git 仓库给破坏了。</p>
<p>一定要放到 learngit 目录下或子目录下</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git status <span class="comment"># 随时用git status 查看文件状态</span></div></pre></td></tr></table></figure>
<p>一个文件放到 Git 仓库只需要两步。</p>
<ol>
<li>用命令<code>git add</code>告诉 Git，把文件添加到仓库：</li>
</ol>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">add</span><span class="bash"> .  <span class="comment"># 把所有文件都添加到仓库</span></span></div></pre></td></tr></table></figure>
<p>执行上面的命令，没有任何显示，这就对了，Unix 的哲学是“没有消息就是好消息”，说明添加成功。（因为没有添加任何文件，如果添加结果不同，可以使用 <code>git status</code> 随时查看 <code>Git</code> 状态）</p>
<ol>
<li>用命令<code>git commit</code>告诉 Git，把文件提交到仓库：</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">commit</span> abc/aaa.py -m<span class="string">"chore:wrote a readme file"</span></div><div class="line">[<span class="keyword">master</span> (root-<span class="keyword">commit</span>) cb926e7] wrote a readme <span class="keyword">file</span></div><div class="line"> <span class="number">1</span> <span class="keyword">file</span> <span class="keyword">changed</span>, <span class="number">2</span> insertions(+)</div><div class="line"> <span class="keyword">create</span> <span class="keyword">mode</span> <span class="number">100644</span> aaa.py</div></pre></td></tr></table></figure>
<p>commit 必须遵循commit规范<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">**git commit规范**</div><div class="line"></div><div class="line">-<span class="ruby"> feat：新功能（feature）</span></div><div class="line">-<span class="ruby"> fix：修补bug</span></div><div class="line">-<span class="ruby"> docs：文档（documentation）</span></div><div class="line">-<span class="ruby"> style： 格式（不影响代码运行的变动）</span></div><div class="line">-<span class="ruby"> refactor：重构（即不是新增功能，也不是修改bug的代码变动）</span></div><div class="line">-<span class="ruby"> test：增加测试</span></div><div class="line">-<span class="ruby"> chore：构建过程或辅助工具的变动</span></div></pre></td></tr></table></figure></p>
<h2 id="2-新机器配置-Git"><a href="#2-新机器配置-Git" class="headerlink" title="2. 新机器配置 Git"></a>2. 新机器配置 Git</h2><ol>
<li>创建 SSH Key。在用户主目录下，看看有没有<code>.ssh</code>目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到第2步。如果没有，打开 Shell（Windows 下打开 Git Bash），创建 SSH Key：</li>
</ol>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>ssh-keygen -t rsa -C <span class="string">"你的github邮箱"</span></div></pre></td></tr></table></figure>
<p>把邮件地址换成你自己的邮件地址，一路回车，使用默认值即可，无需设置密码。</p>
<p>如果一切顺利的话，可以在用户主目录里找到<code>.ssh</code>目录，里面有 id_rsa 和 id_rsa.pub 两个文件，这两个就是 SSH Key 的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p>
<ol>
<li>登陆 GitHub，打开“Account settings”，“SSH Keys”页面：</li>
</ol>
<p>然后，点“Add SSH Key”，填上任意 Title，在 Key 文本框里粘贴<code>id_rsa.pub</code>文件的内容：</p>
<p><img src="http://wiki.jikexueyuan.com/project/git-tutorial/images/git13.png" alt="img"></p>
<p>点“Add Key”，你就应该看到已经添加的 Key</p>
<p><img src="http://wiki.jikexueyuan.com/project/git-tutorial/images/git16.png" alt="img"></p>
<p>当然，GitHub 允许你添加多个 Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的 Key 都添加到 GitHub，就可以在每台电脑上往 GitHub 推送了。</p>
<h2 id="3-关联远程库"><a href="#3-关联远程库" class="headerlink" title="3. 关联远程库"></a>3. 关联远程库</h2><ol>
<li><p>如果公司已创建该项目的远程库，本地还没有，clone 该项目地址: clone with ssh</p>
<p> <img src="/Users/offer/Desktop/clone.jpg" alt=""></p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">clone</span> <span class="title">git</span>@github.com:xxxx/xxx.git</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>SSH 警告</strong></p>
<p>   当你第一次使用 Git 的 clone 或者 push 命令连接 GitHub 时，会得到一个警告：</p>
   <figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">The authenticity <span class="keyword">of</span> host <span class="comment">'github.com (xx.xx.xx.xx)' can't be established.</span></div><div class="line">RSA <span class="keyword">key</span> fingerprint <span class="keyword">is</span> xx.xx.xx.xx.xx.</div><div class="line">Are you sure you want <span class="keyword">to</span> <span class="keyword">continue</span> connecting (yes/no)?</div></pre></td></tr></table></figure>
<p>   这是因为 Git 使用 SSH 连接，而 SSH 连接在第一次验证 GitHub 服务器的 Key 时，需要你确认 GitHub 的 Key 的指纹信息是否真的来自 GitHub 的服务器，输入 yes 回车即可。</p>
<p>   Git 会输出一个警告，告诉你已经把 GitHub 的 Key 添加到本机的一个信任列表里了：</p>
   <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Warning: Permanently added <span class="string">'github.com'</span> (RSA) <span class="built_in">to</span> <span class="keyword">the</span> list <span class="keyword">of</span> known hosts.</div></pre></td></tr></table></figure>
<p>   这个警告只会出现一次，后面的操作就不会有任何警告了。</p>
<p>   ​</p>
<ol>
<li><p>如果已经在本地创建了一个 Git 仓库后，公司也已在 GitHub 创建一个 Git 仓库，</p>
<ul>
<li>实现让这两个仓库进行远程同步</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote <span class="keyword">add</span><span class="bash"> origin git@github.com:xxxx/xxxx.git</span></div></pre></td></tr></table></figure>
<ul>
<li><p>下一步，就可以把本地库的所有内容推送到远程库上</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">push</span> -u <span class="built_in">origin</span> master</div></pre></td></tr></table></figure>
<p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支 master 推送到远程。</p>
<p>由于远程库是空的，我们第一次推送 master 分支时，加上了<code>-u</code>参数，Git 不但会把本地的 master 分支内容推送的远程新的 master 分支，还会把本地的 master 分支和远程的 master 分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>
<p>推送成功后，可以立刻在 GitHub 页面中看到远程库的内容已经和本地一模一样</p>
<p>从现在起，只要本地作了提交，就可以通过命令：</p>
<p>$ git push origin master 把本地master分支的最新修改推送至GitHub</p>
</li>
</ul>
</li>
<li><p>一般我们在develop分支开发</p>
<ol>
<li>如果github上<strong>没有develop分支</strong></li>
</ol>
<ul>
<li><p>首先，我们在本地创建 develop 分支，然后切换到 develop 分支：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git checkout -<span class="selector-tag">b</span> develop</div><div class="line">Switched to <span class="selector-tag">a</span> new branch <span class="string">'develop'</span></div></pre></td></tr></table></figure>
<p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换，相当于以下两条命令：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">branch </span>develop</div><div class="line">$ git checkout develop</div><div class="line"><span class="keyword">Switched </span>to <span class="keyword">branch </span><span class="string">'develop'</span></div></pre></td></tr></table></figure>
<p>然后，用<code>git branch</code>命令查看当前分支：</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> git branch</div><div class="line"><span class="comment">* develop</span></div><div class="line">  master</div></pre></td></tr></table></figure>
<p><code>git branch</code>命令会列出所有分支，当前分支前面会标一个<code>*</code>号</p>
</li>
<li><p>发布develop分支</p>
<p>发布dev分支指的是同步develop分支的代码到远程服务器</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">push</span> origin develop:develop    <span class="meta"># 这样远程仓库也有一个develop分支了 或者</span></div><div class="line">git <span class="keyword">push</span> origin develop  <span class="meta"># 这两种应该都可以</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li><p>如果github已经<strong>有master分支和develop分支</strong></p>
<p>在本地</p>
<p><code>git checkout -b develop</code> 新建并切换到本地develop分支</p>
<p><code>git pull origin develop</code>  本地develop分支与远程develop分支相关联</p>
</li>
</ol>
</li>
</ol>
<hr>
<h1 id="Git-总结"><a href="#Git-总结" class="headerlink" title="Git 总结"></a>Git 总结</h1><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">add </span>.  <span class="comment"># 添加所有改动的文件到仓库</span></div><div class="line">git commit 文件路径 -m<span class="string">'fix:修复xx bug'</span></div><div class="line"></div><div class="line"><span class="comment"># github上已经有master分支 和dev分支在本地</span></div><div class="line">git checkout -<span class="keyword">b </span>dev <span class="comment"># 创建+切换分支dev</span></div><div class="line">git pull <span class="keyword">origin </span>dev <span class="comment"># 本地分支与远程分支相关联dev</span></div><div class="line"></div><div class="line"><span class="comment"># github无dev分支，在本地新建分支并推送到远程</span></div><div class="line">git checkout -<span class="keyword">b </span>dev</div><div class="line">git push <span class="keyword">origin </span>dev:dev  <span class="comment"># 这样远程仓库中也就创建了一个dev分支</span></div><div class="line"></div><div class="line">git <span class="keyword">branch </span> <span class="comment"># 查看本地有多少分支</span></div><div class="line">git <span class="keyword">branch </span>分支名字 <span class="comment"># 创建分支</span></div><div class="line">git checkout dev <span class="comment"># 切换到dev分支进行开发</span></div><div class="line">git push <span class="comment"># 提交到远程</span></div><div class="line">git <span class="keyword">branch </span>-d dev <span class="comment"># 删除本地dev分支</span></div><div class="line">git merge dev <span class="comment"># 合并dev到当前分支(master)</span></div></pre></td></tr></table></figure>
<h1 id="git-remote-深入研究"><a href="#git-remote-深入研究" class="headerlink" title="git remote 深入研究"></a>git remote 深入研究</h1><blockquote>
<p>git-remote - Manage set of tracked repositories</p>
</blockquote>
<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="string">git </span><span class="string">remote </span>[-v | <span class="built_in">--verbose]</span></div><div class="line"><span class="string">git </span><span class="string">remote </span><span class="string">add </span>[-t &lt;<span class="string">branch&gt;</span>] [-m &lt;<span class="string">master&gt;</span>] [-f] [--[<span class="string">no-</span>]<span class="string">tags]</span> [<span class="built_in">--mirror=&lt;fetch|push&gt;]</span> &lt;<span class="string">name&gt;</span> &lt;<span class="string">url&gt;</span></div><div class="line"><span class="string">git </span><span class="string">remote </span><span class="string">rename </span>&lt;<span class="string">old&gt;</span> &lt;<span class="string">new&gt;</span></div><div class="line"><span class="string">git </span><span class="string">remote </span><span class="string">remove </span>&lt;<span class="string">name&gt;</span></div><div class="line"><span class="string">git </span><span class="string">remote </span><span class="built_in">set-head</span> &lt;<span class="string">name&gt;</span> (-a | <span class="built_in">--auto</span> | -d | <span class="built_in">--delete</span> | &lt;<span class="string">branch&gt;</span>)</div><div class="line"><span class="string">git </span><span class="string">remote </span><span class="built_in">set-branches</span> [<span class="built_in">--add]</span> &lt;<span class="string">name&gt;</span> &lt;<span class="string">branch&gt;</span>…​</div><div class="line"><span class="string">git </span><span class="string">remote </span><span class="built_in">get-url</span> [<span class="built_in">--push]</span> [<span class="built_in">--all]</span> &lt;<span class="string">name&gt;</span></div><div class="line"><span class="string">git </span><span class="string">remote </span><span class="built_in">set-url</span> [<span class="built_in">--push]</span> &lt;<span class="string">name&gt;</span> &lt;<span class="string">newurl&gt;</span> [&lt;<span class="string">oldurl&gt;</span>]</div><div class="line"><span class="string">git </span><span class="string">remote </span><span class="built_in">set-url</span> <span class="built_in">--add</span> [<span class="built_in">--push]</span> &lt;<span class="string">name&gt;</span> &lt;<span class="string">newurl&gt;</span></div><div class="line"><span class="string">git </span><span class="string">remote </span><span class="built_in">set-url</span> <span class="built_in">--delete</span> [<span class="built_in">--push]</span> &lt;<span class="string">name&gt;</span> &lt;<span class="string">url&gt;</span></div><div class="line"><span class="string">git </span><span class="string">remote </span>[-v | <span class="built_in">--verbose]</span> <span class="string">show </span>[-n] &lt;<span class="string">name&gt;</span>…​</div><div class="line"><span class="string">git </span><span class="string">remote </span><span class="string">prune </span>[-n | <span class="built_in">--dry-run]</span> &lt;<span class="string">name&gt;</span>…​</div><div class="line"><span class="string">git </span><span class="string">remote </span>[-v | <span class="built_in">--verbose]</span> <span class="string">update </span>[-p | <span class="built_in">--prune]</span> [(&lt;<span class="string">group&gt;</span> | &lt;<span class="string">remote&gt;</span>)…​]</div></pre></td></tr></table></figure>
<h2 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h2><p>如果想查看你已经配置的远程仓库服务器，可以运行 <code>git remote</code> 命令。 它会列出你指定的每一个远程服务器的简写。 如果你已经克隆了自己的仓库，那么至少应该能看到 <code>origin -</code> 这是 <code>Git</code> 给你克隆的仓库服务器的默认名字：</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> git clone https:<span class="comment">//github.com/schacon/ticgit</span></div><div class="line"><span class="function"><span class="title">Cloning</span></span> into <span class="string">'ticgit'</span>...</div><div class="line">remote: Reusing existing pack: <span class="number">1857</span>, done.</div><div class="line">remote: Total <span class="number">1857</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</div><div class="line">Receiving objects: <span class="number">100</span>% (<span class="number">1857</span>/<span class="number">1857</span>), <span class="number">374.35</span> KiB | <span class="number">268.00</span> KiB/s, done.</div><div class="line">Resolving deltas: <span class="number">100</span>% (<span class="number">772</span>/<span class="number">772</span>), done.</div><div class="line"><span class="function"><span class="title">Checking</span></span> connectivity... done.</div><div class="line"><span class="symbol">$</span> cd ticgit</div><div class="line"><span class="symbol">$</span> git remote</div><div class="line">origin</div></pre></td></tr></table></figure>
<p>你也可以指定选项 <code>-v</code>，会显示需要读写远程仓库使用的 <code>Git</code> 保存的简写与其对应的 URL。<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git remote -v</div><div class="line">origin	https:<span class="regexp">//gi</span>thub.com<span class="regexp">/schacon/</span>ticgit (fetch)</div><div class="line">origin	https:<span class="regexp">//gi</span>thub.com<span class="regexp">/schacon/</span>ticgit (push)</div></pre></td></tr></table></figure></p>
<p>如果你的远程仓库不止一个，该命令会将它们全部列出。 例如，与几个协作者合作的，拥有多个远程仓库的仓库看起来像下面这样：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ cd grit</div><div class="line">$ git remote -v</div><div class="line">bakkdoor  <span class="string">https:</span><span class="comment">//github.com/bakkdoor/grit (fetch)</span></div><div class="line">bakkdoor  <span class="string">https:</span><span class="comment">//github.com/bakkdoor/grit (push)</span></div><div class="line">cho45     <span class="string">https:</span><span class="comment">//github.com/cho45/grit (fetch)</span></div><div class="line">cho45     <span class="string">https:</span><span class="comment">//github.com/cho45/grit (push)</span></div><div class="line">defunkt   <span class="string">https:</span><span class="comment">//github.com/defunkt/grit (fetch)</span></div><div class="line">defunkt   <span class="string">https:</span><span class="comment">//github.com/defunkt/grit (push)</span></div><div class="line">koke      <span class="string">git:</span><span class="comment">//github.com/koke/grit.git (fetch)</span></div><div class="line">koke      <span class="string">git:</span><span class="comment">//github.com/koke/grit.git (push)</span></div><div class="line">origin    git<span class="meta">@github</span>.<span class="string">com:</span>mojombo/grit.git (fetch)</div><div class="line">origin    git<span class="meta">@github</span>.<span class="string">com:</span>mojombo/grit.git (push)</div></pre></td></tr></table></figure>
<p>这样我们可以轻松拉取其中任何一个用户的贡献。 此外，我们大概还会有某些远程仓库的推送权限，虽然我们目前还不会在此介绍。</p>
<p>注意这些远程仓库使用了不同的协议；我们将会在 <a href="https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E6%90%AD%E5%BB%BA-Git#r_git_on_the_server" target="_blank" rel="external">在服务器上搭建 Git</a> 中了解关于它们的更多信息。</p>
<h2 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h2><p>运行 <code>git remote add &lt;shortname&gt; &lt;url&gt;</code> 添加一个新的远程 <code>Git</code> 仓库，同时指定一个你可以轻松引用的简写：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ git remote</div><div class="line">origin</div><div class="line">$ git remote <span class="built_in">add</span> pb http<span class="variable">s:</span>//github.<span class="keyword">com</span>/paulboone/ticgit</div><div class="line">$ git remote -v</div><div class="line">origin	http<span class="variable">s:</span>//github.<span class="keyword">com</span>/schacon/ticgit (fetch)</div><div class="line">origin	http<span class="variable">s:</span>//github.<span class="keyword">com</span>/schacon/ticgit (push)</div><div class="line">pb	http<span class="variable">s:</span>//github.<span class="keyword">com</span>/paulboone/ticgit (fetch)</div><div class="line">pb	http<span class="variable">s:</span>//github.<span class="keyword">com</span>/paulboone/ticgit (push)</div></pre></td></tr></table></figure></p>
<p>现在你可以在命令行中使用字符串 <code>pb</code> 来代替整个 <code>URL</code>。 例如，如果你想拉取 <code>Paul</code> 的仓库中有但你没有的信息，可以运行 <code>git fetch pb</code>：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ git fetch pb</div><div class="line"><span class="string">remote:</span> Counting <span class="string">objects:</span> <span class="number">43</span>, done.</div><div class="line"><span class="string">remote:</span> Compressing <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">36</span>/<span class="number">36</span>), done.</div><div class="line"><span class="string">remote:</span> Total <span class="number">43</span> (delta <span class="number">10</span>), reused <span class="number">31</span> (delta <span class="number">5</span>)</div><div class="line">Unpacking <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">43</span>/<span class="number">43</span>), done.</div><div class="line">From <span class="string">https:</span><span class="comment">//github.com/paulboone/ticgit</span></div><div class="line"> * [<span class="keyword">new</span> branch]      master     -&gt; pb/master</div><div class="line"> * [<span class="keyword">new</span> branch]      ticgit     -&gt; pb/ticgit</div></pre></td></tr></table></figure></p>
<p>现在 <code>Paul</code> 的 <code>master</code> 分支可以在本地通过 <code>pb/master</code> 访问到 - 你可以将它合并到自己的某个分支中，或者如果你想要查看它的话，可以检出一个指向该点的本地分支。 </p>
<p>##从远程仓库中抓取与拉取<br>就如刚才所见，从远程仓库中获得数据，可以执行：</p>
<p><code>$ git fetch [remote-name]</code><br>这个命令会访问远程仓库，从中拉取所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。</p>
<p>如果你使用 <code>clone</code> 命令克隆了一个仓库，命令会自动将其添加为远程仓库并默认以 “origin” 为简写。 所以，<code>git fetch origin</code> 会抓取克隆（或上一次抓取）后新推送的所有工作。 必须注意 <code>git fetch</code> 命令会将数据拉取到你的本地仓库 - 它并不会自动合并或修改你当前的工作。 当准备好时你必须手动将其合并入你的工作。</p>
<p>如果你有一个分支设置为跟踪一个远程分支，可以使用 <code>git pull</code> 命令来自动的抓取然后合并远程分支到当前分支。 这对你来说可能是一个更简单或更舒服的工作流程；默认情况下，<code>git clone</code> 命令会自动设置本地 <code>master</code> 分支跟踪克隆的远程仓库的 <code>master</code> 分支（或不管是什么名字的默认分支）。 运行 <code>git pull</code> 通常会从最初克隆的服务器上抓取数据并自动尝试合并到当前所在的分支。</p>
<h2 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h2><p>当你想分享你的项目时，必须将其推送到上游。 这个命令很简单：<code>git push [remote-name] [branch-name]</code>。 当你想要将 <code>master</code> 分支推送到 <code>origin</code> 服务器时（再次说明，克隆时通常会自动帮你设置好那两个名字），那么运行这个命令就可以将你所做的备份到服务器：</p>
<p><code>$ git push origin master</code><br>只有当你有所克隆服务器的写入权限，并且之前没有人推送过时，这条命令才能生效。 当你和其他人在同一时间克隆，他们先推送到上游然后你再推送到上游，你的推送就会毫无疑问地被拒绝。 你必须先将他们的工作拉取下来并将其合并进你的工作后才能推送。</p>
<h2 id="查看远程仓库-1"><a href="#查看远程仓库-1" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h2><p>如果想要查看某一个远程仓库的更多信息，可以使用 <code>git remote show [remote-name]</code> 命令。 如果想以一个特定的缩写名运行这个命令，例如 <code>origin</code>，会得到像下面类似的信息：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ git remote <span class="keyword">show</span> origin</div><div class="line">* remote origin</div><div class="line">  <span class="keyword">Fetch</span> <span class="keyword">URL</span>: https://github.com/schacon/ticgit</div><div class="line">  Push  <span class="keyword">URL</span>: https://github.com/schacon/ticgit</div><div class="line">  <span class="keyword">HEAD</span> branch: <span class="keyword">master</span></div><div class="line">  Remote branches:</div><div class="line">    <span class="keyword">master</span>                               tracked</div><div class="line">    dev-branch                           tracked</div><div class="line">  <span class="keyword">Local</span> branch configured <span class="keyword">for</span> <span class="string">'git pull'</span>:</div><div class="line">    <span class="keyword">master</span> merges <span class="keyword">with</span> remote <span class="keyword">master</span></div><div class="line">  <span class="keyword">Local</span> <span class="keyword">ref</span> configured <span class="keyword">for</span> <span class="string">'git push'</span>:</div><div class="line">    <span class="keyword">master</span> pushes <span class="keyword">to</span> <span class="keyword">master</span> (up <span class="keyword">to</span> <span class="built_in">date</span>)</div></pre></td></tr></table></figure></p>
<p>它同样会列出远程仓库的 <code>URL</code> 与跟踪分支的信息。 这些信息非常有用，它告诉你正处于 <code>master</code> 分支，并且如果运行 <code>git pull</code>，就会抓取所有的远程引用，然后将远程 <code>master</code> 分支合并到本地 <code>master</code> 分支。 它也会列出拉取到的所有远程引用。</p>
<p>这是一个经常遇到的简单例子。 如果你是 <code>Git</code> 的重度使用者，那么还可以通过 <code>git remote show</code> 看到更多的信息。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$ git remote <span class="keyword">show</span> origin</div><div class="line">* remote origin</div><div class="line">  <span class="keyword">URL</span>: https://github.com/my-org/complex-<span class="keyword">project</span></div><div class="line">  <span class="keyword">Fetch</span> <span class="keyword">URL</span>: https://github.com/my-org/complex-<span class="keyword">project</span></div><div class="line">  Push  <span class="keyword">URL</span>: https://github.com/my-org/complex-<span class="keyword">project</span></div><div class="line">  <span class="keyword">HEAD</span> branch: <span class="keyword">master</span></div><div class="line">  Remote branches:</div><div class="line">    <span class="keyword">master</span>                           tracked</div><div class="line">    dev-branch                       tracked</div><div class="line">    markdown-strip                   tracked</div><div class="line">    issue<span class="number">-43</span>                         <span class="keyword">new</span> (<span class="keyword">next</span> <span class="keyword">fetch</span> will <span class="keyword">store</span> <span class="keyword">in</span> remotes/origin)</div><div class="line">    issue<span class="number">-45</span>                         <span class="keyword">new</span> (<span class="keyword">next</span> <span class="keyword">fetch</span> will <span class="keyword">store</span> <span class="keyword">in</span> remotes/origin)</div><div class="line">    refs/remotes/origin/issue<span class="number">-11</span>     stale (<span class="keyword">use</span> <span class="string">'git remote prune'</span> <span class="keyword">to</span> remove)</div><div class="line">  <span class="keyword">Local</span> branches configured <span class="keyword">for</span> <span class="string">'git pull'</span>:</div><div class="line">    dev-branch merges <span class="keyword">with</span> remote dev-branch</div><div class="line">    <span class="keyword">master</span>     merges <span class="keyword">with</span> remote <span class="keyword">master</span></div><div class="line">  <span class="keyword">Local</span> refs configured <span class="keyword">for</span> <span class="string">'git push'</span>:</div><div class="line">    dev-branch                     pushes <span class="keyword">to</span> dev-branch                     (up <span class="keyword">to</span> <span class="built_in">date</span>)</div><div class="line">    markdown-strip                 pushes <span class="keyword">to</span> markdown-strip                 (up <span class="keyword">to</span> <span class="built_in">date</span>)</div><div class="line">    <span class="keyword">master</span>                         pushes <span class="keyword">to</span> <span class="keyword">master</span>                         (up <span class="keyword">to</span> <span class="built_in">date</span>)</div></pre></td></tr></table></figure></p>
<p>这个命令列出了当你在特定的分支上执行 <code>git push</code> 会自动地推送到哪一个远程分支。 它也同样地列出了哪些远程分支不在你的本地，哪些远程分支已经从服务器上移除了，还有当你执行 <code>git pull</code> 时哪些分支会自动合并。</p>
<h2 id="远程仓库的移除与重命名"><a href="#远程仓库的移除与重命名" class="headerlink" title="远程仓库的移除与重命名"></a>远程仓库的移除与重命名</h2><p>如果想要重命名引用的名字可以运行 <code>git remote rename</code> 去修改一个远程仓库的简写名。 例如，想要将 <code>pb</code> 重命名为 <code>paul</code>，可以用 <code>git remote rename</code> 这样做：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git remote rename pb paul</div><div class="line"><span class="variable">$ </span>git remote</div><div class="line">origin</div><div class="line">paul</div></pre></td></tr></table></figure></p>
<p>值得注意的是这同样也会修改你的远程分支名字。 那些过去引用 <code>pb/master</code> 的现在会引用 <code>paul/master</code>。</p>
<p>如果因为一些原因想要移除一个远程仓库 - 你已经从服务器上搬走了或不再想使用某一个特定的镜像了，又或者某一个贡献者不再贡献了 - 可以使用 <code>git remote rm</code> ：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git remote rm paul</div><div class="line"><span class="variable">$ </span>git remote</div><div class="line">origin</div></pre></td></tr></table></figure></p>
<h1 id="回顾：学习Git（一）起步"><a href="#回顾：学习Git（一）起步" class="headerlink" title="回顾：学习Git（一）起步"></a>回顾：<a href="https://zhangslob.github.io/2018/03/14/%E5%AD%A6%E4%B9%A0Git%EF%BC%88%E4%B8%80%EF%BC%89%E8%B5%B7%E6%AD%A5/">学习Git（一）起步</a></h1>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这是崔斯特的第三十七篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;继续补基础  (๑• . •๑)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/nSjj0lk.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="https://zhangslob.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://zhangslob.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>学习Git（一）起步</title>
    <link href="https://zhangslob.github.io/2018/03/14/%E5%AD%A6%E4%B9%A0Git%EF%BC%88%E4%B8%80%EF%BC%89%E8%B5%B7%E6%AD%A5/"/>
    <id>https://zhangslob.github.io/2018/03/14/学习Git（一）起步/</id>
    <published>2018-03-14T14:52:36.000Z</published>
    <updated>2018-03-19T15:12:28.919Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是崔斯特的第三十六篇原创文章
</code></pre><p>开始补基础  (๑• . •๑)</p>
<p><img src="https://i.imgur.com/nSjj0lk.png" alt=""></p>
<a id="more"></a>
<h1 id="什么是Git"><a href="#什么是Git" class="headerlink" title="什么是Git"></a>什么是Git</h1><p>在Git官网上找到这样一段描述</p>
<blockquote>
<p>Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.</p>
</blockquote>
<p>重点是 <code>version control system</code> (VCS)，翻译过来也就是 <code>版本控制系统</code>。（Pycharm中有一个）</p>
<h2 id="关于版本控制"><a href="#关于版本控制" class="headerlink" title="关于版本控制"></a>关于版本控制</h2><p>版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。</p>
<p>（我的理解就是一个东西会有不同的版本，就像吃鸡，常常更新，每更新一次就是一个新的版本，如果刚发行的版本出现毒圈不掉血，这个时候就需要版本回退。。版本控制系统就体现作用了）</p>
<p>版本控制系统又分为：本地版本控制系统、集中化的版本控制系统、分布式版本控制系统。</p>
<p><img src="https://git-scm.com/book/en/v2/images/local.png" alt=""></p>
<blockquote>
<p>本地版本控制系统</p>
</blockquote>
<p><img src="https://git-scm.com/book/en/v2/images/centralized.png" alt=""></p>
<blockquote>
<p>集中化的版本控制系统</p>
</blockquote>
<p><img src="https://git-scm.com/book/en/v2/images/distributed.png" alt=""></p>
<blockquote>
<p>分布式版本控制系统</p>
</blockquote>
<p>更多介绍可以来看 <a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6" target="_blank" rel="external">1.1 起步 - 关于版本控制</a></p>
<h1 id="谁开发了-Git"><a href="#谁开发了-Git" class="headerlink" title="谁开发了 Git"></a>谁开发了 Git</h1><p>2002 年，Linux 内核开源项目组开始启用一个专有的分布式版本控制系统 <code>BitKeeper</code> 来管理和维护代码。</p>
<p>但是到了 2005 年，开发 <code>BitKeeper</code> 的商业公司同 <code>Linux</code> 内核开源社区的合作关系结束，他们收回了 <code>Linux</code> 内核社区免费使用 <code>BitKeeper</code> 的权力。 这就迫使 <code>Linux</code> 开源社区（特别是 <code>Linux</code> 的缔造者 <code>Linus Torvalds</code>）基于使用 <code>BitKeeper</code> 时的经验教训，开发出自己的版本系统。 他们对新的系统制订了若干目标：</p>
<ul>
<li>速度</li>
<li>简单的设计</li>
<li>对非线性开发模式的强力支持（允许成千上万个并行开发的分支）</li>
<li>完全分布式</li>
<li>有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）</li>
</ul>
<h1 id="Git-特点"><a href="#Git-特点" class="headerlink" title="Git 特点"></a>Git 特点</h1><h2 id="Git-工作流"><a href="#Git-工作流" class="headerlink" title="Git 工作流"></a>Git 工作流</h2><p>基本的 Git 工作流程如下：</p>
<ol>
<li>克隆 Git 资源作为工作目录。</li>
<li>在克隆的资源上添加或修改文件。</li>
<li>如果其他人修改了，你可以更新资源。</li>
<li>在提交前查看修改。</li>
<li>提交修改。</li>
<li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</li>
</ol>
<h2 id="近乎所有操作都是本地执行"><a href="#近乎所有操作都是本地执行" class="headerlink" title="近乎所有操作都是本地执行"></a>近乎所有操作都是本地执行</h2><p>在 <code>Git</code> 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。</p>
<p>举个例子，要浏览项目的历史，<code>Git</code> 不需外连到服务器去获取历史，然后再显示出来——它只需直接从本地数据库中读取。 你能立即看到项目历史。 如果你想查看当前版本与一个月前的版本之间引入的修改，<code>Git</code> 会查找到一个月前的文件做一次本地的差异计算，而不是由远程服务器处理或从远程服务器拉回旧版本文件再来本地处理。</p>
<h2 id="Git-保证完整性"><a href="#Git-保证完整性" class="headerlink" title="Git 保证完整性"></a>Git 保证完整性</h2><p><code>Git</code> 中所有数据在存储前都计算校验和，然后以校验和来引用。 这意味着不可能在 <code>Git</code> 不知情时更改任何文件内容或目录内容。 这个功能建构在 <code>Git</code> 底层，是构成 <code>Git</code> 哲学不可或缺的部分。 若你在传送过程中丢失信息或损坏文件，<code>Git</code> 就能发现。</p>
<p><code>Git</code> 用以计算校验和的机制叫做 <code>SHA-1</code> 散列（hash，哈希）。 这是一个由 40 个十六进制字符（0-9 和 a-f）组成字符串，基于 <code>Git</code> 中文件的内容或目录结构计算出来。 <code>SHA-1</code> 哈希看起来是这样：</p>
<p><code>24b9da6552252987aa493b52f8696cd6d3b00373</code></p>
<p><code>Git</code> 中使用这种哈希值的情况很多，你将经常看到这种哈希值。 实际上，<code>Git</code> 数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名。</p>
<h2 id="Git-一般只添加数据"><a href="#Git-一般只添加数据" class="headerlink" title="Git 一般只添加数据"></a>Git 一般只添加数据</h2><p>你执行的 <code>Git</code> 操作，几乎只往 <code>Git</code> 数据库中增加数据。 很难让 <code>Git</code> 执行任何不可逆操作，或者让它以任何方式清除数据。 同别的 <code>VCS</code> 一样，未提交更新时有可能丢失或弄乱修改的内容；但是一旦你提交快照到 <code>Git</code> 中，就难以再丢失数据，特别是如果你定期的推送数据库到其它仓库的话。</p>
<h2 id="Git-的三种状态"><a href="#Git-的三种状态" class="headerlink" title="Git 的三种状态"></a>Git 的三种状态</h2><ol>
<li>已提交（committed）：数据已经安全的保存在本地数据库中。</li>
<li>已修改（modified） ：修改了文件，但还没保存到数据库中。</li>
<li>已暂存（staged）   ：对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li>
</ol>
<p>由此引入 Git 项目的三个工作区域的概念：Git 仓库、工作目录以及暂存区域。</p>
<p><img src="https://git-scm.com/book/en/v2/images/areas.png" alt=""></p>
<h1 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h1><p>说了那么多，现在开始动手，安装Git。</p>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p><code>$ sudo yum install git</code></p>
<p>或者</p>
<p><code>$ sudo apt-get install git</code></p>
<h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><p>下载安装包 <a href="https://git-scm.com/download/mac" target="_blank" rel="external">Downloading Git</a></p>
<p>或者</p>
<p><code>$ brew install git</code></p>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>直接下载文件 <a href="https://git-scm.com/download/win" target="_blank" rel="external">Downloading Git</a></p>
<p>或者</p>
<p>安装 <a href="https://desktop.github.com/" target="_blank" rel="external">GitHub for Windows</a></p>
<h1 id="初次运行-Git-前的配置"><a href="#初次运行-Git-前的配置" class="headerlink" title="初次运行 Git 前的配置"></a>初次运行 Git 前的配置</h1><h2 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;name&quot;</div><div class="line">$ git config --global user.email example@example.com</div></pre></td></tr></table></figure>
<p>如果使用了 <code>--global</code> 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， <code>Git</code> 都会使用那些信息。</p>
<h2 id="检查配置信息"><a href="#检查配置信息" class="headerlink" title="检查配置信息"></a>检查配置信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ git config --list</div><div class="line">user.name=name</div><div class="line">user.email=example@example.com</div><div class="line">color.status=auto</div><div class="line">color.branch=auto</div><div class="line">color.interactive=auto</div><div class="line">color.diff=auto</div><div class="line">...</div></pre></td></tr></table></figure>
<h2 id="获取帮助"><a href="#获取帮助" class="headerlink" title="获取帮助"></a>获取帮助</h2><p>若你使用 <code>Git</code> 时需要获取帮助，有三种方法可以找到 <code>Git</code> 命令的使用手册：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git help &lt;verb&gt;</div><div class="line">$ git &lt;verb&gt; --help</div><div class="line">$ man git-&lt;verb&gt;</div></pre></td></tr></table></figure></p>
<p>例如，要想获得 <code>config</code> 命令的手册，执行</p>
<p><code>$ git help config</code></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以前只是了解 <code>Git</code>常见的push、commit等命令，从没有对 <code>Git</code>进性过系统学习，抓紧时间学习。</p>
<p><strong>目标</strong>：两周后，也就是3月28日，能熟练使用 <code>Git</code>进性开发。</p>
<p>这一篇主要讲了些背景知识吧，下一篇就是实际的操作了。</p>
<p>主要从<a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">Git文档</a>上截取自己认为重要的部分，有条件可以去仔细阅读。</p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这是崔斯特的第三十六篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;开始补基础  (๑• . •๑)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/nSjj0lk.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="https://zhangslob.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://zhangslob.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>大佬，我代码哪错了？</title>
    <link href="https://zhangslob.github.io/2018/03/13/%E5%A4%A7%E4%BD%AC%EF%BC%8C%E6%88%91%E4%BB%A3%E7%A0%81%E5%93%AA%E9%94%99%E4%BA%86%EF%BC%9F/"/>
    <id>https://zhangslob.github.io/2018/03/13/大佬，我代码哪错了？/</id>
    <published>2018-03-13T13:30:03.000Z</published>
    <updated>2018-03-13T14:45:50.478Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是崔斯特的第三十五篇原创文章
</code></pre><p>到底哪错了  (๑• . •๑)</p>
<p><img src="https://i.imgur.com/pTw3VCX.jpg" alt=""></p>
<a id="more"></a>
<h1 id="问题无处不在"><a href="#问题无处不在" class="headerlink" title="问题无处不在"></a>问题无处不在</h1><p>我： “大佬，帮我看看这个问题错在哪了？”</p>
<p>大佬： “你的代码呢、你的错误提示呢？”</p>
<p>我： “好的，我发给你”</p>
<p><img src="https://i.imgur.com/4nSLl1h.jpg" alt=""></p>
<p>大佬： “。。。 再见”</p>
<p>留下一脸懵逼的我</p>
<p><img src="https://i.imgur.com/pe57y3U.jpg" alt=""></p>
<h1 id="如何解决问题"><a href="#如何解决问题" class="headerlink" title="如何解决问题"></a>如何解决问题</h1><p>最简单的方法是根据错误提示，查看对应位置的代码，Pycharm会提示具体是哪一行代码有问题，并抛出错误。</p>
<p>找到错误首先应自己想办法解决，自己解决又分为几种：有经验的大佬看到<code>Error</code>就知道是哪里有问题了，没经验怎么办，那就自己去搜索了。</p>
<p>下个结论，<strong>你遇到的问题，前人一定遇到过。</strong></p>
<p>所以你只需要把你的错误提示搜索就好了。</p>
<p>注意下面，你懂的。（给自己一个好点的环境）</p>
<blockquote>
<p>Google &gt; 百度</p>
<p>stackoverflow &gt; 知乎</p>
<p>github &gt; CSDN</p>
</blockquote>
<p>Github上有一个很有用的 <a href="https://github.com/trending" target="_blank" rel="external">trending</a> ，可以显示今天或本周或本月最火的项目，例如：</p>
<p><a href="https://github.com/techGay/91porn" target="_blank" rel="external">techGay/91porn</a></p>
<p><img src="https://i.imgur.com/v6RqtqZ.png" alt=""></p>
<p>Github 作为全球最大的同性交友网站，上面有很多值得我们好好学习的东西。</p>
<h1 id="如何向别人提问"><a href="#如何向别人提问" class="headerlink" title="如何向别人提问"></a>如何向别人提问</h1><p>如果你真的像上面哪样，发一张照片，估计大佬都要吐血了。</p>
<p>在这里推荐大家使用Github上的 <a href="https://gist.github.com/" target="_blank" rel="external">gist</a> ，很适合分享代码片段。</p>
<blockquote>
<p>Instantly share code, notes, and snippets.</p>
</blockquote>
<p>例如这样</p>
<p><a href="https://gist.github.com/zhangslob/b10a7753fb1b404c1111e09431da1433" target="_blank" rel="external">Issue in FromRequest #3144</a></p>
<p><img src="https://i.imgur.com/kkLvFTn.png" alt=""></p>
<p>这样看起来是不是舒服多了</p>
<h1 id="如何才能-永无bug"><a href="#如何才能-永无bug" class="headerlink" title="如何才能 永无bug"></a>如何才能 永无bug</h1><h2 id="1、佛祖保佑-永无bug"><a href="#1、佛祖保佑-永无bug" class="headerlink" title="1、佛祖保佑 永无bug"></a>1、佛祖保佑 永无bug</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//                            _ooOoo_</span></div><div class="line"><span class="comment">//                           o8888888o</span></div><div class="line"><span class="comment">//                           88" . "88</span></div><div class="line"><span class="comment">//                           (| -_- |)</span></div><div class="line"><span class="comment">//                            O\ = /O</span></div><div class="line"><span class="comment">//                        ____/`---'\____</span></div><div class="line"><span class="comment">//                      .   ' \\| |// `.</span></div><div class="line"><span class="comment">//                       / \\||| : |||// \</span></div><div class="line"><span class="comment">//                     / _||||| -:- |||||- \</span></div><div class="line"><span class="comment">//                       | | \\\ - /// | |</span></div><div class="line"><span class="comment">//                     | \_| ''\---/'' | |</span></div><div class="line"><span class="comment">//                      \ .-\__ `-` ___/-. /</span></div><div class="line"><span class="comment">//                   ___`. .' /--.--\ `. . __</span></div><div class="line"><span class="comment">//                ."" '&lt; `.___\_&lt;|&gt;_/___.' &gt;'"".</span></div><div class="line"><span class="comment">//               | | : `- \`.;`\ _ /`;.`/ - ` : | |</span></div><div class="line"><span class="comment">//                 \ \ `-. \_ __\ /__ _/ .-` / /</span></div><div class="line"><span class="comment">//         ======`-.____`-.___\_____/___.-`____.-'======</span></div><div class="line"><span class="comment">//                            `=---='</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//         .............................................</span></div><div class="line"><span class="comment">//                  佛祖镇楼                  BUG辟易</span></div><div class="line"><span class="comment">//             佛曰:</span></div><div class="line"><span class="comment">//                  写字楼里写字间，写字间里程序员；</span></div><div class="line"><span class="comment">//                  程序人员写程序，又拿程序换酒钱。</span></div><div class="line"><span class="comment">//                  酒醒只在网上坐，酒醉还来网下眠；</span></div><div class="line"><span class="comment">//                  酒醉酒醒日复日，网上网下年复年。</span></div><div class="line"><span class="comment">//                  但愿老死电脑间，不愿鞠躬老板前；</span></div><div class="line"><span class="comment">//                  奔驰宝马贵者趣，公交自行程序员。</span></div><div class="line"><span class="comment">//                  别人笑我忒疯癫，我笑自己命太贱；</span></div><div class="line"><span class="comment">//                  不见满街漂亮妹，哪个归得程序员？</span></div></pre></td></tr></table></figure>
<h2 id="2、佛系编程-永无bug"><a href="#2、佛系编程-永无bug" class="headerlink" title="2、佛系编程 永无bug"></a>2、佛系编程 永无bug</h2><h4 id="No-Code"><a href="#No-Code" class="headerlink" title="No Code"></a>No Code</h4><p>No code is the best way to write secure and reliable applications. Write nothing; deploy nowhere.</p>
<h4 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h4><p>Start by not writing any code.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>This is just an example application, but imagine it doing anything you want. Adding new features is easy too:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>The possibilities are endless.</p>
<h4 id="Building-the-Application"><a href="#Building-the-Application" class="headerlink" title="Building the Application"></a>Building the Application</h4><p>Now that you have not done anything it’s time to build your application:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>Yep. That’s it. You should see the following output:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<h4 id="Deploying"><a href="#Deploying" class="headerlink" title="Deploying"></a>Deploying</h4><p>While you still have not done anything it’s time to deploy your application. By running the following command you can deploy your application absolutely nowhere.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>It’s that simple. And when it comes time to scale the application, all you have to do is:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
<p>I know right?</p>
<h4 id="Contributing"><a href="#Contributing" class="headerlink" title="Contributing"></a>Contributing</h4><p>You don’t.</p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这是崔斯特的第三十五篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;到底哪错了  (๑• . •๑)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/pTw3VCX.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="https://zhangslob.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="编程" scheme="https://zhangslob.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>学点算法之队列的学习及应用</title>
    <link href="https://zhangslob.github.io/2018/03/06/%E5%AD%A6%E7%82%B9%E7%AE%97%E6%B3%95%E4%B9%8B%E9%98%9F%E5%88%97%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
    <id>https://zhangslob.github.io/2018/03/06/学点算法之队列的学习及应用/</id>
    <published>2018-03-06T12:54:00.000Z</published>
    <updated>2018-03-06T14:00:52.245Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是崔斯特的第三十四篇原创文章
</code></pre><p>从<code>约瑟夫问题</code>开始说起  (๑• . •๑)</p>
<p><img src="https://i.imgur.com/u6F1U4g.png" alt=""></p>
<a id="more"></a>
<h1 id="约瑟夫问题"><a href="#约瑟夫问题" class="headerlink" title="约瑟夫问题"></a>约瑟夫问题</h1><p><strong><a href="https://zh.wikipedia.org/wiki/%E7%BA%A6%E7%91%9F%E5%A4%AB%E6%96%AF%E9%97%AE%E9%A2%98" target="_blank" rel="external">约瑟夫问题</a></strong></p>
<p>有 n 个囚犯站成一个圆圈，准备处决。首先从一个人开始，越过k-2个人（因为第一个人已经被越过），并杀掉第k个人。接着，再越过 k-1个人，并杀掉第k个人。这个过程沿着圆圈一直进行，直到最终只剩下一个人留下，这个人就可以继续活着。</p>
<p>问题是，给定了n和k，一开始要站在什么地方才能避免被处决？</p>
<blockquote>
<p>这个问题是以弗拉维奥·约瑟夫命名的，它是1世纪的一名犹太历史学家。他在自己的日记中写道，他和他的40个战友被罗马军队包围在洞中。他们讨论是自杀还是被俘，最终决定自杀，并以抽签的方式决定谁杀掉谁。约瑟夫斯和另外一个人是最后两个留下的人。约瑟夫斯说服了那个人，<em>他们将向罗马军队投降，不再自杀</em>。约瑟夫斯把他的存活归因于运气或天意，<em>他不知道是哪一个</em>。</p>
</blockquote>
<h1 id="队列是什么"><a href="#队列是什么" class="headerlink" title="队列是什么"></a>队列是什么</h1><p>这道题有多种解法，这里先不说别的，要引出今天的主角——队列。队列的定义很好理解：</p>
<blockquote>
<p>队列是项的有序结合，其中添加新项的一端称为队尾，移除项的一端称为队首。当一个元素从队尾进入队列时，一直向队首移动，直到它成为下一个需要移除的元素为止。</p>
</blockquote>
<p>队列抽象数据类型由以下结构和操作定义。如上所述，队列被构造为在队尾添加项的有序集合，并且从队首移除。队列保持 FIFO 排序属性。 队列操作如下。</p>
<ul>
<li>Queue() 创建一个空的新队列。 它不需要参数，并返回一个空队列。</li>
<li>enqueue(item) 将新项添加到队尾。 它需要 item 作为参数，并不返回任何内容。</li>
<li>dequeue() 从队首移除项。它不需要参数并返回 item。 队列被修改。</li>
<li>isEmpty() 查看队列是否为空。它不需要参数，并返回布尔值。</li>
<li>size() 返回队列中的项数。它不需要参数，并返回一个整数。</li>
</ul>
<p><img src="https://i.imgur.com/KkagGoc.png" alt=""></p>
<h1 id="队列的Python算法实现"><a href="#队列的Python算法实现" class="headerlink" title="队列的Python算法实现"></a>队列的Python算法实现</h1><p>为了实现队列抽象数据类型创建一个新类</p>
<p><a href="https://github.com/bnmnetp/pythonds/blob/master/basic/queue.py" target="_blank" rel="external">pythonds/basic/queue.py</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.items = []</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.items == []</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">enqueue</span><span class="params">(self, item)</span>:</span></div><div class="line">        self.items.insert(<span class="number">0</span>,item)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dequeue</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.items.pop()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> len(self.items)</div></pre></td></tr></table></figure>
<p>想明白了其实就是对 list 的简单操作</p>
<h1 id="如何活到最后"><a href="#如何活到最后" class="headerlink" title="如何活到最后"></a>如何活到最后</h1><p>那我们回到上面的问题，如果是你，你要如何选择并活到最后呢？</p>
<p>我们的程序将输入名称列表和一个称为 <code>num</code> 常量用于报数。它将返回以 <code>num</code> 为单位重复报数后剩余的最后一个人的姓名。</p>
<p>假设第一个人是<code>a</code>。从他开始计数，<code>a</code>将先出列再入队列，把他放在队列的最后。经过 <code>num</code> 次的出队入队后，前面的人将被永久移除队列。并且另一个周期开始，继续此过程，直到只剩下一个名字（队列的大小为 1）。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pythonds.basic.queue <span class="keyword">import</span> Queue</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hotPotato</span><span class="params">(namelist, num)</span>:</span></div><div class="line">    simqueue = Queue()</div><div class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> namelist:</div><div class="line">        simqueue.enqueue(name)</div><div class="line"></div><div class="line">    <span class="keyword">while</span> simqueue.size() &gt; <span class="number">1</span>:</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</div><div class="line">            simqueue.enqueue(simqueue.dequeue())</div><div class="line">        simqueue.dequeue()</div><div class="line"></div><div class="line">    <span class="keyword">return</span> simqueue.dequeue()</div><div class="line"></div><div class="line"></div><div class="line">print(hotPotato([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>], <span class="number">7</span>))</div><div class="line"></div><div class="line"><span class="comment"># output: f</span></div></pre></td></tr></table></figure>
<h1 id="其他解法"><a href="#其他解法" class="headerlink" title="其他解法"></a>其他解法</h1><p>比较简单的做法是用循环单链表模拟整个过程，时间复杂度是O(n*m)。如果只是想求得最后剩下的人，则可以用数学推导的方式得出公式。先看看模拟过程的解法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*- </span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></div><div class="line">		self.value = value </div><div class="line">		self.next = <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_linkList</span><span class="params">(n)</span>:</span></div><div class="line">	head = Node(<span class="number">1</span>)</div><div class="line">	pre = head</div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n+<span class="number">1</span>):</div><div class="line">		newNode = Node(i)</div><div class="line">		pre.next= newNode</div><div class="line">		pre = newNode</div><div class="line">	pre.next = head</div><div class="line">	<span class="keyword">return</span> head</div><div class="line"></div><div class="line">n = <span class="number">5</span> <span class="comment">#总的个数</span></div><div class="line">m = <span class="number">2</span> <span class="comment">#数的数目</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> m == <span class="number">1</span>: <span class="comment">#如果是1的话，特殊处理，直接输出</span></div><div class="line">	print(n)  </div><div class="line"><span class="keyword">else</span>:</div><div class="line">	head = create_linkList(n)</div><div class="line">	pre = <span class="keyword">None</span></div><div class="line">	cur = head</div><div class="line">	<span class="keyword">while</span> cur.next != cur: <span class="comment">#终止条件是节点的下一个节点指向本身</span></div><div class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(m<span class="number">-1</span>):</div><div class="line">			pre =  cur</div><div class="line">			cur = cur.next</div><div class="line">		print(cur.value)</div><div class="line">		pre.next = cur.next</div><div class="line">		cur.next = <span class="keyword">None</span></div><div class="line">		cur = pre.next</div><div class="line">	print(cur.value)</div></pre></td></tr></table></figure>
<h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><p>假设实验室里有一台打印机供学生共性。当学生向共享打印机发送打印任务时，任务被放置在队列中以便以先来先服务的方式被处理。如何才能通过python程序模拟的方式得到每次提交任务的平均等待时间呢？（平均等待时间不包括打印本身的时间，仅指在队列中排队的时间。）<br>我们假定：</p>
<ul>
<li>学生们每次打印的页数在1到20页之间。</li>
<li>打印机平均每小时会收到20个打印请求，即平均每180秒1个请求。</li>
<li>每秒新增任务的可能性相等，即任务的产生为独立同分布</li>
<li>打印机的打印速度恒定。</li>
</ul>
<p>挖坑，要一起来填吗？</p>
<p><img src="https://i.imgur.com/83UUU6k.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这是崔斯特的第三十四篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;从&lt;code&gt;约瑟夫问题&lt;/code&gt;开始说起  (๑• . •๑)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/u6F1U4g.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://zhangslob.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://zhangslob.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="队列" scheme="https://zhangslob.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy源码（2）——爬虫开始的地方</title>
    <link href="https://zhangslob.github.io/2018/02/26/Scrapy%E6%BA%90%E7%A0%81%EF%BC%882%EF%BC%89%E2%80%94%E2%80%94%E7%88%AC%E8%99%AB%E5%BC%80%E5%A7%8B%E7%9A%84%E5%9C%B0%E6%96%B9/"/>
    <id>https://zhangslob.github.io/2018/02/26/Scrapy源码（2）——爬虫开始的地方/</id>
    <published>2018-02-26T14:48:13.000Z</published>
    <updated>2018-02-26T15:14:48.399Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是崔斯特的第三十三篇原创文章
</code></pre><p>开始学习<code>Scrapy</code>源码  (๑• . •๑)</p>
<p><img src="https://i.imgur.com/5wP0fKB.png" alt=""></p>
<a id="more"></a>
<h1 id="Scrapy运行命令"><a href="#Scrapy运行命令" class="headerlink" title="Scrapy运行命令"></a>Scrapy运行命令</h1><p>一般来说，运行Scrapy项目的写法有，（这里不考虑从脚本运行Scrapy）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Usage examples:</div><div class="line"></div><div class="line">$ scrapy crawl myspider</div><div class="line">[ ... myspider starts crawling ... ]</div><div class="line"></div><div class="line">$ scrapy runspider myspider.py</div><div class="line">[ ... spider starts crawling ... ]</div></pre></td></tr></table></figure>
<p>但是更好的写法是，新建一个Python文件，如下，（便于调试）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> cmdline</div><div class="line"></div><div class="line">cmdline.execute(<span class="string">"scrapy crawl myspider"</span>.split())</div></pre></td></tr></table></figure></p>
<p>很容易就发现，Scrapy运行文件是<code>cmdline.py</code>文件里面的<code>execute()</code>函数，下面学习下这个函数在做什么。</p>
<h1 id="分析源码"><a href="#分析源码" class="headerlink" title="分析源码"></a>分析源码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(argv=None, settings=None)</span>:</span></div><div class="line">    <span class="keyword">if</span> argv <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        argv = sys.argv</div><div class="line"></div><div class="line">    <span class="comment"># --- backwards compatibility for scrapy.conf.settings singleton ---</span></div><div class="line">    <span class="keyword">if</span> settings <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">and</span> <span class="string">'scrapy.conf'</span> <span class="keyword">in</span> sys.modules:</div><div class="line">        <span class="keyword">from</span> scrapy <span class="keyword">import</span> conf</div><div class="line">        <span class="keyword">if</span> hasattr(conf, <span class="string">'settings'</span>):</div><div class="line">            settings = conf.settings</div><div class="line">    <span class="comment"># ------------------------------------------------------------------</span></div></pre></td></tr></table></figure>
<p>寻找 <code>scrapy.conf</code>配置文件，argv直接取sys.argv</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> settings <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">    settings = get_project_settings()</div><div class="line">    <span class="comment"># set EDITOR from environment if available</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        editor = os.environ[<span class="string">'EDITOR'</span>]</div><div class="line">    <span class="keyword">except</span> KeyError: <span class="keyword">pass</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        settings[<span class="string">'EDITOR'</span>] = editor</div><div class="line">check_deprecated_settings(settings)</div><div class="line"></div><div class="line"><span class="comment"># --- backwards compatibility for scrapy.conf.settings singleton ---</span></div><div class="line"><span class="keyword">import</span> warnings</div><div class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> ScrapyDeprecationWarning</div><div class="line"><span class="keyword">with</span> warnings.catch_warnings():</div><div class="line">    warnings.simplefilter(<span class="string">"ignore"</span>, ScrapyDeprecationWarning)</div><div class="line">    <span class="keyword">from</span> scrapy <span class="keyword">import</span> conf</div><div class="line">    conf.settings = settings</div><div class="line"><span class="comment"># ------------------------------------------------------------------</span></div></pre></td></tr></table></figure>
<blockquote>
<p>set EDITOR from environment if available</p>
</blockquote>
<p>读取<code>settings</code>设置文件，导入项目，调用<code>get_project_settings()</code>函数，此处为<code>utils</code>文件夹下的<code>project.py</code>文件：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_project_settings</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> ENVVAR <span class="keyword">not</span> <span class="keyword">in</span> os.environ:</div><div class="line">        project = os.environ.get(<span class="string">'SCRAPY_PROJECT'</span>, <span class="string">'default'</span>)</div><div class="line">        init_env(project)</div></pre></td></tr></table></figure>
<blockquote>
<p>project.py</p>
</blockquote>
<p><code>init_env()</code> 函数如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_env</span><span class="params">(project=<span class="string">'default'</span>, set_syspath=True)</span>:</span></div><div class="line">    <span class="string">"""Initialize environment to use command-line tool from inside a project</span></div><div class="line">    dir. This sets the Scrapy settings module and modifies the Python path to</div><div class="line">    be able to locate the project module.</div><div class="line">    """</div><div class="line">    cfg = get_config()</div><div class="line">    <span class="keyword">if</span> cfg.has_option(<span class="string">'settings'</span>, project):</div><div class="line">        os.environ[<span class="string">'SCRAPY_SETTINGS_MODULE'</span>] = cfg.get(<span class="string">'settings'</span>, project)</div><div class="line">    closest = closest_scrapy_cfg()</div><div class="line">    <span class="keyword">if</span> closest:</div><div class="line">        projdir = os.path.dirname(closest)</div><div class="line">        <span class="keyword">if</span> set_syspath <span class="keyword">and</span> projdir <span class="keyword">not</span> <span class="keyword">in</span> sys.path:</div><div class="line">            sys.path.append(projdir)</div></pre></td></tr></table></figure>
<blockquote>
<p>conf.py</p>
</blockquote>
<p>如注释所说，初始化环境,循环递归找到用户项目中的配置文件<code>settings.py</code>,并且将其设置到环境变量<code>Scrapy settings module</code>中。然后修改Python路径，确保能找到项目模块。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">settings = Settings()</div><div class="line">settings_module_path = os.environ.get(ENVVAR)</div><div class="line"><span class="keyword">if</span> settings_module_path:</div><div class="line">    settings.setmodule(settings_module_path, priority=<span class="string">'project'</span>)</div><div class="line"></div><div class="line"><span class="comment"># <span class="doctag">XXX:</span> remove this hack</span></div><div class="line">pickled_settings = os.environ.get(<span class="string">"SCRAPY_PICKLED_SETTINGS_TO_OVERRIDE"</span>)</div><div class="line"><span class="keyword">if</span> pickled_settings:</div><div class="line">    settings.setdict(pickle.loads(pickled_settings), priority=<span class="string">'project'</span>)</div><div class="line"></div><div class="line"><span class="comment"># <span class="doctag">XXX:</span> deprecate and remove this functionality</span></div><div class="line">env_overrides = &#123;k[<span class="number">7</span>:]: v <span class="keyword">for</span> k, v <span class="keyword">in</span> os.environ.items() <span class="keyword">if</span></div><div class="line">                 k.startswith(<span class="string">'SCRAPY_'</span>)&#125;</div><div class="line"><span class="keyword">if</span> env_overrides:</div><div class="line">    settings.setdict(env_overrides, priority=<span class="string">'project'</span>)</div><div class="line"></div><div class="line"><span class="keyword">return</span> settings</div></pre></td></tr></table></figure>
<blockquote>
<p>project.py</p>
</blockquote>
<p>至此，<code>get_project_settings()</code>该函数结束，如函数名字一样，最后返回项目配置，到此为止，接着往下看</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">inproject = inside_project()</div><div class="line">cmds = _get_commands_dict(settings, inproject)</div><div class="line">cmdname = _pop_command_name(argv)</div><div class="line">parser = optparse.OptionParser(formatter=optparse.TitledHelpFormatter(), \</div><div class="line">    conflict_handler=<span class="string">'resolve'</span>)</div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> cmdname:</div><div class="line">    _print_commands(settings, inproject)</div><div class="line">    sys.exit(<span class="number">0</span>)</div><div class="line"><span class="keyword">elif</span> cmdname <span class="keyword">not</span> <span class="keyword">in</span> cmds:</div><div class="line">    _print_unknown_command(settings, cmdname, inproject)</div><div class="line">    sys.exit(<span class="number">2</span>)</div></pre></td></tr></table></figure>
<p>导入相应的module爬虫模块（inside_project）</p>
<p>执行环境是否在项目中，主要检查scrapy.cfg配置文件是否存在，读取commands文件夹，把所有的命令类转换为<code>{cmd_name: cmd_instance}</code>的字典</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">cmd = cmds[cmdname]</div><div class="line">parser.usage = <span class="string">"scrapy %s %s"</span> % (cmdname, cmd.syntax())</div><div class="line">parser.description = cmd.long_desc()</div><div class="line">settings.setdict(cmd.default_settings, priority=<span class="string">'command'</span>)</div><div class="line">cmd.settings = settings</div><div class="line">cmd.add_options(parser)</div><div class="line">opts, args = parser.parse_args(args=argv[<span class="number">1</span>:])</div><div class="line">_run_print_help(parser, cmd.process_options, args, opts)</div></pre></td></tr></table></figure>
<p>根据命令名称找到对应的命令实例，设置项目配置和级别为command，添加解析规则，解析命令参数，并交由Scrapy命令实例处理。</p>
<p>最后，看看下面这段代码。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cmd.crawler_process = CrawlerProcess(settings)</div><div class="line">_run_print_help(parser, _run_command, cmd, args, opts)</div><div class="line">sys.exit(cmd.exitcode)</div></pre></td></tr></table></figure>
<p>初始化<code>CrawlerProcess</code>实例，将对应的命令执行，这里是<code>crawl</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_run_command</span><span class="params">(cmd, args, opts)</span>:</span></div><div class="line">    <span class="keyword">if</span> opts.profile:</div><div class="line">        _run_command_profiled(cmd, args, opts)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        cmd.run(args, opts)</div></pre></td></tr></table></figure>
<p>看到这，想起了文档中的介绍 <a href="https://doc.scrapy.org/en/latest/topics/practices.html#run-scrapy-from-a-script" target="_blank" rel="external">Run Scrapy from a script</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Here’s an example showing how to run a single spider with it.</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="keyword">from</span> scrapy.crawler <span class="keyword">import</span> CrawlerProcess</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    <span class="comment"># Your spider definition</span></div><div class="line">    ...</div><div class="line"></div><div class="line">process = CrawlerProcess(&#123;</div><div class="line">    <span class="string">'USER_AGENT'</span>: <span class="string">'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)'</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">process.crawl(MySpider)</div><div class="line">process.start() <span class="comment"># the script will block here until the crawling is finished</span></div></pre></td></tr></table></figure>
<p>所以Scrapy爬虫运行都有用使用到<code>CrawlerProcess</code>，想要深入了解可以去看看源码 <a href="https://github.com/scrapy/scrapy/blob/1.5/scrapy/crawler.py#L225" target="_blank" rel="external">scrapy/scrapy/crawler.py</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="string">"""</span></div><div class="line">A class to run multiple scrapy crawlers in a process simultaneously.</div><div class="line"></div><div class="line">This class extends :class:`~scrapy.crawler.CrawlerRunner` by adding support</div><div class="line">for starting a Twisted `reactor`_ and handling shutdown signals, like the</div><div class="line">keyboard interrupt command Ctrl-C. It also configures top-level logging.</div><div class="line"></div><div class="line">This utility should be a better fit than</div><div class="line">:class:`~scrapy.crawler.CrawlerRunner` if you aren't running another</div><div class="line">Twisted `reactor`_ within your application.</div><div class="line"></div><div class="line">The CrawlerProcess object must be instantiated with a</div><div class="line">:class:`~scrapy.settings.Settings` object.</div><div class="line"></div><div class="line">:param install_root_handler: whether to install root logging handler</div><div class="line">    (default: True)</div><div class="line"></div><div class="line">This class shouldn't be needed (since Scrapy is responsible of using it</div><div class="line">accordingly) unless writing scripts that manually handle the crawling</div><div class="line">process. See :ref:`run-from-script` for an example.</div><div class="line">"""</div></pre></td></tr></table></figure>
<p>最后，附上Scrapy的路径图</p>
<p><img src="https://i.imgur.com/bG560BG.png" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>简单来说，有这么几步：</p>
<ol>
<li>读取配置文件，应用到爬虫中</li>
<li>把所有的命令类转换名称与实例字典</li>
<li>初始化<code>CrawlerProcess</code>实例，运行爬虫</li>
</ol>
<p>(看的头疼，好多函数名记不住)</p>
<p>回顾：</p>
<ol>
<li><a href="https://zhangslob.github.io/2018/02/24/Scrapy%E6%BA%90%E7%A0%81%EF%BC%881%EF%BC%89%E2%80%94%E2%80%94%E7%88%AC%E8%99%AB%E6%B5%81%E7%A8%8B%E6%A6%82%E8%A7%88/">Scrapy源码（1）——爬虫流程概览</a></li>
<li>Scrapy源码（2）——爬虫开始的地方</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这是崔斯特的第三十三篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;开始学习&lt;code&gt;Scrapy&lt;/code&gt;源码  (๑• . •๑)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/5wP0fKB.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Scrapy" scheme="https://zhangslob.github.io/categories/Scrapy/"/>
    
    
      <category term="爬虫" scheme="https://zhangslob.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Scrapy" scheme="https://zhangslob.github.io/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy源码（1）——爬虫流程概览</title>
    <link href="https://zhangslob.github.io/2018/02/24/Scrapy%E6%BA%90%E7%A0%81%EF%BC%881%EF%BC%89%E2%80%94%E2%80%94%E7%88%AC%E8%99%AB%E6%B5%81%E7%A8%8B%E6%A6%82%E8%A7%88/"/>
    <id>https://zhangslob.github.io/2018/02/24/Scrapy源码（1）——爬虫流程概览/</id>
    <published>2018-02-24T13:16:23.000Z</published>
    <updated>2018-02-26T15:15:04.711Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是崔斯特的第三十二篇原创文章
</code></pre><p>开始学习<code>Scrapy</code>源码  (๑• . •๑)</p>
<p><img src="https://i.imgur.com/5wP0fKB.png" alt=""></p>
<a id="more"></a>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用 <code>Scrapy</code> 已经有一段时间了，觉得自己有必要对源码好好的学习下了，所以写下记录，希望能加深自己的理解。</p>
<blockquote>
<p>Scrapy | A Fast and Powerful Scraping and Web Crawling Framework</p>
</blockquote>
<p>接下来说到的是最新版本： Scrapy 1.5，暂且把 <code>Spider</code> 称为 <strong>蜘蛛</strong>，而不是爬虫。</p>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Scrapy是一个开源爬虫框架，用于抓取网站并提取有用的结构化数据，如数据挖掘，信息处理或历史档案。</p>
<p>尽管Scrapy最初是为<a href="https://en.wikipedia.org/wiki/Web_scraping" target="_blank" rel="external">网页抓取</a>设计的，但它也可以用于使用API（如<a href="https://affiliate-program.amazon.com/gp/advertising/api/detail/main.html" target="_blank" rel="external">Amazon Associates Web Services</a>）或作为通用网络抓取工具提取数据。</p>
<p>一个最简单的例子，相信大家都写过</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">"quotes"</span></div><div class="line">    start_urls = [</div><div class="line">        <span class="string">'http://quotes.toscrape.com/tag/humor/'</span>,</div><div class="line">    ]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="keyword">for</span> quote <span class="keyword">in</span> response.css(<span class="string">'div.quote'</span>):</div><div class="line">            <span class="keyword">yield</span> &#123;</div><div class="line">                <span class="string">'text'</span>: quote.css(<span class="string">'span.text::text'</span>).extract_first(),</div><div class="line">                <span class="string">'author'</span>: quote.xpath(<span class="string">'span/small/text()'</span>).extract_first(),</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        next_page = response.css(<span class="string">'li.next a::attr("href")'</span>).extract_first()</div><div class="line">        <span class="keyword">if</span> next_page <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">yield</span> response.follow(next_page, self.parse)</div></pre></td></tr></table></figure>
<p>一般来说，创建一个Scrapy项目需要如下流程：</p>
<ol>
<li>使用<code>scrapy startproject spider</code>创建爬虫模板</li>
<li>爬虫类继承<code>scrapy.Spider</code>，重写<code>parse</code>方法和逻辑</li>
<li><code>parse</code>方法中<code>yield</code>或<code>return</code>字典、<code>Request</code>、<code>Item</code></li>
<li>自定义<code>Item</code>、<code>Middlewares</code>、<code>Pipelines</code>等</li>
<li>使用<code>scrapy crawl &lt;spider_name&gt;</code>或新建文件<code>cmdline.execute(&quot;scrapy crawl spider_name&quot;.split())</code>运行（便于调试）</li>
<li>其它</li>
</ol>
<h1 id="架构概述"><a href="#架构概述" class="headerlink" title="架构概述"></a>架构概述</h1><p><img src="https://doc.scrapy.org/en/latest/_images/scrapy_architecture_02.png" alt=""></p>
<p>这是一张非常经典的图，基本上说到Scrapy都会用到它，来源于<a href="https://doc.scrapy.org/en/latest/topics/architecture.html#data-flow" target="_blank" rel="external">Architecture overview</a></p>
<h2 id="核心组件（Components）"><a href="#核心组件（Components）" class="headerlink" title="核心组件（Components）"></a>核心组件（Components）</h2><ul>
<li><code>Scrapy Engine</code>：<strong>引擎</strong>，负责控制系统所有组件之间的数据流，并在发生某些操作时触发事件；</li>
<li><code>Scheduler</code>：<strong>调度器</strong>，接收来自引擎的请求，并将它们排入队列，以便在引擎请求它们时将它们提供给它们（也提供给引擎）；</li>
<li><code>Downloader</code>：<strong>下载器</strong>，负责从网络上获取网页并将它们返回到引擎，然后引擎将它们返回给蜘蛛/spiders；</li>
<li><code>Spiders</code>：<strong>蜘蛛</strong>，是用户编写的自定义类，用于解析响应并从中提取项目（也称为抓取的项目）或追加其他请求；</li>
<li><code>Item Pipeline</code>：<strong>管道</strong>，负责输出结构化数据，可自定义输出位置，典型的任务包括清理，验证和持久性；</li>
<li><code>Downloader middlewares</code>：<strong>下载中间件</strong>，位于引擎和下载器之间的特定钩子/hooks，当它们从引擎传递到下载器时处理请求，以及从下载器传递到引擎的响应，常用于如下情况：<ul>
<li>在将请求发送到下载器之前处理请求（即在Scrapy将请求发送到网站之前）;</li>
<li>在将其传递给蜘蛛之前改变接收到的响应;</li>
<li>发送新的请求，而不是将接收到的响应传递给蜘蛛;</li>
<li>向蜘蛛传递响应而不需要获取网页;</li>
<li>默默地放下一些请求。</li>
</ul>
</li>
<li><code>Spider middlewares</code>：<strong>Spider中间件</strong>，特定的钩子，位于引擎和蜘蛛之间，能够处理蜘蛛输入（响应）和输出（项目和请求），常用于如下情况：<ul>
<li>spider回调的后处理输出 更改/添加/删除请求或items;</li>
<li>后处理start_requests;</li>
<li>处理蜘蛛异常;</li>
<li>根据响应内容为一些请求调用errback而不是callback。</li>
</ul>
</li>
<li><code>Event-driven networking</code>：<strong>事件驱动的网络</strong>，Scrapy是用Twisted编写的，这是一个流行的事件驱动的Python网络框架。 因此，它使用非阻塞（又称异步）代码来实现并发。</li>
</ul>
<blockquote>
<p>Twisted is an event-driven networking engine written in Python and licensed under the open source ​MIT license. </p>
</blockquote>
<h2 id="数据流（Data-flow）"><a href="#数据流（Data-flow）" class="headerlink" title="数据流（Data flow）"></a>数据流（Data flow）</h2><p>Scrapy中的数据流由执行引擎控制，如下所示：</p>
<ol>
<li>引擎获取最初的请求从蜘蛛抓取（<code>start_urls</code>）。</li>
<li>引擎在调度程序中调度请求，并要求下一个请求进行采集。</li>
<li>调度器将下一个请求返回给引擎。</li>
<li>引擎将请求发送到下载器，通过下载器中间件。</li>
<li>一旦页面完成下载，<code>Downloader</code>会生成一个响应（包含该页面）并将其发送到引擎，并通过<code>Downloader Middlewares</code>。</li>
<li>引擎从<code>Downloader</code>收到响应并将其发送给<code>Spider</code>进行处理，并通过<code>Spider Middleware</code>传递。</li>
<li><code>Spider</code>处理响应，并通过<code>Spider</code>中间件将抓取的项目和新的请求（后续）返回给引擎。</li>
<li>引擎将处理后的项目发送到项目管道，然后将处理后的请求发送到调度程序，并要求可能的下一个请求进行采集。</li>
<li>该过程重复（从第1步开始），直到调度器没有更多请求。</li>
</ol>
<p>找到一张图，便于理解：</p>
<p><img src="https://i.imgur.com/taeQOrA.png" alt=""></p>
<p>第一期差不多就到这了，没有说很多代码，主要是宏观上来观察 <code>Scrapy</code> 的架构，是如何运行。之后会更多的查看Scrapy的源代码，就近是如何采集数据的。</p>
<p>（内心有点小恐慌，不知道会写成什么样子。）</p>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>关于如何阅读项目源代码，找到一篇不错的文章，共享：<a href="https://zhijianshusheng.github.io/2017/06/07/2017/6/%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/" target="_blank" rel="external">如何阅读开源项目</a></p>
<p>主要是这几部分：</p>
<ol>
<li>看：静态对代码进行分析，看相关资料，代码逻辑。</li>
<li>跑：将项目在IDE里面跑起来，通过IDE调试参数，加Log等。</li>
<li>查：阅读过程中肯定会遇到不懂的，这时候需要通过搜索引擎来解决你的疑惑。</li>
</ol>
<p>回顾：</p>
<ol>
<li>Scrapy源码（1）——爬虫流程概览</li>
<li>Scrapy源码（2）——爬虫开始的地方</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这是崔斯特的第三十二篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;开始学习&lt;code&gt;Scrapy&lt;/code&gt;源码  (๑• . •๑)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/5wP0fKB.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Scrapy" scheme="https://zhangslob.github.io/categories/Scrapy/"/>
    
    
      <category term="爬虫" scheme="https://zhangslob.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Scrapy" scheme="https://zhangslob.github.io/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>PEP8规则及Pycharm应用</title>
    <link href="https://zhangslob.github.io/2018/02/08/PEP8%E8%A7%84%E5%88%99%E5%8F%8APycharm%E5%BA%94%E7%94%A8/"/>
    <id>https://zhangslob.github.io/2018/02/08/PEP8规则及Pycharm应用/</id>
    <published>2018-02-08T13:06:23.000Z</published>
    <updated>2018-02-08T13:13:47.006Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是崔斯特的第三十一篇原创文章
</code></pre><p>学习下 Python增强建议书  (๑• . •๑)</p>
<p><img src="https://i.imgur.com/8HyHkph.png" alt=""></p>
<a id="more"></a>
<h1 id="PEP8"><a href="#PEP8" class="headerlink" title="PEP8"></a>PEP8</h1><blockquote>
<p>PEP是 Python Enhancement Proposal 的缩写，翻译过来就是 Python增强建议书 </p>
</blockquote>
<p>PEP8 是什么呢，简单说就是一种编码规范，是为了让代码“更好看”，更容易被阅读。</p>
<p>具体有这些规范，参考 <a href="https://www.python.org/dev/peps/pep-0008/" target="_blank" rel="external">PEP 8 – Style Guide for Python Code</a></p>
<p>For example</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Yes: <span class="keyword">import</span> os</div><div class="line">     <span class="keyword">import</span> sys</div><div class="line"></div><div class="line">No:  <span class="keyword">import</span> sys, os</div><div class="line"></div><div class="line"></div><div class="line">Yes:</div><div class="line">i = i + <span class="number">1</span></div><div class="line">submitted += <span class="number">1</span></div><div class="line">x = x*<span class="number">2</span> - <span class="number">1</span></div><div class="line">hypot2 = x*x + y*y</div><div class="line">c = (a+b) * (a-b)</div><div class="line"></div><div class="line"></div><div class="line">No:</div><div class="line">i=i+<span class="number">1</span></div><div class="line">submitted +=<span class="number">1</span></div><div class="line">x = x * <span class="number">2</span> - <span class="number">1</span></div><div class="line">hypot2 = x * x + y * y</div><div class="line">c = (a + b) * (a - b)</div></pre></td></tr></table></figure>
<p>对于初学者（例如我）来说，这些标准太多，在实际coding中可能很难记住所有的。之前招聘爬虫工程师，会PEP8也会加分，所以学习下PEP8还是有帮助的。</p>
<h1 id="Pycharm-设置"><a href="#Pycharm-设置" class="headerlink" title="Pycharm 设置"></a>Pycharm 设置</h1><p>PyCharm 配置 PEP 8 代码提示<br> 直接在右下角调整 Highlighting Level 为 Inspections 就能自动 PEP 8提示 (一般默认就是这个)</p>
<p><img src="https://i.imgur.com/OrCItzF.png" alt=""></p>
<p>For example</p>
<p><img src="https://i.imgur.com/qK1iZVM.png" alt=""></p>
<p>鼠标移到上方会提示： <code>PEP 8: expected 2 blank lines, found 1</code>，我们再增加一个空格就好了，你的代码中有任何不符合 PEP8 规范的地方都会有“<del>~</del>”提示</p>
<p><img src="https://i.imgur.com/kq4POwe.png" alt=""></p>
<p>这是一个困扰了我很久的问题，我一直不知道是哪里出了错，看英文也不懂，最后去Google才知道，创建字典的写法不规范，应该这样写：</p>
<p><code>item = dict()</code></p>
<h1 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h1><p>除了Pycharm，还有其他工具可以提示</p>
<ol>
<li>Google 开源的 Python 文件格式化工具：<a href="https://github.com/google/yapf" target="_blank" rel="external">github.com/google/yapf</a></li>
<li>pyflakes, pylint 等工具及各种编辑器的插件</li>
</ol>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>好吧，这里才是正文，正确的规范如下：</p>
<h2 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h2><ul>
<li>不要使用 tab 缩进</li>
<li>使用任何编辑器写 Python，请把一个 tab 展开为 4 个空格</li>
<li>绝对不要混用 tab 和空格，否则容易出现 <code>IndentationError</code></li>
</ul>
<h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><ul>
<li>在 list, dict, tuple, set, 参数列表的 , 后面加一个空格</li>
<li>在 dict 的 : 后面加一个空格</li>
<li>在注释符号 # 后面加一个空格，但是 <code>#!/usr/bin/python</code> 的 <code>#</code> 后不能有空格</li>
<li>操作符两端加一个空格，如 +, -, *, /, |, &amp;, =</li>
<li>接上一条，在参数列表里的 = 两端不需要空格</li>
<li>括号（(), {}, []）内的两端不需要空格</li>
</ul>
<h2 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h2><ul>
<li>function 和 class 顶上两个空行</li>
<li>class 的 method 之间一个空行</li>
<li>函数内逻辑无关的段落之间空一行，不要过度使用空行</li>
<li>不要把多个语句写在一行，然后用 ; 隔开</li>
<li><code>if/for/while</code> 语句中，即使执行语句只有一句，也要另起一行</li>
</ul>
<h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><ul>
<li>每一行代码控制在 80 字符以内</li>
<li>使用 \ 或 () 控制换行，举例：<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(first, second, third, fourth, fifth,</span></span></div><div class="line">        sixth, and_some_other_very_long_param):</div><div class="line">    user = User.objects.filter_by(first=first, second=second, third=third) \</div><div class="line">        .skip(<span class="number">100</span>).limit(<span class="number">100</span>) \</div><div class="line">        .all()</div><div class="line"></div><div class="line">text = (<span class="string">'Long strings can be made up '</span></div><div class="line">        <span class="string">'of several shorter strings.'</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><ul>
<li>使用有意义的，英文单词或词组，绝对不要使用汉语拼音</li>
<li>package/module 名中不要出现 -</li>
<li>各种类型的命名规范：</li>
</ul>
<p><img src="https://i.imgur.com/0sVNGR9.png" alt=""></p>
<h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><ul>
<li>所有 import 尽量放在文件开头，在 docstring 下面，其他变量定义的上面</li>
<li>不要使用 from foo imort *</li>
<li>import 需要分组，每组之间一个空行，每个分组内的顺序尽量采用字典序，分组顺序是：<ol>
<li>标准库</li>
<li>第三方库</li>
<li>本项目的 package 和 module</li>
</ol>
</li>
<li>不要使用隐式的相对导入（implicit relative imports），可是使用显示的相对导入（explicit relative imports），如 <code>from ..utils import parse</code>，最好使用全路径导入（absolute imports）</li>
<li>对于不同的 package，一个 import 单独一行，同一个 package/module 下的内容可以写一起：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bad</span></div><div class="line"><span class="keyword">import</span> sys, os, time</div><div class="line"></div><div class="line"><span class="comment"># good</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="comment"># ok</span></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, jsonify</div></pre></td></tr></table></figure>
<ul>
<li>为了避免可能出现的命名冲突，可以使用 as 或导入上一级命名空间</li>
<li>不要出现循环导入(cyclic import)</li>
</ul>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul>
<li>文档字符串 docstring, 是 package, module, class, method, function 级别的注释，可以通过 <strong>doc</strong> 成员访问到，注释内容在一对 “”” 符号之间</li>
<li>function, method 的文档字符串应当描述其功能、输入参数、返回值，如果有复杂的算法和实现，也需要写清楚</li>
<li>不要写错误的注释，不要无谓的注释</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bad 无谓的注释</span></div><div class="line">x = x + <span class="number">1</span>       <span class="comment"># increase x by 1</span></div><div class="line"></div><div class="line"><span class="comment"># bad 错误的注释</span></div><div class="line">x = x - <span class="number">1</span>       <span class="comment"># increase x by 1</span></div></pre></td></tr></table></figure>
<ul>
<li>优先使用英文写注释，英文不好全部写中文，否则更加看不懂</li>
</ul>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ul>
<li>不要轻易使用 try/except</li>
<li>except 后面需要指定捕捉的异常，裸露的 except 会捕捉所有异常，意味着会隐藏潜在的问题</li>
<li>可以有多个 except 语句，捕捉多种异常，分别做异常处理</li>
<li>使用 finally 子句来处理一些收尾操作</li>
<li><p>try/except 里的内容不要太多，只在可能抛出异常的地方使用，如：</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bad</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    user = User()</div><div class="line">    user.name = <span class="string">"leon"</span></div><div class="line">    user.age = int(age) <span class="comment"># 可能抛出异常</span></div><div class="line">    user.created_at = datetime.datetime.utcnow()</div><div class="line"></div><div class="line">    db.session.add(user)</div><div class="line">    db.session.commit() <span class="comment"># 可能抛出异常</span></div><div class="line"><span class="keyword">except</span>:</div><div class="line">    db.session.rollback()</div><div class="line"></div><div class="line"><span class="comment"># better</span></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    age = int(age)</div><div class="line"><span class="keyword">except</span> (TypeError, ValueError):</div><div class="line">    <span class="keyword">return</span> <span class="comment"># 或别的操作</span></div><div class="line"></div><div class="line">user = User()</div><div class="line">user.name = <span class="string">"leon"</span></div><div class="line">user.age = age</div><div class="line">user.created_at = datetime.datetime.utcnow()</div><div class="line">db.session.add(user)</div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    db.session.commit()</div><div class="line"><span class="keyword">except</span> sqlalchemy.exc.SQLAlchemyError: <span class="comment"># 或者更具体的异常</span></div><div class="line">    db.session.rollback()</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    db.session.close()</div></pre></td></tr></table></figure>
</li>
<li><p>从 <code>Exception</code> 而不是 <code>BaseException</code> 继承自定义的异常类</p>
</li>
</ul>
<h2 id="Class（类）"><a href="#Class（类）" class="headerlink" title="Class（类）"></a>Class（类）</h2><ul>
<li>显示的写明父类，如果不是继承自别的类，就继承自 object 类</li>
<li>使用 super 调用父类的方法</li>
<li>支持多继承，即同时有多个父类，建议使用 Mixin</li>
</ul>
<h2 id="编码建议"><a href="#编码建议" class="headerlink" title="编码建议"></a>编码建议</h2><hr>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul>
<li>使用字符串的 <code>join</code> 方法拼接字符串</li>
<li>使用字符串类型的方法，而不是 <code>string</code> 模块的方法</li>
<li>使用 <code>startswith</code> 和 <code>endswith</code> 方法比较前缀和后缀</li>
<li>使用 <code>format</code> 方法格式化字符串</li>
</ul>
<h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><ul>
<li>空的 list, str, tuple, set, dict 和 0, 0.0, None 都是 False</li>
<li>使用 if some_list 而不是 if len(some_list) 判断某个 list 是否为空，其他类型同理</li>
<li>使用 is 和 is not 与单例（如 None）进行比较，而不是用 == 和 !=</li>
<li>使用 if a is not None 而不是 if not a is None</li>
<li>用 isinstance 而不是 type 判断类型</li>
<li>不要用 == 和 != 与 True 和 False 比较（除非有特殊情况，如在 sqlalchemy 中可能用到）</li>
<li><p>使用 in 操作：</p>
<ol>
<li><p>用 key in dict 而不是 dict.has_key()</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># bad</span></div><div class="line"><span class="keyword">if</span> d.has_key(k):</div><div class="line">    do_something()</div><div class="line"></div><div class="line"><span class="comment"># good</span></div><div class="line"><span class="keyword">if</span> k <span class="keyword">in</span> d:</div><div class="line">    do_something()</div></pre></td></tr></table></figure>
<p>2.用 set 加速 “存在性” 检查，list 的查找是线性的，复杂度 O(n)，set 底层是 hash table, 复杂度 O(1)，但用 set 需要比 list 更多内存空间</p>
</li>
</ol>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>使用列表表达式（<a href="https://www.python.org/dev/peps/pep-0202/" target="_blank" rel="external">list comprehension</a>），字典表达式(<a href="https://www.python.org/dev/peps/pep-0274/" target="_blank" rel="external">dict comprehension</a>, Python 2.7+) 和生成器(generator)</li>
<li>dict 的 get 方法可以指定默认值，但有些时候应该用 [] 操作，使得可以抛出 KeyError</li>
<li>使用 for item in list 迭代 list, for index, item in enumerate(list) 迭代 list 并获取下标</li>
<li>使用内建函数 sorted 和 list.sort 进行排序</li>
<li>适量使用 map, reduce, filter 和 lambda，使用内建的 all, any 处理多个条件的判断</li>
<li>使用 defaultdict (Python 2.5+), Counter(Python 2.7+) 等 “冷门” 但好用的标准库算法和数据结构</li>
<li>使用装饰器(decorator)</li>
<li>使用 with 语句处理上下文</li>
<li>有些时候不要对类型做太过严格的限制，利用 Python 的鸭子类型（Duck Type）特性</li>
<li>使用 logging 记录日志，配置好格式和级别</li>
<li>了解 Python 的 Magic Method：<a href="https://github.com/RafeKettler/magicmethods" target="_blank" rel="external">A Guide to Python’s Magic Methods</a>, <a href="http://pycoders-weekly-chinese.readthedocs.io/en/latest/issue6/a-guide-to-pythons-magic-methods.html" target="_blank" rel="external">Python 魔术方法指南</a></li>
<li>阅读优秀的开源代码，如 <a href="https://github.com/pallets/flask" target="_blank" rel="external">Flask</a> 框架, <a href="https://github.com/requests/requests" target="_blank" rel="external">Requests for Humans</a></li>
<li>不要重复造轮子，查看标准库、PyPi、Github、Google 等使用现有的优秀的解决方案</li>
</ul>
<h1 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h1><p>写程序的好习惯在于理解、坚持，然后就是运用自如！</p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这是崔斯特的第三十一篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;学习下 Python增强建议书  (๑• . •๑)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/8HyHkph.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://zhangslob.github.io/categories/Python/"/>
    
    
      <category term="PEP8" scheme="https://zhangslob.github.io/tags/PEP8/"/>
    
      <category term="Pycharm" scheme="https://zhangslob.github.io/tags/Pycharm/"/>
    
  </entry>
  
  <entry>
    <title>学点算法之栈的学习与应用</title>
    <link href="https://zhangslob.github.io/2018/02/05/%E5%AD%A6%E7%82%B9%E7%AE%97%E6%B3%95%E4%B9%8B%E6%A0%88%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    <id>https://zhangslob.github.io/2018/02/05/学点算法之栈的学习与应用/</id>
    <published>2018-02-05T14:08:13.000Z</published>
    <updated>2018-02-05T14:12:58.317Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是崔斯特的第三十篇原创文章
</code></pre><p>在学习<code>栈</code>前，脑海中对这个词只有一个印象：<code>客栈</code> (๑• . •๑)</p>
<p><img src="https://i.imgur.com/eCC45z9.jpg" alt=""></p>
<a id="more"></a>
<h1 id="栈是什么"><a href="#栈是什么" class="headerlink" title="栈是什么"></a>栈是什么</h1><p>栈（有时称为“后进先出栈”）是一个项的有序集合，其中添加移除新项总发生在同一端。</p>
<p>这段话初学者是懵逼的，别急，往下看。</p>
<p>对栈的一般操作：</p>
<ul>
<li>Stack() 创建一个空的新栈。 它不需要参数，并返回一个空栈。</li>
<li>push(item)将一个新项添加到栈的顶部。它需要 item 做参数并不返回任何内容。</li>
<li>pop() 从栈中删除顶部项。它不需要参数并返回 item 。栈被修改。</li>
<li>peek() 从栈返回顶部项，但不会删除它。不需要参数。 不修改栈。</li>
<li>isEmpty() 测试栈是否为空。不需要参数，并返回布尔值。</li>
<li>size() 返回栈中的 item 数量。不需要参数，并返回一个整数。</li>
</ul>
<p>例如，s 是已经创建的空栈，下图展示了栈操作序列的结果。栈中，顶部项列在最右边。 </p>
<p><img src="https://i.imgur.com/J3KWYOO.png" alt=""></p>
<blockquote>
<p>自己在心里过一遍就很好理解了</p>
</blockquote>
<h1 id="Python实现栈"><a href="#Python实现栈" class="headerlink" title="Python实现栈"></a>Python实现栈</h1><p>其实看到上面那张图，就想起了Python中 <code>list</code> 的一些用法，append、pop等，下面是使用 Python 来实现栈，也非常简单：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>:</span></div><div class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">         self.items = []</div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span><span class="params">(self)</span>:</span></div><div class="line">         <span class="keyword">return</span> self.items == []</div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, item)</span>:</span></div><div class="line">         self.items.append(item)</div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></div><div class="line">         <span class="keyword">return</span> self.items.pop()</div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">def</span> <span class="title">peek</span><span class="params">(self)</span>:</span></div><div class="line">         <span class="keyword">return</span> self.items[len(self.items)<span class="number">-1</span>]</div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">def</span> <span class="title">size</span><span class="params">(self)</span>:</span></div><div class="line">         <span class="keyword">return</span> len(self.items)</div></pre></td></tr></table></figure>
<p><a href="https://github.com/bnmnetp/pythonds/blob/master/basic/stack.py" target="_blank" rel="external">pythonds/basic/stack.py</a></p>
<h1 id="栈的应用：简单括号匹配（一）"><a href="#栈的应用：简单括号匹配（一）" class="headerlink" title="栈的应用：简单括号匹配（一）"></a>栈的应用：简单括号匹配（一）</h1><p>有一些正确匹配的括号字符串：</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(()()()())</div><div class="line"></div><div class="line">(((())))</div><div class="line"></div><div class="line">(()((())()))</div></pre></td></tr></table></figure>
<p>对比那些不匹配的括号：<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">((((((())</div><div class="line"></div><div class="line">()))</div><div class="line"></div><div class="line">(()()(()</div></pre></td></tr></table></figure></p>
<p>具有挑战的是如何编写一个算法，能够从左到右读取一串符号，并决定符号是否平衡。</p>
<p>为了解决这个问题，我们需要做一个重要的观察。从左到右处理符号时，最近开始符号必须与下一个关闭符号相匹配。此外，处理的第一个开始符号必须等待直到其匹配最后一个符号。结束符号以相反的顺序匹配开始符号。他们从内到外匹配。这是一个可以用栈解决问题的线索。</p>
<p><img src="https://i.imgur.com/SLZpBJ8.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pythonds.basic.stack <span class="keyword">import</span> Stack</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">parChecker</span><span class="params">(symbolString)</span>:</span></div><div class="line">    s = Stack()</div><div class="line">    balanced = <span class="keyword">True</span></div><div class="line">    index = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> index &lt; len(symbolString) <span class="keyword">and</span> balanced:</div><div class="line">        symbol = symbolString[index]</div><div class="line">        <span class="keyword">if</span> symbol == <span class="string">"("</span>:</div><div class="line">            s.push(symbol)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> s.isEmpty():</div><div class="line">                balanced = <span class="keyword">False</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                s.pop()</div><div class="line"></div><div class="line">        index = index + <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> balanced <span class="keyword">and</span> s.isEmpty():</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">print(parChecker(<span class="string">'((()))'</span>))</div><div class="line">print(parChecker(<span class="string">'(()'</span>))</div></pre></td></tr></table></figure>
<p><em>output</em><br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="literal">True</span></div><div class="line"><span class="literal">False</span></div></pre></td></tr></table></figure></p>
<p>一旦你认为栈是保存括号的恰当的数据结构，算法是很直接的。</p>
<p>从空栈开始，从左到右处理括号字符串。如果一个符号是一个开始符号，将其作为一个信号，对应的结束符号稍后会出现。另一方面，如果符号是结束符号，弹出栈，只要弹出栈的开始符号可以匹配每个结束符号，则括号保持匹配状态。如果任何时候栈上没有出现符合开始符号的结束符号，则字符串不匹配。最后，当所有符号都被处理后，栈应该是空的。</p>
<p><img src="https://i.imgur.com/M2ZtP7O.png" alt=""></p>
<blockquote>
<p>如果有和我一样不能很好理解的，使用pycharm的debug模式，可以一步步来，看看程序就近在做什么。</p>
</blockquote>
<h1 id="括号配对问题（二）"><a href="#括号配对问题（二）" class="headerlink" title="括号配对问题（二）"></a>括号配对问题（二）</h1><p>来看看第二种匹配问题。Python程序里存在很多括号：如圆括号、方括号和花括号，每种括号都有开括号和闭括号。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">from</span> pythonds.basic.stack <span class="keyword">import</span> Stack</div><div class="line"></div><div class="line">pares = <span class="string">"()[]&#123;&#125;"</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pare_theses</span><span class="params">(text)</span>:</span></div><div class="line">        i, text_len = <span class="number">0</span>, len(text)</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">while</span> i &lt; text_len <span class="keyword">and</span> text[i] <span class="keyword">not</span> <span class="keyword">in</span> pares:</div><div class="line">                i += <span class="number">1</span></div><div class="line">            <span class="keyword">if</span> i &gt;= text_len:</div><div class="line">                <span class="keyword">return</span></div><div class="line">            <span class="keyword">yield</span> text[i], i</div><div class="line">            i += <span class="number">1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_pares</span><span class="params">(text)</span>:</span></div><div class="line">    open_pares = <span class="string">"([&#123;"</span></div><div class="line">    opposite = &#123;<span class="string">')'</span>: <span class="string">'('</span>, <span class="string">']'</span>: <span class="string">'['</span>, <span class="string">'&#125;'</span>: <span class="string">'&#123;'</span>&#125; <span class="comment"># 表示配对关系的字典</span></div><div class="line">    s = Stack()</div><div class="line">    <span class="keyword">for</span> pr, i <span class="keyword">in</span> pare_theses(text):</div><div class="line">        <span class="keyword">if</span> pr <span class="keyword">in</span> open_pares:  <span class="comment"># 开括号，压进栈并继续</span></div><div class="line">            s.push(pr)</div><div class="line">        <span class="keyword">elif</span> s.pop() != opposite[pr]:  <span class="comment"># 不匹配就是失败，退出</span></div><div class="line">            print(<span class="string">'Unmatching is found at'</span>, i, <span class="string">'for'</span>, pr)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">		<span class="comment"># else 是一次括号配对成功，什么也不做，继续</span></div><div class="line">    print(<span class="string">"All paretheses are correctly matched."</span>)</div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line">check_pares(<span class="string">'([]&#123;&#125;]'</span>)</div><div class="line">check_pares(<span class="string">'([]&#123;&#125;)'</span>)</div></pre></td></tr></table></figure>
<p><em>output</em></p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Unmatching <span class="keyword">is</span> found <span class="keyword">at</span> <span class="number">5</span> <span class="keyword">for</span> ]</div><div class="line"><span class="keyword">All</span> paretheses are correctly matched.</div></pre></td></tr></table></figure>
<p>生成器（回忆一下）：</p>
<ul>
<li>用 yield 语句产生结果</li>
<li>可以用在需要迭代器的地方</li>
<li>函数结束导致迭代结束</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://interactivepython.org/runestone/static/pythonds/BasicDS/TheStackAbstractDataType.html" target="_blank" rel="external">http://interactivepython.org/runestone/static/pythonds/BasicDS/TheStackAbstractDataType.html</a></li>
<li><a href="http://www.math.pku.edu.cn/teachers/qiuzy/ds_python/courseware/index.htm" target="_blank" rel="external">http://www.math.pku.edu.cn/teachers/qiuzy/ds_python/courseware/index.htm</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这是崔斯特的第三十篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在学习&lt;code&gt;栈&lt;/code&gt;前，脑海中对这个词只有一个印象：&lt;code&gt;客栈&lt;/code&gt; (๑• . •๑)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/eCC45z9.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://zhangslob.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://zhangslob.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="栈" scheme="https://zhangslob.github.io/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>为什么不推荐Selenium写爬虫</title>
    <link href="https://zhangslob.github.io/2018/02/02/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%8E%A8%E8%8D%90Selenium%E5%86%99%E7%88%AC%E8%99%AB/"/>
    <id>https://zhangslob.github.io/2018/02/02/为什么不推荐Selenium写爬虫/</id>
    <published>2018-02-02T12:35:02.000Z</published>
    <updated>2018-02-02T12:41:05.500Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是崔斯特的第二十九篇原创文章
</code></pre><p>如果可以使用 <code>Requests</code> 完成的，别用 <code>Selenium</code> (๑• . •๑)</p>
<p><img src="https://raw.githubusercontent.com/requests/requests/master/docs/_static/requests-logo-small.png" alt=""></p>
<a id="more"></a>
<p>最近在群里经常会看到有些朋友说，使用Selenium去采集网站，我看到其实内心是很难受的，哎！为什么要用Selenium呢？</p>
<p>我想说下自己的看法，欢迎各位大佬批评。</p>
<h1 id="观点"><a href="#观点" class="headerlink" title="观点"></a>观点</h1><p>如果可以使用 <code>Requests</code> 完成的，别用 <code>Selenium</code></p>
<h1 id="数据采集的顺序"><a href="#数据采集的顺序" class="headerlink" title="数据采集的顺序"></a>数据采集的顺序</h1><p>接到一个项目或者有一个采集需求时，第一步就是明确自己的需求。经常会遇到半路改需求的事情，真的很难受。</p>
<p>第二步就是去分析这个网站，这个在之前有提到过 <a href="https://zhangslob.github.io/2017/12/23/%E9%87%87%E9%9B%86%E6%96%B9%E6%A1%88%E7%AD%96%E7%95%A5%E4%B9%8BApp%E6%8A%93%E5%8C%85/">采集方案策略之App抓包</a>  :</p>
<blockquote>
<p>首先大的地方，我们想抓取某个数据源，我们要知道大概有哪些路径可以获取到数据源，基本上无外乎三种：<br>PC端网站<br>针对移动设备响应式设计的网站（也就是很多人说的H5, 虽然不一定是H5）；<br>移动App<br>原则是能抓移动App的，最好抓移动App，如果有针对移动设备优化的网站，就抓针对移动设备优化的网站，最后考虑PC网站。因为移动App基本都是API很简单，而移动设备访问优化的网站一般来讲都是结构简单清晰的HTML，而PC网站自然是最复杂的了；针对PC端网站和移动网站的做法一样，分析思路可以一起讲，移动App单独分析。</p>
</blockquote>
<p>这个时候可以借用 <code>postman</code> 来分析请求，参考 <a href="https://zhangslob.github.io/2018/01/31/%E6%88%96%E8%AE%B8%E4%BD%A0%E5%BA%94%E8%AF%A5%E5%AD%A6%E5%AD%A6-postman/">或许你应该学学 postman</a></p>
<p>然后下一步可能就是工程开始，各种配置，以及选择哪种采集方式，一般来说 Scrapy 是最好用、也是最常见的框架。当然你也可以使用 <code>requests + xpath</code> 或者 <code>Selenium</code> 。下面就我自己的看法来说说这三种采集方式。</p>
<h1 id="三种采集差异"><a href="#三种采集差异" class="headerlink" title="三种采集差异"></a>三种采集差异</h1><h2 id="Scrapy"><a href="#Scrapy" class="headerlink" title="Scrapy"></a>Scrapy</h2><p>在 <a href="https://scrapy.org/" target="_blank" rel="external">Scrapy 官网 </a> 上是这样写的：</p>
<blockquote>
<p>Scrapy | A Fast and Powerful Scraping and Web Crawling Framework</p>
</blockquote>
<p>关键词是 <code>Fast</code> 和 <code>Powerful</code>，使用过确实感觉如此。我感觉 <code>Scrapy</code> 就是一个全家桶，它把爬虫所需要的大部分东西（为什么不是全部，下面会说到）都集成到这个框架中，如：下载器、中间件、调度器、Spider、调试、数据流等等所有功能全部都在这一个框架中，你所需要做的只是在命令行中输入：<code>scrapy startproject yourproject</code></p>
<p>Scrapy 的缺点也是显而易见的：不支持分布式。scrapy中scheduler是运行在队列中的，而队列是在单机内存中的，服务器上爬虫是无法利用内存的队列做任何处理。但是也有解决办法，参见<a href="https://github.com/rmax/scrapy-redis" target="_blank" rel="external">rmax/scrapy-redis</a></p>
<h2 id="Requests"><a href="#Requests" class="headerlink" title="Requests"></a>Requests</h2><p>来看看 <a href="http://docs.python-requests.org/zh_CN/latest/" target="_blank" rel="external">Requests的文档</a></p>
<blockquote>
<p>Requests 唯一的一个非转基因的 Python HTTP 库，人类可以安全享用。</p>
<p>警告：非专业使用其他 HTTP 库会导致危险的副作用，包括：安全缺陷症、冗余代码症、重新发明轮子症、啃文档症、抑郁、头疼、甚至死亡。</p>
</blockquote>
<p>作者真幽默</p>
<p><a href="https://gist.github.com/kennethreitz/973705" target="_blank" rel="external">urllib2 VS requests</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"></div><div class="line">gh_url = <span class="string">'https://api.github.com'</span></div><div class="line"></div><div class="line">req = urllib2.Request(gh_url)</div><div class="line"></div><div class="line">password_manager = urllib2.HTTPPasswordMgrWithDefaultRealm()</div><div class="line">password_manager.add_password(<span class="keyword">None</span>, gh_url, <span class="string">'user'</span>, <span class="string">'pass'</span>)</div><div class="line"></div><div class="line">auth_manager = urllib2.HTTPBasicAuthHandler(password_manager)</div><div class="line">opener = urllib2.build_opener(auth_manager)</div><div class="line"></div><div class="line">urllib2.install_opener(opener)</div><div class="line"></div><div class="line">handler = urllib2.urlopen(req)</div><div class="line"></div><div class="line"><span class="keyword">print</span> handler.getcode()</div><div class="line"><span class="keyword">print</span> handler.headers.getheader(<span class="string">'content-type'</span>)</div><div class="line"></div><div class="line"><span class="comment"># ------</span></div><div class="line"><span class="comment"># 200</span></div><div class="line"><span class="comment"># 'application/json'</span></div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">r = requests.get(<span class="string">'https://api.github.com'</span>, auth=(<span class="string">'user'</span>, <span class="string">'pass'</span>))</div><div class="line"></div><div class="line"><span class="keyword">print</span> r.status_code</div><div class="line"><span class="keyword">print</span> r.headers[<span class="string">'content-type'</span>]</div><div class="line"></div><div class="line"><span class="comment"># ------</span></div><div class="line"><span class="comment"># 200</span></div><div class="line"><span class="comment"># 'application/json'</span></div></pre></td></tr></table></figure>
<p>简单对比发现 <code>requests</code> 的好用之处了，刚开始学习爬虫的时候也是从 <code>urllib</code> 开始，当看到 <code>requests</code> 果断抛弃，就像看到 <code>xpath</code> 抛弃 <code>bs4</code> 一样</p>
<p><img src="https://i.imgur.com/QwKXgfH.jpg" alt=""></p>
<p>所以如果你是初学者，那么请毫不犹豫的选择 <code>requests</code> </p>
<h2 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h2><p>最后来到今天的主角 <a href="http://www.seleniumhq.org/" target="_blank" rel="external">Selenium</a>， 首先看看官方怎么说</p>
<blockquote>
<p>What is Selenium?<br>Selenium automates browsers. That’s it! What you do with that power is entirely up to you. Primarily, it is for automating web applications for testing purposes, but is certainly not limited to just that. Boring web-based administration tasks can (and should!) be automated as well.</p>
<p>Selenium has the support of some of the largest browser vendors who have taken (or are taking) steps to make Selenium a native part of their browser. It is also the core technology in countless other browser automation tools, APIs and frameworks.</p>
</blockquote>
<p>重点是：<code>it is for automating web applications for testing purposes, but is certainly not limited to just that</code>，翻译过来就是：<strong>它是用于自动化Web应用程序的测试目的，但肯定不仅限于此</strong>，简单来说，Selenium 是web自动化测试工具集，如果你去Google上搜索 Selenium ，大多结果都是 <code>利用Selenium 自动化web 测试</code>相关内容，比较出名的有<a href="http://www.cnblogs.com/fnng/category/349036.html" target="_blank" rel="external">博客园的虫师</a>，写的两本书也都是关于自动化测试方面的</p>
<p><img src="https://i.imgur.com/6D1Plgm.png" alt=""></p>
<p>至于为啥爬虫要用selenium，我在某些博客上找到有人这样说，我也不知道怎么说</p>
<blockquote>
<p>　对于一般网站来说scrapy、requests、beautifulsoup等都可以爬取，但是有些信息需要执行js才能显现，而且你肉眼所能看到的基本都能爬取下来，在学习中遇到了，就记录下来方便以后查看。</p>
<p>webdrive是selenium中一个函数：</p>
<p>from selenium import webdriver<br>driver = webdriver.Chrome()<br>driver.get(‘网址’)</p>
<p>其中PhantomJS同时可以换成Chrome、Firefox、Ie等等，但是PhantomJS是一个无头的浏览器，运行是不会跳出相应的浏览器，运行相对效率较高。在调试中可以先换成Chrome，方便调试，最后再换成PhantomJS即可。</p>
</blockquote>
<p>下面是吐槽时间，说一说 <code>Selenium</code> 的缺点：</p>
<ol>
<li><strong>速度慢</strong>。每次运行爬虫都打开一个浏览器，如果没有设置，还会加载图片、JS等等一大堆东西；</li>
<li><strong>占用资源太多</strong>。有人说，把<code>Chrome</code>换成无头浏览器<code>PhantomJS</code>，原理都是一样的，都是打开浏览器，而且很多网站会验证参数，如果对方看到你是以<code>PhantomJS</code>去访问，会BAN掉你的请求，然后你又要考虑更换请求头的事情，事情复杂程度不知道多了多少，为啥学Python？因为Python简单啊，如果有更快、更简单的库可以实现同样的功能，为什么不去使用呢？</li>
<li><strong>对网络的要求会更高</strong>。 <code>Selenium</code> 加载了很多可能对您没有价值的补充文件（如css，js和图像文件）。 与仅仅请求您真正需要的资源（使用单独的HTTP请求）相比，这可能会产生更多的流量。</li>
<li><strong>爬取规模不能太大</strong>。你有看到哪家公司用<code>Selenium</code>作为生产环境吗？</li>
<li><strong>难</strong>。学习<code>Selenium</code>的成本太高，只有我一个人觉得<code>Selenium</code>比<code>Requests</code>难一百倍吗？</li>
</ol>
<p>我能想到的就这么多了，欢迎各位大佬补充。所以，如果可以使用 <code>Requests</code> 完成的，别用 <code>Selenium</code>，OK，洗脑完成。</p>
<p>之前面试爬虫工程师有一题就是：如何处理网站的登录系统？ A.浏览器模拟   B.HTTP请求</p>
<p>如果你想做测试工程师，那肯定需要学会 <code>Selenium</code>，公司一个妹子就是测试，现在学了 <code>Selenium</code>，工作轻松了好多。</p>
<p>最后，无耻的来个广告，本公司招聘爬虫工程师，希望和你成为队友!</p>
<p><img src="https://i.imgur.com/LyndQTt.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这是崔斯特的第二十九篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果可以使用 &lt;code&gt;Requests&lt;/code&gt; 完成的，别用 &lt;code&gt;Selenium&lt;/code&gt; (๑• . •๑)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/requests/requests/master/docs/_static/requests-logo-small.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://zhangslob.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://zhangslob.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Selenium" scheme="https://zhangslob.github.io/tags/Selenium/"/>
    
  </entry>
  
  <entry>
    <title>或许你应该学学 postman</title>
    <link href="https://zhangslob.github.io/2018/01/31/%E6%88%96%E8%AE%B8%E4%BD%A0%E5%BA%94%E8%AF%A5%E5%AD%A6%E5%AD%A6-postman/"/>
    <id>https://zhangslob.github.io/2018/01/31/或许你应该学学-postman/</id>
    <published>2018-01-31T14:59:36.000Z</published>
    <updated>2018-01-31T15:42:34.859Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是崔斯特的第二十八篇原创文章
</code></pre><p>简单模拟请求的工具 (๑• . •๑)</p>
<p><img src="https://i.imgur.com/7BTDQgq.png" alt=""></p>
<a id="more"></a>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>最简单的方法就是直接在浏览器中复制 <code>Copy as cURL</code> ，然后把数据导入 postman，然后 <code>send</code> ，收工。</p>
<p>我们这里拿 <a href="https://www.zhihu.com/" target="_blank" rel="external">知乎首页</a> 举例</p>
<p><img src="https://i.imgur.com/ZLG75Wm.png" alt=""></p>
<blockquote>
<p>在对应的请求下复制 cURL</p>
</blockquote>
<p>打开 postman ， 点击左上角的 <code>Import</code> ， 选择<code>Paste Raw Text</code> ，最后 <code>Import</code>，点击 <code>send</code>发送请求</p>
<p><img src="https://i.imgur.com/EzUmrVP.png" alt=""></p>
<p>发送请求之后就可以查看了，如下图，标箭头的地方可以打开看更多。比如可以预览web界面，查看 <code>Headers</code> 信息，查看状态，复制代码。</p>
<p><img src="https://i.imgur.com/QbUhi6y.png" alt=""></p>
<p>同时可以打开 <code>Headers</code> ，用来调试，哪些是需要的，哪些不需要</p>
<p><img src="https://i.imgur.com/cJSncW7.png" alt=""></p>
<p>最方便的一点是，可以直接生成对应的编程语言，并复制，例如Python的requests方法：</p>
<p><img src="https://i.imgur.com/LCxVJMe.png" alt=""></p>
<p>好了，到这里 postman 的简单功能就说完了，他的全部功能当然不止这一点，更多的就去看 <a href="https://www.getpostman.com/docs/" target="_blank" rel="external">文档啦</a></p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在我的使用过程中，发现了 postman 的一些问题，如：导入错误，参数错误，请求失误。</p>
<h2 id="导入错误"><a href="#导入错误" class="headerlink" title="导入错误"></a>导入错误</h2><p>例如知乎这个例子，如果我们复制的是 <code>Copy as cURL (cmd)</code> ，可能你会遇到下面的错误</p>
<p><img src="https://i.imgur.com/dCZ5PAy.png" alt=""></p>
<p>这个时候选用 <code>Copy as cURL (bush)</code> 就好了，具体原因是啥，我也不清楚。我在这里找到了别人的描述</p>
<blockquote>
<p>There is no difference between the two cURL command because there is a difference between ” and ‘.</p>
</blockquote>
<p>Refer : <a href="http://technote.thispage.me/index.php/2016/12/23/use-curl-to-get-the-same-results-as-a-web-browser/" target="_blank" rel="external">Use cURL to get the same results as a web browser</a></p>
<h2 id="参数错误"><a href="#参数错误" class="headerlink" title="参数错误"></a>参数错误</h2><p>举个例子，今天在帮朋友查看 <a href="https://www.crunchbase.com/organization/500-startups/investments/investments_list" target="_blank" rel="external">这个网站</a> 的翻页，复制用postman打开， copy cURL 内容是</p>
<figure class="highlight parser3"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="xml">curl "https://www.crunchbase.com/v4/data/entities/organizations/</span><span class="number">56e40</span><span class="xml">f50</span><span class="number">-97</span><span class="xml">c7</span><span class="number">-2</span><span class="xml">a77</span><span class="number">-255</span><span class="xml">d</span><span class="number">-1</span><span class="xml">d97d5f30646/overrides?field_ids=^%</span><span class="keyword">^5B</span><span class="xml">^%</span><span class="keyword">^22identifier</span><span class="xml">^%</span><span class="keyword">^22</span><span class="xml">,^%</span><span class="keyword">^22layout_id</span><span class="xml">^%</span><span class="keyword">^22</span><span class="xml">,^%</span><span class="keyword">^22facet_ids</span><span class="xml">^%</span><span class="keyword">^22</span><span class="xml">,^%</span><span class="keyword">^22title</span><span class="xml">^%</span><span class="keyword">^22</span><span class="xml">,^%</span><span class="keyword">^22short_description</span><span class="xml">^%</span><span class="keyword">^22</span><span class="xml">,^%</span><span class="keyword">^22is_locked</span><span class="xml">^%</span><span class="keyword">^22</span><span class="xml">^%</span><span class="keyword">^5D</span><span class="xml">^&amp;card_ids=^%</span><span class="keyword">^5B</span><span class="xml">^%</span><span class="keyword">^22investments_list</span><span class="xml">^%</span><span class="keyword">^22</span><span class="xml">^%</span><span class="keyword">^5D</span><span class="xml">" -H "cookie: _ga=GA1</span><span class="number">.2</span><span class="xml"></span><span class="number">.35962729</span><span class="xml"></span><span class="number">.1517412509</span><span class="xml">; _gid=GA1</span><span class="number">.2</span><span class="xml"></span><span class="number">.2072770006</span><span class="xml"></span><span class="number">.1517412509</span><span class="xml">; _vdl=</span><span class="number">1</span><span class="xml">; _hp2_ses_props</span><span class="number">.973801186</span><span class="xml">=^%</span><span class="keyword">^7B</span><span class="xml">^%</span><span class="keyword">^22ts</span><span class="xml">^%</span><span class="keyword">^22</span><span class="xml">^%</span><span class="keyword">^3A1517412512548</span><span class="xml">^%</span><span class="keyword">^2C</span><span class="xml">^%</span><span class="keyword">^22d</span><span class="xml">^%</span><span class="keyword">^22</span><span class="xml">^%</span><span class="keyword">^3A</span><span class="xml">^%</span><span class="keyword">^22www.crunchbase.com</span><span class="xml">^%</span><span class="keyword">^22</span><span class="xml">^%</span><span class="keyword">^2C</span><span class="xml">^%</span><span class="keyword">^22h</span><span class="xml">^%</span><span class="keyword">^22</span><span class="xml">^%</span><span class="keyword">^3A</span><span class="xml">^%</span><span class="keyword">^22</span><span class="xml">^%</span><span class="keyword">^2Fsearch</span><span class="xml">^%</span><span class="keyword">^2Fprincipal.investors</span><span class="xml">^%</span><span class="keyword">^22</span><span class="xml">^%</span><span class="keyword">^7D</span><span class="xml">; __qca=P0</span><span class="number">-1969245879</span><span class="xml"></span><span class="number">-1517412512628</span><span class="xml">; D_IID=</span><span class="number">1</span><span class="xml">B7344D2</span><span class="number">-1</span><span class="xml">C8F</span><span class="number">-3327</span><span class="xml"></span><span class="number">-8607</span><span class="xml">-D786306444AE; D_UID=</span><span class="number">208</span><span class="xml">F925B</span><span class="number">-3</span><span class="xml">D1C</span><span class="number">-3491</span><span class="xml">-A532-C82375EE187D; D_ZID=</span><span class="number">497</span><span class="xml">DB63C</span><span class="number">-5101</span><span class="xml"></span><span class="number">-3</span><span class="xml">F49-BE35</span><span class="number">-1752</span><span class="xml">A80F8DDA; D_ZUID=D89FCBAA-BF79</span><span class="number">-340</span><span class="xml">C-BF55-B860768D0993; D_HID=</span><span class="number">57</span><span class="xml">B19D5F</span><span class="number">-5069</span><span class="xml"></span><span class="number">-3</span><span class="xml">A82</span><span class="number">-94</span><span class="xml">CB-D42821D1CD10; D_SID=</span><span class="number">123.120</span><span class="xml"></span><span class="number">.141</span><span class="xml"></span><span class="number">.63</span><span class="xml">:bXaeU41PWi5vyYIflFmiShQiK1qwq/nC4G9IljWo+</span><span class="number">6</span><span class="xml">A; AMCVS_6B25357E519160E40A490D44^%</span><span class="keyword">^40AdobeOrg</span><span class="xml">=</span><span class="number">1</span><span class="xml">; wcsid=KZbgLoopx4WnyMOW3F6pZ0H92JEzMrBd; hblid=cfw6lOKzm4FpCUou3F6pZ0H92JE6rBWB; s_cc=true; AMCV_6B25357E519160E40A490D44^%</span><span class="keyword">^40AdobeOrg</span><span class="xml">=</span><span class="number">1099438348</span><span class="xml">^%</span><span class="keyword">^7CMCMID</span><span class="xml">^%</span><span class="keyword">^7C05859477990281579603868663655860142263</span><span class="xml">^%</span><span class="keyword">^7CMCAAMLH-1518017313</span><span class="xml">^%</span><span class="keyword">^7C11</span><span class="xml">^%</span><span class="keyword">^7CMCAAMB-1518017313</span><span class="xml">^%</span><span class="keyword">^7CRKhpRz8krg2tLO6pguXWp5olkAcUniQYPHaMWWgdJ3xzPWQmdj0y</span><span class="xml">^%</span><span class="keyword">^7CMCOPTOUT-1517419713s</span><span class="xml">^%</span><span class="keyword">^7CNONE</span><span class="xml">^%</span><span class="keyword">^7CMCAID</span><span class="xml">^%</span><span class="keyword">^7CNONE</span><span class="xml">^%</span><span class="keyword">^7CMCSYNCSOP</span><span class="xml">^%</span><span class="keyword">^7C411-17570</span><span class="xml">^%</span><span class="keyword">^7CvVersion</span><span class="xml">^%</span><span class="keyword">^7C2.1.0</span><span class="xml">; _okdetect=^%</span><span class="keyword">^7B</span><span class="xml">^%</span><span class="keyword">^22token</span><span class="xml">^%</span><span class="keyword">^22</span><span class="xml">^%</span><span class="keyword">^3A</span><span class="xml">^%</span><span class="keyword">^2215174125149410</span><span class="xml">^%</span><span class="keyword">^22</span><span class="xml">^%</span><span class="keyword">^2C</span><span class="xml">^%</span><span class="keyword">^22proto</span><span class="xml">^%</span><span class="keyword">^22</span><span class="xml">^%</span><span class="keyword">^3A</span><span class="xml">^%</span><span class="keyword">^22https</span><span class="xml">^%</span><span class="keyword">^3A</span><span class="xml">^%</span><span class="keyword">^22</span><span class="xml">^%</span><span class="keyword">^2C</span><span class="xml">^%</span><span class="keyword">^22host</span><span class="xml">^%</span><span class="keyword">^22</span><span class="xml">^%</span><span class="keyword">^3A</span><span class="xml">^%</span><span class="keyword">^22www.crunchbase.com</span><span class="xml">^%</span><span class="keyword">^22</span><span class="xml">^%</span><span class="keyword">^7D</span><span class="xml">; olfsk=olfsk8562990481377502; _okbk=cd4^%</span><span class="keyword">^3Dtrue</span><span class="xml">^%</span><span class="keyword">^2Cvi5</span><span class="xml">^%</span><span class="keyword">^3D0</span><span class="xml">^%</span><span class="keyword">^2Cvi4</span><span class="xml">^%</span><span class="keyword">^3D1517412515909</span><span class="xml">^%</span><span class="keyword">^2Cvi3</span><span class="xml">^%</span><span class="keyword">^3Dactive</span><span class="xml">^%</span><span class="keyword">^2Cvi2</span><span class="xml">^%</span><span class="keyword">^3Dfalse</span><span class="xml">^%</span><span class="keyword">^2Cvi1</span><span class="xml">^%</span><span class="keyword">^3Dfalse</span><span class="xml">^%</span><span class="keyword">^2Ccd8</span><span class="xml">^%</span><span class="keyword">^3Dchat</span><span class="xml">^%</span><span class="keyword">^2Ccd6</span><span class="xml">^%</span><span class="keyword">^3D0</span><span class="xml">^%</span><span class="keyword">^2Ccd5</span><span class="xml">^%</span><span class="keyword">^3Daway</span><span class="xml">^%</span><span class="keyword">^2Ccd3</span><span class="xml">^%</span><span class="keyword">^3Dfalse</span><span class="xml">^%</span><span class="keyword">^2Ccd2</span><span class="xml">^%</span><span class="keyword">^3D0</span><span class="xml">^%</span><span class="keyword">^2Ccd1</span><span class="xml">^%</span><span class="keyword">^3D0</span><span class="xml">^%</span><span class="keyword">^2C</span><span class="xml">; _ok=</span><span class="number">1554</span><span class="xml"></span><span class="number">-355</span><span class="xml"></span><span class="number">-10</span><span class="xml"></span><span class="number">-6773</span><span class="xml">; _hp2_props</span><span class="number">.973801186</span><span class="xml">=^%</span><span class="keyword">^7B</span><span class="xml">^%</span><span class="keyword">^22Logged</span><span class="xml">^%</span><span class="keyword">^20In</span><span class="xml">^%</span><span class="keyword">^22</span><span class="xml">^%</span><span class="keyword">^3Afalse</span><span class="xml">^%</span><span class="keyword">^2C</span><span class="xml">^%</span><span class="keyword">^22Pro</span><span class="xml">^%</span><span class="keyword">^22</span><span class="xml">^%</span><span class="keyword">^3Afalse</span><span class="xml">^%</span><span class="keyword">^7D</span><span class="xml">; _hp2_id</span><span class="number">.973801186</span><span class="xml">=^%</span><span class="keyword">^7B</span><span class="xml">^%</span><span class="keyword">^22userId</span><span class="xml">^%</span><span class="keyword">^22</span><span class="xml">^%</span><span class="keyword">^3A</span><span class="xml">^%</span><span class="keyword">^228805156096536097</span><span class="xml">^%</span><span class="keyword">^22</span><span class="xml">^%</span><span class="keyword">^2C</span><span class="xml">^%</span><span class="keyword">^22pageviewId</span><span class="xml">^%</span><span class="keyword">^22</span><span class="xml">^%</span><span class="keyword">^3A</span><span class="xml">^%</span><span class="keyword">^221700148784936413</span><span class="xml">^%</span><span class="keyword">^22</span><span class="xml">^%</span><span class="keyword">^2C</span><span class="xml">^%</span><span class="keyword">^22sessionId</span><span class="xml">^%</span><span class="keyword">^22</span><span class="xml">^%</span><span class="keyword">^3A</span><span class="xml">^%</span><span class="keyword">^225929107734453151</span><span class="xml">^%</span><span class="keyword">^22</span><span class="xml">^%</span><span class="keyword">^2C</span><span class="xml">^%</span><span class="keyword">^22identity</span><span class="xml">^%</span><span class="keyword">^22</span><span class="xml">^%</span><span class="keyword">^3Anull</span><span class="xml">^%</span><span class="keyword">^2C</span><span class="xml">^%</span><span class="keyword">^22trackerVersion</span><span class="xml">^%</span><span class="keyword">^22</span><span class="xml">^%</span><span class="keyword">^3A</span><span class="xml">^%</span><span class="keyword">^223.0</span><span class="xml">^%</span><span class="keyword">^22</span><span class="xml">^%</span><span class="keyword">^7D</span><span class="xml">; _oklv=</span><span class="number">1517412548852</span><span class="xml">^%</span><span class="keyword">^2CKZbgLoopx4WnyMOW3F6pZ0H92JEzMrBd</span><span class="xml">; s_pers=^%</span><span class="keyword">^20s_nrgvo</span><span class="xml">^%</span><span class="keyword">^3DNew</span><span class="xml">^%</span><span class="keyword">^7C1580484574965</span><span class="xml">^%</span><span class="keyword">^3B</span><span class="xml">" -H "origin: https://www.crunchbase.com" -H "accept-encoding: gzip, deflate, br" -H "x-distil-ajax: dfdvfavtsysazfberrtudvwabwe" -H "user-agent: Mozilla/</span><span class="number">5.0</span><span class="xml"> (Windows NT </span><span class="number">6.1</span><span class="xml">; Win64; x64) AppleWebKit/</span><span class="number">537.36</span><span class="xml"> (KHTML, like Gecko) Chrome/</span><span class="number">63.0</span><span class="xml"></span><span class="number">.3239</span><span class="xml"></span><span class="number">.84</span><span class="xml"> Safari/</span><span class="number">537.36</span><span class="xml">" -H "content-type: application/json" -H "accept-language: zh-CN,zh;q=</span><span class="number">0.9</span><span class="xml">,en;q=</span><span class="number">0.8</span><span class="xml">" -H "accept: application/json, text/plain, */*" -H "referer: https://www.crunchbase.com/organization/</span><span class="number">500</span><span class="xml">-startups/investments/investments_list" -H "authority: www.crunchbase.com" -H "x-requested-with: XMLHttpRequest" --data-binary ^"^&#123;^</span></div><div class="line"></div><div class="line">  ^\^"card_lookups^\^": ^[^</div><div class="line"></div><div class="line">    ^&#123;^</div><div class="line"></div><div class="line">      ^\^"card_id^\^": ^\^"investments_list^\^",^</div><div class="line"></div><div class="line">      ^\^"limit^\^": <span class="number">100</span><span class="xml">,^</span></div><div class="line"></div><div class="line">      ^\^"after_id^\^": ^\^"<span class="number">07</span><span class="xml">a9c686</span><span class="number">-4590</span><span class="xml">-fa0f</span><span class="number">-3</span><span class="xml">ac4-fc7b898c0b7a^\^"^</span></div><div class="line"></div><div class="line">    ^&#125;^</div><div class="line"></div><div class="line">  ^]^</div><div class="line"></div><div class="line">^&#125;^" --compressed</div></pre></td></tr></table></figure>
<p>导入之后，<code>send</code>，返回 400 错误。</p>
<p>postman 转义的code是：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">url = <span class="string">"https://www.crunchbase.com/v4/data/entities/organizations/56e40f50-97c7-2a77-255d-1d97d5f30646/overrides"</span></div><div class="line"></div><div class="line">querystring = &#123;<span class="string">"field_ids"</span>:<span class="string">"^%^5B^%^22identifier^%^22,^%^22layout_id^%^22,^%^22facet_ids^%^22,^%^22title^%^22,^%^22short_description^%^22,^%^22is_locked^%^22^%^5D^"</span>,<span class="string">"card_ids"</span>:<span class="string">"^%^5B^%^22investments_list^%^22^%^5D"</span>&#125;</div><div class="line"></div><div class="line">payload = <span class="string">"^^&#123;^\n\n  ^\\^card_lookups^^: ^[^\n\n    ^&#123;^\n\n      ^\\^card_id^^: ^\\^investments_list^^,^\n\n      ^\\^limit^^: 100,^\n\n      ^\\^after_id^^: ^\\^07a9c686-4590-fa0f-3ac4-fc7b898c0b7a^^^\n\n    ^&#125;^\n\n  ^]^\n\n^&#125;^"</span></div><div class="line">headers = &#123;</div><div class="line">    <span class="string">'cookie'</span>: <span class="string">"_ga=GA1.2.35962729.1517412509; _gid=GA1.2.2072770006.1517412509; _vdl=1; _hp2_ses_props.973801186=^%^7B^%^22ts^%^22^%^3A1517412512548^%^2C^%^22d^%^22^%^3A^%^22www.crunchbase.com^%^22^%^2C^%^22h^%^22^%^3A^%^22^%^2Fsearch^%^2Fprincipal.investors^%^22^%^7D; __qca=P0-1969245879-1517412512628; D_IID=1B7344D2-1C8F-3327-8607-D786306444AE; D_UID=208F925B-3D1C-3491-A532-C82375EE187D; D_ZID=497DB63C-5101-3F49-BE35-1752A80F8DDA; D_ZUID=D89FCBAA-BF79-340C-BF55-B860768D0993; D_HID=57B19D5F-5069-3A82-94CB-D42821D1CD10; D_SID=123.120.141.63:bXaeU41PWi5vyYIflFmiShQiK1qwq/nC4G9IljWo+6A; AMCVS_6B25357E519160E40A490D44^%^40AdobeOrg=1; wcsid=KZbgLoopx4WnyMOW3F6pZ0H92JEzMrBd; hblid=cfw6lOKzm4FpCUou3F6pZ0H92JE6rBWB; s_cc=true; AMCV_6B25357E519160E40A490D44^%^40AdobeOrg=1099438348^%^7CMCMID^%^7C05859477990281579603868663655860142263^%^7CMCAAMLH-1518017313^%^7C11^%^7CMCAAMB-1518017313^%^7CRKhpRz8krg2tLO6pguXWp5olkAcUniQYPHaMWWgdJ3xzPWQmdj0y^%^7CMCOPTOUT-1517419713s^%^7CNONE^%^7CMCAID^%^7CNONE^%^7CMCSYNCSOP^%^7C411-17570^%^7CvVersion^%^7C2.1.0; _okdetect=^%^7B^%^22token^%^22^%^3A^%^2215174125149410^%^22^%^2C^%^22proto^%^22^%^3A^%^22https^%^3A^%^22^%^2C^%^22host^%^22^%^3A^%^22www.crunchbase.com^%^22^%^7D; olfsk=olfsk8562990481377502; _okbk=cd4^%^3Dtrue^%^2Cvi5^%^3D0^%^2Cvi4^%^3D1517412515909^%^2Cvi3^%^3Dactive^%^2Cvi2^%^3Dfalse^%^2Cvi1^%^3Dfalse^%^2Ccd8^%^3Dchat^%^2Ccd6^%^3D0^%^2Ccd5^%^3Daway^%^2Ccd3^%^3Dfalse^%^2Ccd2^%^3D0^%^2Ccd1^%^3D0^%^2C; _ok=1554-355-10-6773; _hp2_props.973801186=^%^7B^%^22Logged^%^20In^%^22^%^3Afalse^%^2C^%^22Pro^%^22^%^3Afalse^%^7D; _hp2_id.973801186=^%^7B^%^22userId^%^22^%^3A^%^228805156096536097^%^22^%^2C^%^22pageviewId^%^22^%^3A^%^221700148784936413^%^22^%^2C^%^22sessionId^%^22^%^3A^%^225929107734453151^%^22^%^2C^%^22identity^%^22^%^3Anull^%^2C^%^22trackerVersion^%^22^%^3A^%^223.0^%^22^%^7D; _oklv=1517412548852^%^2CKZbgLoopx4WnyMOW3F6pZ0H92JEzMrBd; s_pers=^%^20s_nrgvo^%^3DNew^%^7C1580484574965^%^3B"</span>,</div><div class="line">    <span class="string">'origin'</span>: <span class="string">"https://www.crunchbase.com"</span>,</div><div class="line">    <span class="string">'accept-encoding'</span>: <span class="string">"gzip, deflate, br"</span>,</div><div class="line">    <span class="string">'x-distil-ajax'</span>: <span class="string">"dfdvfavtsysazfberrtudvwabwe"</span>,</div><div class="line">    <span class="string">'user-agent'</span>: <span class="string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36"</span>,</div><div class="line">    <span class="string">'content-type'</span>: <span class="string">"application/json"</span>,</div><div class="line">    <span class="string">'accept-language'</span>: <span class="string">"zh-CN,zh;q=0.9,en;q=0.8"</span>,</div><div class="line">    <span class="string">'accept'</span>: <span class="string">"application/json, text/plain, */*"</span>,</div><div class="line">    <span class="string">'referer'</span>: <span class="string">"https://www.crunchbase.com/organization/500-startups/investments/investments_list"</span>,</div><div class="line">    <span class="string">'authority'</span>: <span class="string">"www.crunchbase.com"</span>,</div><div class="line">    <span class="string">'x-requested-with'</span>: <span class="string">"XMLHttpRequest"</span>,</div><div class="line">    <span class="string">'cache-control'</span>: <span class="string">"no-cache"</span>,</div><div class="line">    <span class="string">'postman-token'</span>: <span class="string">"1df3b2b6-b682-edf7-4804-572ac5a03420"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">response = requests.request(<span class="string">"POST"</span>, url, data=payload, headers=headers, params=querystring)</div><div class="line"></div><div class="line">print(response.text)</div></pre></td></tr></table></figure>
<p>可以看到 加入了大量的 <code>^</code> 符号，这个在Python中是运算符<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">^	按位异或运算符：当两对应的二进位相异时，结果为<span class="number">1</span>	(a ^ b) 输出结果 <span class="number">49</span> ，二进制解释： <span class="number">0011</span> <span class="number">0001</span></div></pre></td></tr></table></figure></p>
<p>这也是 postman 的一个问题</p>
<h2 id="请求失误"><a href="#请求失误" class="headerlink" title="请求失误"></a>请求失误</h2><p>这个问题，我也不是很懂，有的请求 postman 返回错误，但是复制代码到 Python 环境中运行是可以获得数据的，所以最好是多次验证。</p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这是崔斯特的第二十八篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;简单模拟请求的工具 (๑• . •๑)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/7BTDQgq.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://zhangslob.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://zhangslob.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="postman" scheme="https://zhangslob.github.io/tags/postman/"/>
    
  </entry>
  
  <entry>
    <title>有了她，谁敢阻止我学习</title>
    <link href="https://zhangslob.github.io/2018/01/30/%E6%9C%89%E4%BA%86%E5%A5%B9%EF%BC%8C%E8%B0%81%E6%95%A2%E9%98%BB%E6%AD%A2%E6%88%91%E5%AD%A6%E4%B9%A0/"/>
    <id>https://zhangslob.github.io/2018/01/30/有了她，谁敢阻止我学习/</id>
    <published>2018-01-30T13:31:40.000Z</published>
    <updated>2018-01-30T13:44:02.289Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是崔斯特的第二十七篇原创文章
</code></pre><p>我爱学习 (๑• . •๑)</p>
<p><img src="https://i.imgur.com/Y5AMeSm.jpg" alt=""></p>
<a id="more"></a>
<h1 id="公众号"><a href="#公众号" class="headerlink" title="公众号"></a>公众号</h1><p><strong>Python爱好者社区，微信号：python_shequ</strong></p>
<p>人生苦短，我用Python。分享Python相关的技术文章、工具资源、精选课程、视频教程、热点资讯、学习资料等。每天自动更新和推送。</p>
<p><strong>Python爬虫分享，微信号：python_shequ</strong></p>
<p>知乎专栏“爬虫从入门到放弃”作者。目前在知乎连载爬虫从入门到放弃到精通系列文章</p>
<p><strong>张俊红，微信号：zhangjunhong0428</strong></p>
<p>中国统计网专栏作者，数据分析路上的学习者与实践者，与你分享我的所见、所学、所想。</p>
<p><strong>数据小魔方，微信号：datamofang</strong></p>
<p>专注于数据可视化及商务智能的原创技能分享平台！</p>
<p><strong>Python爬虫与算法进阶，微信号：zhangslob</strong></p>
<p>分享Python知识，关注爬虫与算法,让我们一起从萌新变成大牛吧!</p>
<h1 id="在线书籍"><a href="#在线书籍" class="headerlink" title="在线书籍"></a>在线书籍</h1><ol>
<li><a href="https://github.com/taizilongxu/interview_python" target="_blank" rel="external">关于Python的面试题</a></li>
<li><a href="https://www.readwithu.com/" target="_blank" rel="external">草根学Python</a></li>
<li><a href="https://xidianwlc.gitbooks.io/python-data-structrue-and-algrothms/content/" target="_blank" rel="external">python数据结构和算法</a></li>
<li><a href="http://pythonguidecn.readthedocs.io/zh/latest/" target="_blank" rel="external">Python最佳实践指南！</a></li>
<li><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="external">Python Cookbook 3rd Edition Documentation</a></li>
<li><a href="https://taizilongxu.gitbooks.io/stackoverflow-about-python/content/" target="_blank" rel="external">Stackoverflow about Python</a></li>
<li><a href="https://eastlakeside.gitbooks.io/interpy-zh/content/" target="_blank" rel="external">Python进阶</a></li>
</ol>
<h1 id="免费视频"><a href="#免费视频" class="headerlink" title="免费视频"></a>免费视频</h1><ol>
<li><a href="http://study.163.com/course/courseMain.htm?courseId=378003" target="_blank" rel="external">零基础入门学习Python</a> 话说我当时就看的小甲鱼视频入门的</li>
<li><a href="https://www.icourse163.org/course/BIT-268001?tid=1002001005" target="_blank" rel="external">Python语言程序设计</a> 嵩天老师的一系列课程</li>
<li><a href="https://chinagdg.org/2016/03/machine-learning-recipes-for-new-developers/" target="_blank" rel="external">Google机器学习</a> 简单入门</li>
<li><a href="https://www.coursera.org/learn/suanfa-jichu/home/welcome" target="_blank" rel="external">算法基础</a> 北大博士的课程。。</li>
<li><a href="http://study.163.com/course/courseMain.htm?courseId=1004570029" target="_blank" rel="external">吴恩达机器学习</a> 这个就不评价了，都知道</li>
</ol>
<h1 id="爬虫教程"><a href="#爬虫教程" class="headerlink" title="爬虫教程"></a>爬虫教程</h1><ol>
<li><a href="https://piaosanlang.gitbooks.io/spiders/" target="_blank" rel="external">爬虫教程</a> 某位大佬所写，由浅入深</li>
<li><a href="http://lawtech0902.com/categories/Scrapy/" target="_blank" rel="external">Scrapy分类</a> 质量非常高</li>
<li><a href="https://germey.gitbooks.io/python3webspider/content/" target="_blank" rel="external">Python3网络爬虫实战</a> 崔大的书，马上会出版</li>
<li><a href="https://liangqingyu.gitbooks.io/bigdata-crawler/content/" target="_blank" rel="external">大数据之网络爬虫</a> 主要是垂直型网络爬虫</li>
<li><a href="https://www.biaodianfu.com/scrapy-redis.html" target="_blank" rel="external">使用Scrapy-redis实现分布式爬取</a> 分布式资料</li>
<li><a href="http://zhxfei.com/2017/06/03/scrapy_redis/" target="_blank" rel="external">使用Docker部署scrapy-redis分布式爬虫</a> 同样是分布式资料</li>
</ol>
<p>最重要的一点是：不要光收藏，不去看</p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这是崔斯特的第二十七篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我爱学习 (๑• . •๑)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Y5AMeSm.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="https://zhangslob.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://zhangslob.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>烦人的Git ( ´•︵•` )</title>
    <link href="https://zhangslob.github.io/2018/01/29/%E7%83%A6%E4%BA%BA%E7%9A%84Git%20%E7%BB%88%E4%BA%8E%E5%AD%A6%E4%BC%9A%E4%BA%86%20-%C2%B4%E2%80%A2%EF%B8%B5%E2%80%A2/"/>
    <id>https://zhangslob.github.io/2018/01/29/烦人的Git 终于学会了 -´•︵•/</id>
    <published>2018-01-29T13:30:41.000Z</published>
    <updated>2018-01-29T13:34:38.856Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是崔斯特的第二十六篇原创文章
</code></pre><p>终于会用Git了 (๑• . •๑)</p>
<p><img src="https://i.imgur.com/WPD1iB7.jpg" alt=""></p>
<a id="more"></a>
<p>Git对于新手来说，真的很烦人哎，好在找到了好工具 ——　PyCharm</p>
<h1 id="使用PyCharm进行代码管理"><a href="#使用PyCharm进行代码管理" class="headerlink" title="使用PyCharm进行代码管理"></a>使用PyCharm进行代码管理</h1><p>在VCS里有Git，里面有常用的操作，clone、pull、push等等。</p>
<p><img src="https://i.imgur.com/DALuEKz.png" alt=""></p>
<p>更方便的是，在左下角，有Version Control，可以清晰的看到日志改变，图中另一个标记的位置可以直接进行commit，如下图所示</p>
<p><img src="https://i.imgur.com/32W836Q.png" alt=""></p>
<p><img src="https://i.imgur.com/7Zx6Nps.png" alt=""></p>
<p>更多参考官方文档 <a href="https://www.jetbrains.com/help/pycharm/enabling-version-control.html" target="_blank" rel="external">Enabling Version Control</a></p>
<p>我修改了主题，可以在这里改 <a href="https://plugins.jetbrains.com/plugin/8006-material-theme-ui" target="_blank" rel="external">Material Theme UI</a></p>
<p><img src="https://plugins.jetbrains.com/files/8006/screenshot_17528.png" alt=""></p>
<p>emmm，简单的方法就是这样，还是需要了解下Git的基本操作的</p>
<h1 id="创建新仓库"><a href="#创建新仓库" class="headerlink" title="创建新仓库"></a>创建新仓库</h1><p>创建新文件夹，打开，然后执行 </p>
<p><code>git init</code></p>
<p>以创建新的 git 仓库。</p>
<p>或者按照官方推荐的例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">git clone git@github.com:zhangslob/test_test.git</div><div class="line">echo <span class="string">"# test_test"</span> &gt;&gt; README.md</div><div class="line">git init</div><div class="line">git add README.md</div><div class="line">git commit -m <span class="string">"first commit"</span></div><div class="line">git remote add origin git@github.com:zhangslob/test_test.git</div><div class="line">git push -u origin master</div><div class="line"></div><div class="line"><span class="comment"># 其中的命令下面会讲到</span></div></pre></td></tr></table></figure>
<h1 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h1><p>执行如下命令以创建一个本地仓库的克隆版本：</p>
<p><code>git clone /path/to/repository</code></p>
<p>如果是远端服务器上的仓库，你的命令会是这个样子：</p>
<p><code>git clone username@host:/path/to/repository</code></p>
<h1 id="添加和提交"><a href="#添加和提交" class="headerlink" title="添加和提交"></a>添加和提交</h1><p>你可以提出更改（把它们添加到暂存区），使用如下命令：</p>
<p><code>git add .</code></p>
<p>这是 git 基本工作流程的第一步；使用如下命令以实际提交改动：</p>
<p><code>git commit -m &quot;代码提交信息&quot;</code></p>
<p>现在，你的改动已经提交到了 HEAD，但是还没到你的远端仓库。</p>
<h1 id="推送改动"><a href="#推送改动" class="headerlink" title="推送改动"></a>推送改动</h1><p>你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库：</p>
<p><code>git push origin master</code></p>
<p>可以把 master 换成你想要推送的任何分支。 </p>
<h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是“默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。</p>
<p>创建一个叫做“develop”的分支，并切换过去：</p>
<p><code>git checkout -b develop</code></p>
<p>切换回主分支：</p>
<p><code>git checkout master</code></p>
<p>再把新建的分支删掉：</p>
<p><code>git branch -d develop</code></p>
<p>除非你将分支推送到远端仓库，不然该分支就是 不为他人所见的：</p>
<p><code>git push origin &lt;branch&gt;</code></p>
<h1 id="更新与合并"><a href="#更新与合并" class="headerlink" title="更新与合并"></a>更新与合并</h1><p>要更新你的本地仓库至最新改动，执行：</p>
<p><code>git pull</code></p>
<p>以在你的工作目录中 获取（fetch） 并 合并（merge） 远端的改动。</p>
<p>要合并其他分支到你的当前分支（例如 master），执行：</p>
<p><code>git merge &lt;branch&gt;</code></p>
<p>在这两种情况下，git 都会尝试去自动合并改动。遗憾的是，这可能并非每次都成功，并可能出现冲突（conflicts）。 这时候就需要你修改这些文件来手动合并这些冲突（conflicts）。改完之后，你需要执行如下命令以将它们标记为合并成功：</p>
<p><code>git add &lt;filename&gt;</code></p>
<p>在合并改动之前，你可以使用如下命令预览差异：</p>
<p><code>git diff &lt;source_branch&gt; &lt;target_branch&gt;</code></p>
<h1 id="替换本地改动"><a href="#替换本地改动" class="headerlink" title="替换本地改动"></a>替换本地改动</h1><p>假如你操作失误，你可以使用如下命令替换掉本地改动：</p>
<p><code>git checkout -- &lt;filename&gt;</code></p>
<p>此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。</p>
<p>假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git fetch <span class="built_in">origin</span></div><div class="line">git <span class="built_in">reset</span> --hard <span class="built_in">origin</span>/master</div></pre></td></tr></table></figure></p>
<h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><ol>
<li>使用 <code>git status</code> 可以迅速查看当前状态，若添加文件，会显示绿色的文字</li>
<li>使用Github的客户端，可以事半功倍 <a href="https://desktop.github.com/" target="_blank" rel="external">https://desktop.github.com/</a></li>
</ol>
<p>更多可以参考</p>
<p><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">Git 文档</a></p>
<h1 id="Git-Commit-Message-模版"><a href="#Git-Commit-Message-模版" class="headerlink" title="Git Commit Message 模版"></a>Git Commit Message 模版</h1><h2 id="模版命名约定"><a href="#模版命名约定" class="headerlink" title="模版命名约定"></a>模版命名约定</h2><p>模版名称由以下部分组成</p>
<p><code>gitmessage-${语言}[-full]</code></p>
<p>以 <code>-full</code> 结尾的模版包含了 message 组成区域的解释以及书写的指导，推荐新手选择该模版上手，在熟悉书写规范后换成简单版本。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#    feat     (新功能)</div><div class="line">#    fix      (问题修复)</div><div class="line">#    refactor (代码重构)</div><div class="line">#    style    (代码风格改动、格式变化等，无实现改动)</div><div class="line">#    docs     (文档更新)</div><div class="line">#    test     (增加、重构测试，无实现改动)</div><div class="line">#    chore    (修改一些配置文件如 .gitignore 等，无实现改动)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这是崔斯特的第二十六篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;终于会用Git了 (๑• . •๑)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/WPD1iB7.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="https://zhangslob.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://zhangslob.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>学点算法之字符串的乱序检查</title>
    <link href="https://zhangslob.github.io/2018/01/27/%E5%AD%A6%E7%82%B9%E7%AE%97%E6%B3%95%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E4%B9%B1%E5%BA%8F%E6%A3%80%E6%9F%A5/"/>
    <id>https://zhangslob.github.io/2018/01/27/学点算法之字符串的乱序检查/</id>
    <published>2018-01-27T10:52:56.000Z</published>
    <updated>2018-01-27T10:59:40.517Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是崔斯特的第二十五篇原创文章
</code></pre><p>老板，我要做算法工程师！</p>
<p><img src="https://i.imgur.com/z10Tn6k.jpg" alt=""><br><a id="more"></a></p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>字符串的乱序检查。</p>
<p>一个字符串是另一个字符串的乱序。如果第二个字符串只是第一个的重新排列，例如，’heart’ 和 ‘earth’ 就是乱序字符串。’python’ 和 ‘typhon’ 也是。为了简单起见，我们假设所讨论的两个字符串具有<strong>相等的长度</strong>，并且他们由 26 个小写字母集合组成。我们的目标是写一个布尔函数，它将两个字符串做参数并返回它们是不是回文。</p>
<h1 id="解法1-检查"><a href="#解法1-检查" class="headerlink" title="解法1:检查"></a>解法1:检查</h1><p>我们对乱序问题的第一个解法是检查第一个字符串是不是出现在第二个字符串中。如果可以检验到每一个字符，那两个字符串一定是回文。可以通过用 None 替换字符来完成检查。但是，由于 Python 字符串是不可变的，所以第一步是将第二个字符串转换为列表。第一个字符串中的每个字符可以通过检查在第二个列表中检查元素是否存在，如果存在，替换成 None。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">anagramSolution1</span><span class="params">(s1,s2)</span>:</span></div><div class="line">    alist = list(s2)</div><div class="line"></div><div class="line">    pos1 = <span class="number">0</span></div><div class="line">    stillOK = <span class="keyword">True</span></div><div class="line"></div><div class="line">    <span class="keyword">while</span> pos1 &lt; len(s1) <span class="keyword">and</span> stillOK:</div><div class="line">        pos2 = <span class="number">0</span></div><div class="line">        found = <span class="keyword">False</span></div><div class="line">        <span class="keyword">while</span> pos2 &lt; len(alist) <span class="keyword">and</span> <span class="keyword">not</span> found:</div><div class="line">            <span class="keyword">if</span> s1[pos1] == alist[pos2]:</div><div class="line">                found = <span class="keyword">True</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                pos2 = pos2 + <span class="number">1</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> found:</div><div class="line">            alist[pos2] = <span class="keyword">None</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            stillOK = <span class="keyword">False</span></div><div class="line"></div><div class="line">        pos1 = pos1 + <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> stillOK</div><div class="line"></div><div class="line">print(anagramSolution1(<span class="string">'abcd'</span>,<span class="string">'dcba'</span>))</div></pre></td></tr></table></figure>
<p>s1 的每个字符都会在 s2 中进行最多 n 个字符的迭代</p>
<p>s2 列表中的 n 个位置将被访问一次来匹配来自 s1 的字符。访问次数可以写成 1 到 n 整数的和，可以写成</p>
<p><img src="https://xidianwlc.gitbooks.io/python-data-structrue-and-algrothms/content/2.%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/2.4.%E4%B8%80%E4%B8%AA%E4%B9%B1%E5%BA%8F%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A3%80%E6%9F%A5%E7%9A%84%E4%BE%8B%E5%AD%90/assets/2.4.1%20%E6%B1%82%E5%92%8C.png" alt=""></p>
<p>当 n 变大，n^2 这项占据主导，1/2 可以忽略。所以这个算法复杂度为 O(n^2 )。</p>
<p><img src="https://wx1.sinaimg.cn/orj360/b04b21b7ly1fnssg4x3mdj20dc0dcgno.jpg" alt=""></p>
<h1 id="解法2-排序和比较"><a href="#解法2-排序和比较" class="headerlink" title="解法2:排序和比较"></a>解法2:排序和比较</h1><p>另一个解决方案是利用这么一个事实，即使 s1,s2 不同，它们只有由完全相同的字符组成，它们才是回文。所以，如果我们按照字母顺序排列每个字符串，从 a 到 z，如果两个字符串相同，则这两个字符串为回文。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">anagramSolution2</span><span class="params">(s1,s2)</span>:</span></div><div class="line">    alist1 = list(s1)</div><div class="line">    alist2 = list(s2)</div><div class="line"></div><div class="line">    alist1.sort()</div><div class="line">    alist2.sort()</div><div class="line"></div><div class="line">    <span class="keyword">if</span> alist1 == alist2:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">print(anagramSolution2(<span class="string">'abcde'</span>,<span class="string">'edcba'</span>))</div></pre></td></tr></table></figure>
<p>这个算法比较简单，只用到了排序算法，那么排序算法的复杂度还是多少呢？</p>
<p>在<a href="https://github.com/qiwsir/algorithm/blob/master/python_sort.md" target="_blank" rel="external">这里</a>找到了答案</p>
<p>python中的sorted算法，网上有人撰文，说比较低级。其实不然，通过阅读官方文档，发现python中的sorted排序，真的是高大上，用的Timsort算法。什么是Timsort，请看 wiki的解释：<a href="http://en.wikipedia.org/wiki/Timsort" target="_blank" rel="external">http://en.wikipedia.org/wiki/Timsort</a></p>
<p>另外，国内有一个文档，适当翻译：<a href="http://blog.csdn.net/yangzhongblog/article/details/8184707" target="_blank" rel="external">http://blog.csdn.net/yangzhongblog/article/details/8184707</a>，这里截取一个不同排序算法比较的图示，就明白sorted的威力了。</p>
<p>从时间复杂度来看，Timsort是威武的。</p>
<p><img src="https://github.com/qiwsir/algorithm/raw/master/pics/timsort1.png" alt=""></p>
<p>从空间复杂度来讲，需要的开销在数量大的时候会增大。</p>
<p><img src="https://github.com/qiwsir/algorithm/raw/master/pics/timsort2.png" alt=""></p>
<p><img src="https://wx2.sinaimg.cn/orj360/b04b21b7ly1fnssg5nhwuj20dc0dcmz2.jpg" alt=""></p>
<h1 id="解法3-穷举法"><a href="#解法3-穷举法" class="headerlink" title="解法3: 穷举法"></a>解法3: 穷举法</h1><p>解决这类问题的强力方法是<strong>穷举所有可能性</strong>。</p>
<p>对于回文检测，我们可以生成 s1 的所有乱序字符串列表，然后查看是不是有 s2。这种方法有一点困难。当 s1 生成所有可能的字符串时，第一个位置有 n 种可能，第二个位置有 n-1 种，第三个位置有 n-3 种，等等。总数为 <code>n∗(n−1)∗(n−2)∗...∗3∗2∗1n∗(n−1)∗(n−2)∗...∗3∗2∗1</code>， 即 <code>n!</code> 。</p>
<p>虽然一些字符串可能是重复的，程序也不可能提前知道这样，所以他仍然会生成 <code>n!</code> 个字符串。<br>事实证明，n! 比 n^2 增长还快，事实上，如果 s1 有 20个字符长，则将有 <code>20! = 2,432,902,008,176,640,000</code> 个字符串产生。如果我们每秒处理一种可能字符串，那么需要 <code>77,146,816,596</code> 年才能过完整个列表。</p>
<p>所以当然不会采取这种方案了。</p>
<p><img src="https://wx2.sinaimg.cn/orj360/b04b21b7ly1fnssg6fej0j20dc0dc40h.jpg" alt=""></p>
<h1 id="解法4-计数和比较"><a href="#解法4-计数和比较" class="headerlink" title="解法4: 计数和比较"></a>解法4: 计数和比较</h1><p>我们最终解决回文的方法是利用两个乱序字符串具有相同的 a, b, c 等等的事实。</p>
<p>我们首先计算的是每个字母出现的次数。由于有 26 个可能的字符，我们就用 一个长度为 26 的列表，每个可能的字符占一个位置。每次看到一个特定的字符，就增加该位置的计数器。最后如果两个列表的计数器一样，则字符串为乱序字符串。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">anagramSolution4</span><span class="params">(s1,s2)</span>:</span></div><div class="line">    c1 = [<span class="number">0</span>]*<span class="number">26</span></div><div class="line">    c2 = [<span class="number">0</span>]*<span class="number">26</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s1)):</div><div class="line">        pos = ord(s1[i])-ord(<span class="string">'a'</span>)</div><div class="line">        c1[pos] = c1[pos] + <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s2)):</div><div class="line">        pos = ord(s2[i])-ord(<span class="string">'a'</span>)</div><div class="line">        c2[pos] = c2[pos] + <span class="number">1</span></div><div class="line"></div><div class="line">    j = <span class="number">0</span></div><div class="line">    stillOK = <span class="keyword">True</span></div><div class="line">    <span class="keyword">while</span> j&lt;<span class="number">26</span> <span class="keyword">and</span> stillOK:</div><div class="line">        <span class="keyword">if</span> c1[j]==c2[j]:</div><div class="line">            j = j + <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            stillOK = <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> stillOK</div><div class="line"></div><div class="line">print(anagramSolution4(<span class="string">'apple'</span>,<span class="string">'pleap'</span>))</div></pre></td></tr></table></figure>
<p>同样，这个方案有多个迭代，但是和第一个解法不一样，它不是嵌套的。两个迭代都是 n, 第三个迭代，比较两个计数列表，需要 26 步，因为有 26 个字母。一共 T(n)=2n+26T(n)=2n+26，即 O(n)，我们找到了一个线性量级的算法解决这个问题。</p>
<p>如果让我自己来选择，我可能会选第二种，第二种最简单，也最好理解。但是最后的结论表明 <strong>解法4</strong> 才是最优解法，排序固然简单，但是但数量很大的时候，可能远不止我们想的那么简单。</p>
<p>在结束这个例子之前，我们来讨论下空间花费，虽然最后一个方案在线性时间执行，但它需要额外的存储来保存两个字符计数列表。换句话说，该算法牺牲了空间以获得时间。</p>
<p>很多情况下，你需要在空间和时间之间做出权衡。这种情况下，额外空间不重要，但是如果有数百万个字符，就需要关注下。作为一个计算机科学家，当给定一个特定的算法，将由你决定如何使用计算资源。</p>
<blockquote>
<p>如有错误，请指出</p>
</blockquote>
<p><a href="https://m.weibo.cn/status/4200069676754911" target="_blank" rel="external">图片来源</a></p>
<p>各位下期见，不聊了，又该搬砖了。。。</p>
<p><img src="https://wx2.sinaimg.cn/orj360/b04b21b7ly1fnssg6v2b1j20dc0dcq4t.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这是崔斯特的第二十五篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;老板，我要做算法工程师！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/z10Tn6k.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="https://zhangslob.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://zhangslob.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Python" scheme="https://zhangslob.github.io/tags/Python/"/>
    
      <category term="排序" scheme="https://zhangslob.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>使用logging管理爬虫</title>
    <link href="https://zhangslob.github.io/2018/01/15/%E4%BD%BF%E7%94%A8logging%E7%AE%A1%E7%90%86%E7%88%AC%E8%99%AB/"/>
    <id>https://zhangslob.github.io/2018/01/15/使用logging管理爬虫/</id>
    <published>2018-01-15T13:39:35.000Z</published>
    <updated>2018-01-15T13:43:53.655Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是崔斯特的第二十四篇原创文章
</code></pre><p>使用日志记录程序运行状态</p>
<p><img src="https://farm5.staticflickr.com/4246/35254379756_c9fe23f843_k_d.jpg" alt=""></p>
<a id="more"></a>
<blockquote>
<p><a href="http://pythonguidecn.readthedocs.io/zh/latest/writing/logging.html" target="_blank" rel="external">文档</a></p>
</blockquote>
<p><a href="https://docs.python.org/2/library/logging.html#module-logging" target="_blank" rel="external">日志</a> 模块自2.3版本开始便是Python标准库的一部分。它被简洁的描述在 <a href="https://www.python.org/dev/peps/pep-0282/" target="_blank" rel="external">PEP 282</a>。 众所周知，除了 <a href="https://docs.python.org/3/howto/logging.html#logging-basic-tutorial" target="_blank" rel="external">基础日志指南</a> 部分，该文档并不容易阅读。</p>
<p>日志的两个目的：</p>
<ul>
<li><strong>诊断日志</strong> 记录与应用程序操作相关的日志。例如，用户遇到的报错信息， 可通过搜索诊断日志获得上下文信息。</li>
<li><strong>审计日志</strong> 为商业分析而记录的日志。从审计日志中，可提取用户的交易信息， 并结合其他用户资料构成用户报告或者用来优化商业目标。</li>
</ul>
<h1 id="…-或者打印"><a href="#…-或者打印" class="headerlink" title="… 或者打印?"></a>… 或者打印?</h1><p>当需要在命令行应用中显示帮助文档时， <code>打印</code> 是一个相对于日志更好的选择。 而在其他时候，日志总能优于 <code>打印</code> ，理由如下：</p>
<ul>
<li>日志事件产生的 <a href="https://docs.python.org/3/library/logging.html#logrecord-attributes" target="_blank" rel="external">日志记录</a> ，包含清晰可用的诊断信息，如文件名称、路径、函数名和行号等。</li>
<li>包含日志模块的应用，默认可通过根记录器对应用的日志流进行访问，除非您将日志过滤了。</li>
<li>可通过 <code>logging.Logger.setLevel()</code> 方法有选择地记录日志， 或可通过设置 <code>logging.Logger.disabled</code> 属性为 <code>True</code> 来禁用。</li>
</ul>
<h1 id="库中的日志"><a href="#库中的日志" class="headerlink" title="库中的日志"></a>库中的日志</h1><p><a href="https://docs.python.org/3/howto/logging.html" target="_blank" rel="external">日志指南</a> 中含 <a href="https://docs.python.org/3/howto/logging.html#configuring-logging-for-a-library" target="_blank" rel="external">库日志配置</a> 的说明。由于是 <em>用户</em> ，而非库来指明如何响应日志事件， 因此这里有一个值得反复说明的忠告：</p>
<blockquote>
<p>注解<br>强烈建议不要向您的库日志中加入除NullHandler外的其它处理程序。</p>
</blockquote>
<p>在库中，声明日志的最佳方式是通过 <code>__name__</code> 全局变量： logging 模块通过点(dot)运算符创建层级排列的日志，因此，用 <code>__name__</code> 可以避免名字冲突。</p>
<p>以下是一个来自 <a href="https://github.com/requests/requests" target="_blank" rel="external">requests 资源</a> 的最佳实践的例子 —— 把它放置在您的 <code>__init__.py</code> 文件中<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line">logging.getLogger(__name__).addHandler(logging.NullHandler())</div></pre></td></tr></table></figure></p>
<h1 id="应用程序中的日志"><a href="#应用程序中的日志" class="headerlink" title="应用程序中的日志"></a>应用程序中的日志</h1><p>应用程序开发的权威指南， <a href="https://12factor.net/" target="_blank" rel="external">应用的12要素</a> ，也在其中一节描述了 <a href="https://12factor.net/logs" target="_blank" rel="external">日志的作用</a> 。它特别强调将日志视为事件流， 并将其发送至由应用环境所处理的标准输出中。</p>
<p>配置日志至少有以下三种方式：</p>
<ul>
<li>使用INI格式文件：<ul>
<li>优点: 使用 logging.config.listen() 函数监听socket，可在运行过程中更新配置</li>
<li>缺点: 通过源码控制日志配置较少（ 例如 子类化定制的过滤器或记录器）。</li>
</ul>
</li>
<li>使用字典或JSON格式文件：<ul>
<li>优点: 除了可在运行时动态更新，在Python 2.6之后，还可通过 json 模块从其它文件中导入配置。</li>
<li>缺点: 很难通过源码控制日志配置。</li>
</ul>
</li>
<li>使用源码：<ul>
<li>优点: 对配置绝对的控制。</li>
<li>缺点: 对配置的更改需要对源码进行修改。</li>
</ul>
</li>
</ul>
<h1 id="通过INI文件进行配置的例子"><a href="#通过INI文件进行配置的例子" class="headerlink" title="通过INI文件进行配置的例子"></a>通过INI文件进行配置的例子</h1><p>我们假设文件名为 <code>logging_config.ini</code> 。关于文件格式的更多细节，请参见 <a href="https://docs.python.org/3/howto/logging.html" target="_blank" rel="external">日志指南</a> 中的 <a href="https://docs.python.org/3/howto/logging.html#configuring-logging" target="_blank" rel="external">日志配置</a> 部分。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">[loggers]</div><div class="line">keys=root</div><div class="line"></div><div class="line">[handlers]</div><div class="line">keys=stream_handler</div><div class="line"></div><div class="line">[formatters]</div><div class="line">keys=formatter</div><div class="line"></div><div class="line">[logger_root]</div><div class="line">level=DEBUG</div><div class="line">handlers=stream_handler</div><div class="line"></div><div class="line">[handler_stream_handler]</div><div class="line">class=StreamHandler</div><div class="line">level=DEBUG</div><div class="line">formatter=formatter</div><div class="line">args=(sys.stderr,)</div><div class="line"></div><div class="line">[formatter_formatter]</div><div class="line">format=%(asctime)s %(name)-12s %(levelname)-8s %(message)s</div></pre></td></tr></table></figure>
<p>然后在源码中调用 <code>logging.config.fileConfig()</code> 方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">from</span> logging.config <span class="keyword">import</span> fileConfig</div><div class="line"></div><div class="line">fileConfig(<span class="string">'logging_config.ini'</span>)</div><div class="line">logger = logging.getLogger()</div><div class="line">logger.debug(<span class="string">'often makes a very good meal of %s'</span>, <span class="string">'visiting tourists'</span>)</div></pre></td></tr></table></figure></p>
<h1 id="通过字典进行配置的例子"><a href="#通过字典进行配置的例子" class="headerlink" title="通过字典进行配置的例子"></a>通过字典进行配置的例子</h1><p>Python 2.7中，您可以使用字典实现详细配置。<a href="https://www.python.org/dev/peps/pep-0391/" target="_blank" rel="external">PEP 391</a> 包含了一系列字典配置的强制和 非强制的元素。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">from</span> logging.config <span class="keyword">import</span> dictConfig</div><div class="line"></div><div class="line">logging_config = dict(</div><div class="line">    version = <span class="number">1</span>,</div><div class="line">    formatters = &#123;</div><div class="line">        <span class="string">'f'</span>: &#123;<span class="string">'format'</span>:</div><div class="line">              <span class="string">'%(asctime)s %(name)-12s %(levelname)-8s %(message)s'</span>&#125;</div><div class="line">        &#125;,</div><div class="line">    handlers = &#123;</div><div class="line">        <span class="string">'h'</span>: &#123;<span class="string">'class'</span>: <span class="string">'logging.StreamHandler'</span>,</div><div class="line">              <span class="string">'formatter'</span>: <span class="string">'f'</span>,</div><div class="line">              <span class="string">'level'</span>: logging.DEBUG&#125;</div><div class="line">        &#125;,</div><div class="line">    root = &#123;</div><div class="line">        <span class="string">'handlers'</span>: [<span class="string">'h'</span>],</div><div class="line">        <span class="string">'level'</span>: logging.DEBUG,</div><div class="line">        &#125;,</div><div class="line">)</div><div class="line"></div><div class="line">dictConfig(logging_config)</div><div class="line"></div><div class="line">logger = logging.getLogger()</div><div class="line">logger.debug(<span class="string">'often makes a very good meal of %s'</span>, <span class="string">'visiting tourists'</span>)</div></pre></td></tr></table></figure></p>
<p>通过源码直接配置的例子</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line"></div><div class="line">logger = logging.getLogger()</div><div class="line">handler = logging.StreamHandler()</div><div class="line">formatter = logging.Formatter(</div><div class="line">        <span class="string">'%(asctime)s %(name)-12s %(levelname)-8s %(message)s'</span>)</div><div class="line">handler.setFormatter(formatter)</div><div class="line">logger.addHandler(handler)</div><div class="line">logger.setLevel(logging.DEBUG)</div><div class="line"></div><div class="line">logger.debug(<span class="string">'often makes a very good meal of %s'</span>, <span class="string">'visiting tourists'</span>)</div></pre></td></tr></table></figure>
<p>官方文档说完了，来看看具体的应用。</p>
<p>默认的日志级别设置为 <code>WARNING</code> （日志级别等级 <code>CRITICAL</code> &gt; <code>ERROR</code> &gt; <code>WARNING</code> &gt; <code>INFO</code> &gt; <code>DEBUG</code> &gt; <code>NOTSET</code>）, 小于 <code>WARNING</code> 级别的日志都不输出, 大于等于 <code>WARNING</code> 级别的日志都会输出。</p>
<h1 id="简单的将日志打印到屏幕"><a href="#简单的将日志打印到屏幕" class="headerlink" title="简单的将日志打印到屏幕"></a>简单的将日志打印到屏幕</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> logging</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    logging.basicConfig(level=logging.DEBUG,</div><div class="line">    format=<span class="string">'%(asctime)s %(filename)s [line:%(lineno)d] %(levelname)s %(message)s'</span>,</div><div class="line">            datefmt=<span class="string">'%a, %d %b %Y %H:%M:%S'</span>,</div><div class="line">            filename=<span class="string">'test.log'</span>,</div><div class="line">            filemode=<span class="string">'w'</span>)</div><div class="line">    console = logging.StreamHandler()</div><div class="line">    console.setLevel(logging.WARNING)</div><div class="line">    formatter=logging.Formatter(<span class="string">'%(name)-12s: %(levelname)-8s %(message)s'</span>)</div><div class="line">    console.setFormatter(formatter)</div><div class="line">    logging.getLogger(<span class="string">''</span>).addHandler(console)</div><div class="line">    logging.debug(<span class="string">'This is DEBUG'</span>)</div><div class="line">    logging.info(<span class="string">'This is INFO'</span>)</div><div class="line">    logging.warning(<span class="string">'This is WARNING'</span>)</div></pre></td></tr></table></figure>
<p>输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root        : WARNING  This is WARNING</div></pre></td></tr></table></figure></p>
<p><code>test.log</code>文件中包含：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Mon, 15 Jan 2018 20:19:45 sfda.py [line:90] DEBUG This is DEBUG</div><div class="line">Mon, 15 Jan 2018 20:19:45 sfda.py [line:91] INFO This is INFO</div><div class="line">Mon, 15 Jan 2018 20:19:45 sfda.py [line:92] WARNING This is WARNING</div></pre></td></tr></table></figure></p>
<p>注意：由于日志写入模式设置为 <code>w</code> ，因此重复运行时会将之前的日志清空。</p>
<p>logging.basicConfig 函数各参数:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">filename: 指定日志文件名</div><div class="line">filemode: 和file函数意义相同，指定日志文件的打开模式，’w’或’a’</div><div class="line">format: 指定输出的格式和内容，format可以输出很多有用信息，如上例所示:</div><div class="line">%(levelno)s: 打印日志级别的数值</div><div class="line">%(levelname)s: 打印日志级别名称</div><div class="line">%(pathname)s: 打印当前执行程序的路径，其实就是sys.argv[0]</div><div class="line">%(filename)s: 打印当前执行程序名</div><div class="line">%(funcName)s: 打印日志的当前函数</div><div class="line">%(lineno)d: 打印日志的当前行号</div><div class="line">%(asctime)s: 打印日志的时间</div><div class="line">%(thread)d: 打印线程ID</div><div class="line">%(threadName)s: 打印线程名称</div><div class="line">%(process)d: 打印进程ID</div><div class="line">%(message)s: 打印日志信息</div><div class="line">datefmt: 指定时间格式，同time.strftime()</div><div class="line">level: 设置日志级别，默认为logging.WARNING</div><div class="line">stream: 指定将日志的输出流，可以指定输出到sys.stderr,</div><div class="line">sys.stdout或者文件，默认输出到sys.stderr，当stream和filename同时指定时，stream被忽略</div></pre></td></tr></table></figure>
<h1 id="logging-三大模块：-Logger-Handler-，-Format"><a href="#logging-三大模块：-Logger-Handler-，-Format" class="headerlink" title="logging 三大模块： Logger ,  Handler ， Format"></a>logging 三大模块： <code>Logger</code> ,  <code>Handler</code> ， <code>Format</code></h1><h2 id="logger"><a href="#logger" class="headerlink" title="logger"></a>logger</h2><p> <code>logger</code> 通过 <code>getLogger</code> 函数得到， 可以在不同的模块中使用不同的 <code>logger</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line">logger = logging.getLogger(__name__)</div><div class="line">logger.debug(<span class="string">'some infomation'</span>)</div></pre></td></tr></table></figure></p>
<h2 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h2><p> <code>handler</code> 有多种， 可以记录到 <code>console</code>， 或者到文件， 文件也可以自动 <code>rotate</code>， 常用的几个 <code>handler</code></p>
<ul>
<li>StreamHandler 打印到终端</li>
<li>FileHandler 保存到文件</li>
<li>RotatingFileHandler 保存到文件， 达到一定大小之后备份文件。</li>
<li>TimedRotatingFileHandler 定时备份</li>
</ul>
<h2 id="Format"><a href="#Format" class="headerlink" title="Format"></a>Format</h2><p> <code>Formatter</code> 对象设置日志信息最后的规则、结构和内容，默认的时间格式为 <code>%Y-%m-%d %H:%M:%S</code></p>
<h1 id="Scrapy-与-Logging"><a href="#Scrapy-与-Logging" class="headerlink" title="Scrapy 与 Logging"></a>Scrapy 与 Logging</h1><blockquote>
<p><a href="https://doc.scrapy.org/en/latest/topics/logging.html" target="_blank" rel="external">文档</a></p>
</blockquote>
<p>Scrapy uses Python’s builtin logging system for event logging. We’ll provide some simple examples to get you started, but for more advanced use-cases it’s strongly suggested to read thoroughly its documentation.</p>
<blockquote>
<p>Scrapy使用Python的内置日志记录系统进行事件日志记录。 我们将提供一些简单的示例来帮助您开始，但对于更高级的用例，强烈建议您仔细阅读其文档。</p>
</blockquote>
<h2 id="Log-levels"><a href="#Log-levels" class="headerlink" title="Log levels"></a>Log levels</h2><ol>
<li>logging.CRITICAL - for critical errors (highest severity)</li>
<li>logging.ERROR - for regular errors</li>
<li>logging.WARNING - for warning messages</li>
<li>logging.INFO - for informational messages</li>
<li>logging.DEBUG - for debugging messages (lowest severity)</li>
</ol>
<h2 id="How-to-log-messages"><a href="#How-to-log-messages" class="headerlink" title="How to log messages"></a>How to log messages</h2><p> quick example</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line">logger = logging.getLogger()</div><div class="line">logger.warning(<span class="string">"This is a warning"</span>)</div></pre></td></tr></table></figure>
<h2 id="Logging-from-Spiders"><a href="#Logging-from-Spiders" class="headerlink" title="Logging from Spiders"></a>Logging from Spiders</h2><p>该记录器是使用Spider的名称创建的，但是您可以使用任何您想要的自定义Python记录器。 例如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line">logger = logging.getLogger(<span class="string">'mycustomlogger'</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line"></div><div class="line">    name = <span class="string">'myspider'</span></div><div class="line">    start_urls = [<span class="string">'https://scrapinghub.com'</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        logger.info(<span class="string">'Parse function called on %s'</span>, response.url)</div></pre></td></tr></table></figure>
<h2 id="在middlewares中应用"><a href="#在middlewares中应用" class="headerlink" title="在middlewares中应用"></a>在middlewares中应用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line"></div><div class="line">logger = logging.getLogger(__name__)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyMiddleware</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></div><div class="line">        request.meta[<span class="string">'proxy'</span>] = random.choice(proxy_list)</div><div class="line">        spider.logger.info(<span class="string">'get ip: &#123;&#125;'</span>.format(request.meta[<span class="string">'proxy'</span>]))</div></pre></td></tr></table></figure>
<h2 id="使用Scrapy记录爬取日志"><a href="#使用Scrapy记录爬取日志" class="headerlink" title="使用Scrapy记录爬取日志"></a>使用Scrapy记录爬取日志</h2><p>在 <code>settings.py</code> 中修改:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LOG_STDOUT = <span class="keyword">True</span></div><div class="line">LOG_FILE = <span class="string">'scrapy_log.txt'</span></div></pre></td></tr></table></figure></p>
<p>然后开始运行爬虫，日志不会打印，会保存到 <code>scrapy_log.txt</code> 文件中。</p>
<h2 id="使用errbacks在请求处理中捕获异常"><a href="#使用errbacks在请求处理中捕获异常" class="headerlink" title="使用errbacks在请求处理中捕获异常"></a>使用errbacks在请求处理中捕获异常</h2><p>请求的errback是在处理异常时被调用的函数。</p>
<p>它接收Twisted Failure实例作为第一个参数，可用于跟踪连接建立超时，DNS错误等。</p>
<p>这里有一个爬虫日志记录所有的错误和捕捉一些特定的错误，例子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"></div><div class="line"><span class="keyword">from</span> scrapy.spidermiddlewares.httperror <span class="keyword">import</span> HttpError</div><div class="line"><span class="keyword">from</span> twisted.internet.error <span class="keyword">import</span> DNSLookupError</div><div class="line"><span class="keyword">from</span> twisted.internet.error <span class="keyword">import</span> TimeoutError, TCPTimedOutError</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErrbackSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">"errback_example"</span></div><div class="line">    start_urls = [</div><div class="line">        <span class="string">"http://www.httpbin.org/"</span>,              <span class="comment"># HTTP 200 expected</span></div><div class="line">        <span class="string">"http://www.httpbin.org/status/404"</span>,    <span class="comment"># Not found error</span></div><div class="line">        <span class="string">"http://www.httpbin.org/status/500"</span>,    <span class="comment"># server issue</span></div><div class="line">        <span class="string">"http://www.httpbin.org:12345/"</span>,        <span class="comment"># non-responding host, timeout expected</span></div><div class="line">        <span class="string">"http://www.httphttpbinbin.org/"</span>,       <span class="comment"># DNS error expected</span></div><div class="line">    ]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">for</span> u <span class="keyword">in</span> self.start_urls:</div><div class="line">            <span class="keyword">yield</span> scrapy.Request(u, callback=self.parse_httpbin,</div><div class="line">                                    errback=self.errback_httpbin,</div><div class="line">                                    dont_filter=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_httpbin</span><span class="params">(self, response)</span>:</span></div><div class="line">        self.logger.info(<span class="string">'Got successful response from &#123;&#125;'</span>.format(response.url))</div><div class="line">        <span class="comment"># do something useful here...</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">errback_httpbin</span><span class="params">(self, failure)</span>:</span></div><div class="line">        <span class="comment"># log all failures</span></div><div class="line">        self.logger.error(repr(failure))</div><div class="line"></div><div class="line">        <span class="comment"># in case you want to do something special for some errors,</span></div><div class="line">        <span class="comment"># you may need the failure's type:</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> failure.check(HttpError):</div><div class="line">            <span class="comment"># these exceptions come from HttpError spider middleware</span></div><div class="line">            <span class="comment"># you can get the non-200 response</span></div><div class="line">            response = failure.value.response</div><div class="line">            self.logger.error(<span class="string">'HttpError on %s'</span>, response.url)</div><div class="line"></div><div class="line">        <span class="keyword">elif</span> failure.check(DNSLookupError):</div><div class="line">            <span class="comment"># this is the original request</span></div><div class="line">            request = failure.request</div><div class="line">            self.logger.error(<span class="string">'DNSLookupError on %s'</span>, request.url)</div><div class="line"></div><div class="line">        <span class="keyword">elif</span> failure.check(TimeoutError, TCPTimedOutError):</div><div class="line">            request = failure.request</div><div class="line">            self.logger.error(<span class="string">'TimeoutError on %s'</span>, request.url)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这是崔斯特的第二十四篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用日志记录程序运行状态&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://farm5.staticflickr.com/4246/35254379756_c9fe23f843_k_d.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://zhangslob.github.io/categories/Python/"/>
    
    
      <category term="2017" scheme="https://zhangslob.github.io/tags/2017/"/>
    
      <category term="logging" scheme="https://zhangslob.github.io/tags/logging/"/>
    
  </entry>
  
  <entry>
    <title>2017 梦醒时分</title>
    <link href="https://zhangslob.github.io/2017/12/31/2017-%E6%A2%A6%E9%86%92%E6%97%B6%E5%88%86/"/>
    <id>https://zhangslob.github.io/2017/12/31/2017-梦醒时分/</id>
    <published>2017-12-31T08:09:41.000Z</published>
    <updated>2017-12-31T08:58:12.240Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是崔斯特的第二十三篇原创文章
</code></pre><p><img src="https://i.imgur.com/hDfodeg.jpg" alt=""></p>
<a id="more"></a>
<p>首先说说自己吧，小歪、来自湖北、在武汉中南民族大学本科社会学专业，目前在北漂，职位是<strong>客户支持&amp;爬虫工程师</strong>。</p>
<p>先说说自己的大学吧，大学时基本是不知道自己想要什么，也没有思考过自己以后去做什么这个问题，可以说是玩了三年，到了大四，面临着毕业找工作的压力，出去找实习，可是自己啥也不会啊。就是在这个情况下，我接触到了<strong>Python</strong>。</p>
<p>翻看自己一年前写的博客 <a href="https://zhuanlan.zhihu.com/p/25147821" target="_blank" rel="external">Python练习第一题，在图片上加入数字</a>，我在里面曾经说过这样一句话：</p>
<blockquote>
<p>最后，我想给自己定个目标，2017年利用Python找到一份工作，养活自己。</p>
</blockquote>
<p><img src="https://i.imgur.com/RVU7Vrt.png" alt=""></p>
<p>在今天，也就是2017年12月31日，我可以自豪地说，<strong>我完成了我的目标</strong>。</p>
<p>这其中发生了很多有趣的事，我现在都说一说吧。</p>
<h1 id="第一个offer"><a href="#第一个offer" class="headerlink" title="第一个offer"></a>第一个offer</h1><p>临近毕业的时候当然也有跑宣讲会什么的，各种机缘巧合下，拿到了第一个offer，是食品行业的，好像是什么质检员，我感觉自己还是想去互联网行业的，所以拒绝了。</p>
<h1 id="第二个offer"><a href="#第二个offer" class="headerlink" title="第二个offer"></a>第二个offer</h1><p>第二个是某派新闻，号称党媒旗下的媒体。刚去的时候，做的是审核类的工作，最后才发现里面的各种坑。好险自己发现的早，时间已经来到17年的3月份。</p>
<h1 id="第三个offer"><a href="#第三个offer" class="headerlink" title="第三个offer"></a>第三个offer</h1><p><img src="https://www.hellobi.com/images/logo/logo.png" alt=""></p>
<p>到3月份，我还没找到工作，但是自己心灰意冷，很害怕刚毕业就失业，但是在武汉根本很难找到合适的工作。恰好在这个时候，认识了天善的勇哥，大家可以去看看天善的课程，都是一线大牛人物，<a href="https://www.hellobi.com/" target="_blank" rel="external">天善智能</a>。然后我就去上海了，去上海的一个月时间，我自己改变是非常大的。认识了很多大佬，见识了很多新的想法。</p>
<p>在天善做的是新媒体这一块，但是就有写这样一篇文章，叫做<a href="https://zhuanlan.zhihu.com/p/26409764" target="_blank" rel="external">为了找一份Python实习，我用爬虫收集数据</a>，很巧的事情是，现在我的BOSS真好看到了这篇文章，然后就联系我了，然后我就来了。</p>
<h1 id="第四个offer"><a href="#第四个offer" class="headerlink" title="第四个offer"></a>第四个offer</h1><p><img src="http://zaoshu.io/asserts/logo.png" alt=""></p>
<p>我是6月份来到北京的，到现在已经有半年了，一直呆在<a href="http://zaoshu.io/" target="_blank" rel="external">造数</a>。</p>
<p>做过运营、做过客户支持，最近开始接触项目，可以使用<strong>Python</strong>开发项目，虽然有很多做得不好的地方，但是对我来说这是一个开始。</p>
<p>我每天会花很多时间去学习（周末除外，因为我要吃鸡，haha），也会经常写博客，记录自己的学习经历，接触项目之后才发现自己以前的各种毛病，这些都不是问题，坚持学习就好。</p>
<p>这期间，我还配合造数的首席爬虫工程师<strong>小X</strong>制作了一期<a href="https://www.dcxueyuan.com/#/classDetail/classIntroduce/17" target="_blank" rel="external">Python爬虫</a>课程，课程还是挺精彩的，我学习进阶部分后，感觉对Scrapy框架入门了。</p>
<p>有兴趣的可以看看，但是我并不推荐，因为学Python或者爬虫最好的还是去看文档，文档是最好的选择。这种培训课程只有一个好处，就是及时的帮你解答疑惑。</p>
<p>好了，不扯远了，继续回到今天的主题。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>2017年对我来说就是“<strong>梦醒时分</strong>”，总算是在这一年完成了自己的梦想，接下来就需要自己更加努力，去弥补自己所缺乏的。</p>
<p>对于我这个文科生来说，确实是挺不容易的，但是就像歌词里的：</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=27901832&auto=0&height=66"></iframe>

<blockquote>
<p>新的风暴已经出现<br>怎么能够停滞不前<br>穿越时空竭尽全力<br>我会来到你身边<br>微笑面对危险<br>梦想成真不会遥远<br>鼓起勇气坚定向前<br>奇迹一定会出现</p>
</blockquote>
<p>非常欢迎大家与我交流，有什么疑问可以直接在评论中说出来，我定会知无不言。</p>
<p>也可以加我微信交流： zhang7350</p>
<p>最后，如果你也想要学Python找工作，你应该先问自己一个问题： 我喜欢Python吗？</p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这是崔斯特的第二十三篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/hDfodeg.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="总结" scheme="https://zhangslob.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="年度总结" scheme="https://zhangslob.github.io/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
      <category term="2017" scheme="https://zhangslob.github.io/tags/2017/"/>
    
  </entry>
  
  <entry>
    <title>采集方案策略之App抓包</title>
    <link href="https://zhangslob.github.io/2017/12/23/%E9%87%87%E9%9B%86%E6%96%B9%E6%A1%88%E7%AD%96%E7%95%A5%E4%B9%8BApp%E6%8A%93%E5%8C%85/"/>
    <id>https://zhangslob.github.io/2017/12/23/采集方案策略之App抓包/</id>
    <published>2017-12-23T13:40:26.000Z</published>
    <updated>2017-12-23T13:48:09.728Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是崔斯特的第二十二篇原创文章
</code></pre><p><img src="https://i.imgur.com/NRBPj4t.jpg" alt=""></p>
<a id="more"></a>
<h1 id="采集方案策略设计"><a href="#采集方案策略设计" class="headerlink" title="采集方案策略设计"></a>采集方案策略设计</h1><p>在群里看到有人询问饿了么的参数，正好感兴趣，就来时间一番。</p>
<p>这里引用下大佬的一段话：</p>
<p>首先大的地方，我们想抓取某个数据源，我们要知道大概有哪些路径可以获取到数据源，基本上无外乎三种：</p>
<ul>
<li>PC端网站</li>
<li>针对移动设备响应式设计的网站（也就是很多人说的H5, 虽然不一定是H5）；</li>
<li>移动App</li>
</ul>
<p>原则是能抓移动App的，最好抓移动App，如果有针对移动设备优化的网站，就抓针对移动设备优化的网站，最后考虑PC网站。因为移动App基本都是API很简单，而移动设备访问优化的网站一般来讲都是结构简单清晰的HTML，而PC网站自然是最复杂的了；<br>针对PC端网站和移动网站的做法一样，分析思路可以一起讲，移动App单独分析。</p>
<p>其实很多网页都有移动端，像微博，我知道这三个：</p>
<ol>
<li>weibo.com</li>
<li>weibo.cn</li>
<li>m.weibo.cn</li>
</ol>
<p>最简单的当然是第二种了，对于今天的受害者——饿了么来说，当然，首选也是移动端。</p>
<h1 id="饿了么抓包分析"><a href="#饿了么抓包分析" class="headerlink" title="饿了么抓包分析"></a>饿了么抓包分析</h1><p>这里抓包工具选择<strong>Fiddler</strong>，这里不讲如何配置，具体参考 <a href="https://www.cnblogs.com/abao0/p/7008995.html" target="_blank" rel="external">用Fiddler对Android应用进行抓包</a></p>
<p>下面打开手机的饿了么，原本以为会有数据，结果，竟然是这样</p>
<p><img src="https://i.imgur.com/KmL5L9d.png" alt=""></p>
<p>去询问了专业人士，了解了有些应用不允许用户抓包，会有相应的限制。好吧，这就能难倒我了吗？？</p>
<p>当我切换到<strong>发现</strong>类目下，发现有奇怪的提示</p>
<p><img src="https://i.imgur.com/zF1e1iV.png" alt=""></p>
<p>在疯狂点击<strong>继续访问</strong>后，我终于可以正常访问了。</p>
<p><img src="https://i.imgur.com/DwDXNM8.jpg" alt=""></p>
<p>那么就可以在Fiddler中查看对应的数据了。这里直接把接口展示出来：<a href="https://restapi.ele.me/shopping/v1/find/recommendation?offset=20&amp;limit=40&amp;latitude=39.93245&amp;longitude=116.50097" target="_blank" rel="external">饿了么接口</a></p>
<p>浏览器直接打开，貌似没有啥验证</p>
<p><img src="https://i.imgur.com/S2IcQvP.png" alt=""></p>
<p>具体分析里面的参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">offset:20</div><div class="line">limit:40</div><div class="line">latitude:39.93245</div><div class="line">longitude:116.50097</div></pre></td></tr></table></figure>
<p>有4个参数， <code>offset</code> 和 <code>limit</code> 就很常见了，翻页和每页的数据，至于 <code>latitude</code> 和 <code>longitude</code> 仔细观察就知道，经纬度嘛，把它该修改为你想采集的位置的经纬度就好。</p>
<p>抓包分析之后，接下来采集数据就很简单了，数据字段标识：</p>
<p><code>food_id</code> 是商品ID，接口是：<code>https://www.ele.me/restapi/shopping/v1/foods?food_ids%5B%5D=712859937</code></p>
<p>打开此链接就是商品详情内容</p>
<p><img src="https://i.imgur.com/n5zMOEl.png" alt=""></p>
<p><img src="https://i.imgur.com/YzUyohN.jpg" alt=""></p>
<blockquote>
<p>可爱的小笼包</p>
</blockquote>
<p><code>restaurant_id</code> 是店铺ID，接口 <code>https://www.ele.me/shop/157458556</code></p>
<p>打开就是店铺详情页，当然，也有移动端：<code>https://h5.ele.me/shop/#id=157458556</code></p>
<p>这样进行商品采集就比较轻松了。</p>
<p>好饿，容我先点个外卖。</p>
<hr>
<h1 id="微信公众号抓包分析"><a href="#微信公众号抓包分析" class="headerlink" title="微信公众号抓包分析"></a>微信公众号抓包分析</h1><p>既然都看了饿了么，那也来看看微信吧。</p>
<p>使用Fiddler抓出来的curl命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -k -i --raw -o 0.dat &quot;https://mp.weixin.qq.com/mp/profile_ext?action=getmsg&amp;__biz=MzA4NzA1OTc5Nw==&amp;f=json&amp;offset=20&amp;count=10&amp;appmsg_token=936_iWFH%%252F9haOTPb6GApBj6wXjPGKg9eeU7slzmH2Q~~&quot; -H &quot;User-Agent: Mozilla/5.0 (Linux; Android 7.1.1; MI 6 Build/NMF26X; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/53.0.2785.49 Mobile MQQBrowser/6.2 TBS/043632 Safari/537.36 MicroMessenger/6.5.23.1180 NetType/WIFI Language/zh_CN&quot; -H &quot;Accept-Encoding: gzip, deflate&quot; -H &quot;Accept: */*&quot; -H &quot;Connection: keep-alive&quot; -H &quot;Host: mp.weixin.qq.com&quot; -H &quot;X-Requested-With: XMLHttpRequest&quot; -H &quot;Referer: https://mp.weixin.qq.com/mp/profile_ext?action=home&amp;__biz=MzA4NzA1OTc5Nw==&amp;scene=124&amp;devicetype=android-25&amp;version=26051732&amp;lang=zh_CN&amp;nettype=WIFI&amp;a8scene=3&amp;pass_ticket=lLCqBwwrZ581bGDqrEkRsgjKkWYNPdUBs9grSaFjd79hSX0mdvR8%%2BLUbHoWGGBEp&amp;wx_header=1&quot; -H &quot;Accept-Language: zh-CN,en-US;q=0.8&quot; -H &quot;Cookie: pgv_pvi=4831552512; pgv_si=s989715456; sd_userid=18991505459750403; sd_cookie_crttime=1505459750403; tvfe_boss_uuid=a8e4e4f1ab6cd93d; pgv_info=ssid=s8735681072; pgv_pvid=4201362299; rewardsn=8d8b49dfb1811092eefe; wxtokenkey=19643e9f2ee569a10857d365bba88556d220fd33c1a0666b5d028a72b5bcd901; wxuin=838107840; devicetype=android-25; version=26051732; lang=zh_CN; pass_ticket=lLCqBwwrZ581bGDqrEkRsgjKkWYNPdUBs9grSaFjd79hSX0mdvR8+LUbHoWGGBEp; wap_sid2=CMCF0o8DElxUVDVJR3o1ZldpbDlHWWdjQ0xMU3lxM3BWTUozTFFuZFhrUEJaanhoSmZ1aEVncnU0VzFIaWR3QkVVVXFuTUlMTlkxNFZjTnRCMEt1VHJjV3UzQVNOYWdEQUFBfjD6rvjRBTgMQJRO&quot; -H &quot;Q-UA2: QV=3&amp;PL=ADR&amp;PR=WX&amp;PP=com.tencent.mm&amp;PPVN=6.5.23&amp;TBSVC=43602&amp;CO=BK&amp;COVC=043632&amp;PB=GE&amp;VE=GA&amp;DE=PHONE&amp;CHID=0&amp;LCID=9422&amp;MO= MI6 &amp;RL=1080*1920&amp;OS=7.1.1&amp;API=25&quot; -H &quot;Q-GUID: 569ade09b5931656e4f49098113e88cb&quot; -H &quot;Q-Auth: 31045b957cf33acf31e40be2f3e71c5217597676a9729f1b&quot; -H &quot;Content-Type: application/json; charset=UTF-8&quot; -H &quot;Cache-Control: no-cache, must-revalidate&quot; -H &quot;RetKey: 14&quot; -H &quot;LogicRet: 0&quot;</div></pre></td></tr></table></figure>
<p>直接在浏览器中打开，会提示错误</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">ret: -3,</div><div class="line">errmsg: &quot;no session&quot;,</div><div class="line">cookie_count: 0</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用postman分析，最后Python的代码是</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">url = <span class="string">"https://mp.weixin.qq.com/mp/profile_ext"</span></div><div class="line"></div><div class="line">querystring = &#123;<span class="string">"action"</span>:<span class="string">"getmsg"</span>,<span class="string">"__biz"</span>:<span class="string">"MzA4NzA1OTc5Nw=="</span>,<span class="string">"f"</span>:<span class="string">"json"</span>,<span class="string">"offset"</span>:<span class="string">"20"</span>,<span class="string">"count"</span>:<span class="string">"10"</span>,<span class="string">"appmsg_token"</span>:<span class="string">"936_iWFH%2F9haOTPb6GApBj6wXjPGKg9eeU7slzmH2Q~~"</span>&#125;</div><div class="line"></div><div class="line">headers = &#123;</div><div class="line">    <span class="string">'user-agent'</span>: <span class="string">"Mozilla/5.0 (Linux; Android 7.1.1; MI 6 Build/NMF26X; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/53.0.2785.49 Mobile MQQBrowser/6.2 TBS/043632 Safari/537.36 MicroMessenger/6.5.23.1180 NetType/WIFI Language/zh_CN"</span>,</div><div class="line">    <span class="string">'accept-encoding'</span>: <span class="string">"gzip, deflate"</span>,</div><div class="line">    <span class="string">'accept'</span>: <span class="string">"*/*"</span>,</div><div class="line">    <span class="string">'connection'</span>: <span class="string">"keep-alive"</span>,</div><div class="line">    <span class="string">'host'</span>: <span class="string">"mp.weixin.qq.com"</span>,</div><div class="line">    <span class="string">'x-requested-with'</span>: <span class="string">"XMLHttpRequest"</span>,</div><div class="line">    <span class="string">'referer'</span>: <span class="string">"https://mp.weixin.qq.com/mp/profile_ext?action=home&amp;__biz=MzA4NzA1OTc5Nw==&amp;scene=124&amp;devicetype=android-25&amp;version=26051732&amp;lang=zh_CN&amp;nettype=WIFI&amp;a8scene=3&amp;pass_ticket=lLCqBwwrZ581bGDqrEkRsgjKkWYNPdUBs9grSaFjd79hSX0mdvR8%%2BLUbHoWGGBEp&amp;wx_header=1"</span>,</div><div class="line">    <span class="string">'accept-language'</span>: <span class="string">"zh-CN,en-US;q=0.8"</span>,</div><div class="line">    <span class="string">'cookie'</span>: <span class="string">"pgv_pvi=4831552512; pgv_si=s989715456; sd_userid=18991505459750403; sd_cookie_crttime=1505459750403; tvfe_boss_uuid=a8e4e4f1ab6cd93d; pgv_info=ssid=s8735681072; pgv_pvid=4201362299; rewardsn=8d8b49dfb1811092eefe; wxtokenkey=19643e9f2ee569a10857d365bba88556d220fd33c1a0666b5d028a72b5bcd901; wxuin=838107840; devicetype=android-25; version=26051732; lang=zh_CN; pass_ticket=lLCqBwwrZ581bGDqrEkRsgjKkWYNPdUBs9grSaFjd79hSX0mdvR8+LUbHoWGGBEp; wap_sid2=CMCF0o8DElxUVDVJR3o1ZldpbDlHWWdjQ0xMU3lxM3BWTUozTFFuZFhrUEJaanhoSmZ1aEVncnU0VzFIaWR3QkVVVXFuTUlMTlkxNFZjTnRCMEt1VHJjV3UzQVNOYWdEQUFBfjD6rvjRBTgMQJRO"</span>,</div><div class="line">    <span class="string">'q-ua2'</span>: <span class="string">"QV=3&amp;PL=ADR&amp;PR=WX&amp;PP=com.tencent.mm&amp;PPVN=6.5.23&amp;TBSVC=43602&amp;CO=BK&amp;COVC=043632&amp;PB=GE&amp;VE=GA&amp;DE=PHONE&amp;CHID=0&amp;LCID=9422&amp;MO= MI6 &amp;RL=1080*1920&amp;OS=7.1.1&amp;API=25"</span>,</div><div class="line">    <span class="string">'q-guid'</span>: <span class="string">"569ade09b5931656e4f49098113e88cb"</span>,</div><div class="line">    <span class="string">'q-auth'</span>: <span class="string">"31045b957cf33acf31e40be2f3e71c5217597676a9729f1b"</span>,</div><div class="line">    <span class="string">'content-type'</span>: <span class="string">"application/json; charset=UTF-8"</span>,</div><div class="line">    <span class="string">'cache-control'</span>: <span class="string">"no-cache"</span>,</div><div class="line">    <span class="string">'retkey'</span>: <span class="string">"14"</span>,</div><div class="line">    <span class="string">'logicret'</span>: <span class="string">"0"</span>,</div><div class="line">    &#125;</div><div class="line"></div><div class="line">response = requests.request(<span class="string">"GET"</span>, url, headers=headers, params=querystring, verify=<span class="keyword">False</span>)</div><div class="line"></div><div class="line">print(response.json())</div></pre></td></tr></table></figure>
<p>这个时候的参数有</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">action:getmsg</div><div class="line">__biz:MzA4NzA1OTc5Nw==</div><div class="line">f:json</div><div class="line">offset:20</div><div class="line">count:10</div><div class="line">appmsg_token:936_iWFH%%252F9haOTPb6GApBj6wXjPGKg9eeU7slzmH2Q~~</div></pre></td></tr></table></figure>
<p>目前还不清楚这些参数的作用，再抓一个试试</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">action:getmsg</div><div class="line">__biz:MjM5NzI3NDg4MA==</div><div class="line">f:json</div><div class="line">offset:10</div><div class="line">count:10</div><div class="line">appmsg_token:936_kFNdYU3DJ%%252B%%252BVfHfEGImXqB5DMbIeqtSR75ZFZQ~~</div></pre></td></tr></table></figure>
<p>估计就是 <code>__biz</code> 和 <code>appmsg_token</code> 这两个参数对应不同的公众号</p>
<p>对了，上面的代码会出现一个问题</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">InsecureRequestWarning: Unverified HTTPS request <span class="keyword">is</span> being made. Adding certificate verification <span class="keyword">is</span> strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html<span class="comment">#ssl-warnings</span></div><div class="line">  InsecureRequestWarning)</div></pre></td></tr></table></figure>
<p>解决方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> requests.packages <span class="keyword">import</span> urllib3</div><div class="line">urllib3.disable_warnings()</div></pre></td></tr></table></figure>
<h1 id="App的分析"><a href="#App的分析" class="headerlink" title="App的分析"></a>App的分析</h1><p>App类使用的工具是Fidder，手机和电脑在一个局域网内，先用Fidder配置好端口，然后手机设置代理，ip为电脑的ip，端口为设置的端口，然后如果手机上请求网络内容时，Fidder会显示相应地请求，那么就ok了，分析的大体逻辑基本一致，限制会相对少很多，但是也有几种情况需要注意：</p>
<ul>
<li>加密，App有时候也有一些加密的字段，这个时候,一般来讲都会进行反编译进行分析，找到对应的代码片段，逆推出加密方法；</li>
<li>gzip压缩或者base64编码，base64编码的辨别度较高，有时候数据被gzip压缩了，不过Charles都是有自动解密的；</li>
<li>https证书，有的https请求会验证证书, Fidder提供了证书，可以在官网找到，手机访问，然后信任添加就可以。</li>
</ul>
<p>最后，<strong>祝大家圣诞节快乐</strong></p>
<p><img src="https://i.imgur.com/zQTLLCy.gif" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这是崔斯特的第二十二篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/NRBPj4t.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://zhangslob.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://zhangslob.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="抓包" scheme="https://zhangslob.github.io/tags/%E6%8A%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>【RNG vs SKT】弹幕的自然语言的初步分析</title>
    <link href="https://zhangslob.github.io/2017/12/20/%E3%80%90RNG-vs-SKT%E3%80%91%E5%BC%B9%E5%B9%95%E7%9A%84%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E7%9A%84%E5%88%9D%E6%AD%A5%E5%88%86%E6%9E%90/"/>
    <id>https://zhangslob.github.io/2017/12/20/【RNG-vs-SKT】弹幕的自然语言的初步分析/</id>
    <published>2017-12-20T14:17:35.000Z</published>
    <updated>2017-12-20T14:40:46.728Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是崔斯特的第二十一篇原创文章
</code></pre><p><img src="https://i.imgur.com/xf7kEI8.jpg" alt=""></p>
<a id="more"></a>
<p>前排 @皇族电子竞技俱乐部</p>
<p>==================================</p>
<p>S7中RNG对阵SKT，想必是全世界LOL玩家关注的重点。在比赛开始前，使用小葫芦把斗鱼S7直播间的弹幕都抓下来，想着做一小点分析，看看会得出什么结论。</p>
<p>因为数据量和分析深度等原因，以下内容仅供娱乐观赏</p>
<h1 id="数据采集"><a href="#数据采集" class="headerlink" title="数据采集"></a>数据采集</h1><p>使用小葫芦采集2万多条弹幕数据，RNG对阵SKT斗鱼直播间的弹幕，最后得到约4万可用数据</p>
<h1 id="中文分词"><a href="#中文分词" class="headerlink" title="中文分词"></a>中文分词</h1><p>使用jieba分词，算法如下</p>
<ul>
<li>基于前缀词典实现高效的词图扫描，生成句子中汉字所有可能成词情况所构成的有向无环图 (DAG)</li>
<li>采用了动态规划查找最大概率路径, 找出基于词频的最大切分组合</li>
<li>对于未登录词，采用了基于汉字成词能力的 HMM 模型，使用了 Viterbi 算法</li>
</ul>
<p>简单处理之后，看起来是这样</p>
<p><img src="https://i.imgur.com/Zm6mMti.jpg" alt=""></p>
<p>顺便做个统计，看看都在说什么。不加停用词是这样的，全是 “<strong>666</strong>”</p>
<p><img src="https://i.imgur.com/df59MQw.jpg" alt=""></p>
<p>RNG和牛逼是出现最多的词语，同时也发现“<strong>卢本伟牛逼</strong>”</p>
<p><img src="https://i.imgur.com/6PcshNl.jpg" alt=""></p>
<blockquote>
<p>弱弱问一句“唐梦琼”是谁</p>
</blockquote>
<p>下面是词云，Python的词云做不来不好看，所以我使用的工具 <a href="https://timdream.org/wordcloud/#" target="_blank" rel="external">HTML5 Word Cloud</a></p>
<p><img src="https://i.imgur.com/R6ltujq.jpg" alt=""></p>
<blockquote>
<p>弹幕内容词云</p>
</blockquote>
<p><img src="https://i.imgur.com/PMISApU.jpg" alt=""></p>
<blockquote>
<p>用户昵称词云</p>
</blockquote>
<h1 id="情感分析"><a href="#情感分析" class="headerlink" title="情感分析"></a>情感分析</h1><p>这里使用的是 <a href="https://github.com/isnowfy/snownlp" target="_blank" rel="external">isnowfy/snownlp</a>。SnowNLP是一个python写的类库，可以方便的处理中文文本内容，是受到了<a href="https://github.com/sloria/TextBlob" target="_blank" rel="external">TextBlob</a>的启发而写的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> snownlp <span class="keyword">import</span> SnowNLP</div><div class="line"></div><div class="line">s = SnowNLP(<span class="string">u'这个东西真心很赞'</span>)</div><div class="line">s.sentiments    <span class="comment"># 0.9769663402895832 positive的概率</span></div></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/iEuDbFT.jpg" alt=""></p>
<p>有点难看，直接看数据吧，得到的结果是在 [0，1] 之间的<strong>positive的概率</strong></p>
<p>51659中有44705个大于0.5，占比86.54%，有 6954条弹幕低于0.5，占比13.46%。</p>
<p>弹幕中积极的概率还是相当高的，说明观众还是比较赞赏比赛的。</p>
<p><img src="https://i.imgur.com/FAOkrny.jpg" alt=""></p>
<h1 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h1><p>TF-IDF是信息检索领域非常重要的搜索词重要性度量；tf-idf是一种统计方法，用以评估一字词对于一个文件集或一个语料库中的其中一份文件的重要程度。</p>
<p>词频TF(Term Frequency)</p>
<p>词w在文档d中出现次数count(w, d)和文档d中总词数size(d)的比值：</p>
<p><img src="https://i.imgur.com/OttArJD.jpg" alt=""></p>
<p>基于 TF-IDF 算法的关键词抽取：</p>
<ul>
<li>RNG</li>
<li>rng</li>
<li>贺电</li>
<li>加油</li>
<li>发来</li>
<li>666</li>
<li>6666</li>
<li>66666</li>
<li>恭喜</li>
<li>66666666666666</li>
<li>666666</li>
<li>66666666666</li>
<li>6666666</li>
<li>skt</li>
<li>李哥</li>
<li>66666666666666666666</li>
<li>SKT</li>
<li>66666666</li>
<li>666666666</li>
<li>马甲</li>
</ul>
<p>在没有加上停用词的前提下，可以看到效果并不理想</p>
<p>TextRank是在Google的PageRank算法启发下，针对文本里的句子设计的权重算法，目标是自动摘要。它利用投票的原理，让每一个单词给它的邻居（术语称窗口）投赞成票，票的权重取决于自己的票数。</p>
<p><img src="https://i.imgur.com/AI6dJ5P.jpg" alt=""></p>
<p>基于 TextRank 算法的关键词抽取：</p>
<ul>
<li>发来</li>
<li>贺电</li>
<li>加油</li>
<li>学院</li>
<li>机器人</li>
<li>大学</li>
<li>职业</li>
<li>船长</li>
<li>技术</li>
<li>小炮</li>
<li>没有</li>
<li>解说</li>
<li>中国</li>
<li>经济</li>
<li>开始</li>
<li>无敌</li>
<li>香锅</li>
<li>垃圾</li>
<li>老鼠</li>
<li>科技</li>
</ul>
<h1 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a>特征选择</h1><p>Word2vec是一个将单词表征成向量的形式，它可以把文本内容的处理简化为向量空间中的向量运算，计算出向量空间上的相似度，来表示文本语义上的相似度。</p>
<h2 id="计算相似度："><a href="#计算相似度：" class="headerlink" title="计算相似度："></a>计算相似度：</h2><p>首先是RNG：</p>
<ul>
<li>rng 0.9893965721130371</li>
<li>加油 0.9829007983207703</li>
<li>必胜 0.9790929555892944</li>
<li>Rng 0.9743078947067261</li>
<li>恭喜 0.9733642339706421</li>
<li>中国队 0.9397183656692505</li>
<li>关 0.9283092021942139</li>
<li>&lt; 0.9278833866119385</li>
<li>燕尾港 0.9222617149353027</li>
<li>B 0.9143030643463135</li>
</ul>
<p><strong>RNG加油</strong></p>
<p>看看SKT：</p>
<ul>
<li>skt 0.9911665320396423</li>
<li>皇族 0.972029983997345</li>
<li>＾ 0.970970094203949</li>
<li>稳住 0.9653508067131042</li>
<li>干死 0.9643667340278625</li>
<li>牛比 0.9629441499710083</li>
<li>一起 0.9625348448753357</li>
<li>@ 0.9619969725608826</li>
<li>鸟巢 0.9608791470527649</li>
<li>冠军 0.9608250856399536</li>
</ul>
<p><strong>稳住，干死SKT？</strong></p>
<p>贺电：</p>
<ul>
<li>学院 0.9811943769454956</li>
<li>大学 0.980491042137146</li>
<li>技术 0.9766334295272827</li>
<li>职业 0.9691535234451294</li>
<li>电子科技 0.9668481349945068</li>
<li>发来 0.9619022607803345</li>
<li>科技 0.9594647884368896</li>
<li>山东 0.9568137526512146</li>
<li>重庆 0.9440888166427612</li>
<li>哈尔滨 0.939836859703064</li>
</ul>
<p><strong>山东XX学院发来贺电</strong></p>
<p>加油：</p>
<ul>
<li>必胜 0.9876022934913635</li>
<li>RNG 0.9829007983207703</li>
<li>rng 0.960281252861023</li>
<li>Rng 0.9591789841651917</li>
<li>恭喜 0.9551880359649658</li>
<li>中国队 0.9436988830566406</li>
<li>关 0.94183349609375</li>
<li>！ 0.921385645866394</li>
<li>~ 0.9148629903793335</li>
<li>@ 0.9062787294387817</li>
</ul>
<p><strong>RNG加油，RNG必胜</strong></p>
<p>小狗：</p>
<ul>
<li>吹 0.9970275163650513</li>
<li>无敌 0.996719241142273</li>
<li>神超 0.996111273765564</li>
<li>后期 0.9959050416946411</li>
<li>厉害 0.9957337975502014</li>
<li>凶 0.9957261681556702</li>
<li>强 0.9955072402954102</li>
<li>一个 0.9954395890235901</li>
<li>干 0.99541175365448</li>
<li>起来 0.9952359199523926</li>
</ul>
<p><strong>狗吹？</strong></p>
<p>李哥：</p>
<ul>
<li>还是 0.9825356602668762</li>
<li>电话 0.9700809717178345</li>
<li>承 0.9697628617286682</li>
<li>心脏 0.9686012864112854</li>
<li>陈文泽在 0.9681863188743591</li>
<li>麻痹 0.9680625200271606</li>
<li>响 0.9674116373062134</li>
<li>以为 0.9664229154586792</li>
<li>狗哥 0.9592204689979553</li>
<li>不 0.9589840769767761</li>
</ul>
<p><strong>你李哥还是你李哥</strong></p>
<p>MLXG：</p>
<ul>
<li>宣告 0.9958090782165527</li>
<li>mlxg 0.9953181147575378</li>
<li>死亡 0.995277464389801</li>
<li>b 0.9949076771736145</li>
<li>6666 0.9947425723075867</li>
<li>丑 0.9943945407867432</li>
<li>10 0.9943088293075562</li>
<li>辣鸡 0.9940722584724426</li>
<li>干死 0.9940391778945923</li>
<li>锤 0.9939616918563843</li>
</ul>
<p><strong>香锅和死亡宣告有啥关系</strong></p>
<p>小虎：</p>
<ul>
<li>笑笑 0.9971799850463867</li>
<li>看到 0.9967395663261414</li>
<li>解说 0.9961692690849304</li>
<li>不是 0.9959656000137329</li>
<li>中单 0.9951503872871399</li>
<li>假 0.9950063824653625</li>
<li>为什么 0.9944812655448914</li>
<li>又 0.9942663908004761</li>
<li>么 0.9938984513282776</li>
<li>里奥 0.9937981367111206</li>
</ul>
<p><strong>小虎与加里奥（：</strong></p>
<p>letme：</p>
<ul>
<li>难受 0.9964221715927124</li>
<li>笑话 0.9959778785705566</li>
<li>哦 0.9958946108818054</li>
<li>世界 0.9958213567733765</li>
<li>毒奶 0.9957934021949768</li>
<li>KPL 0.9957884550094604</li>
<li>上单 0.9956253170967102</li>
<li>瓜皮 0.9955945014953613</li>
<li>快 0.9953423738479614</li>
<li>打团 0.9953156113624573</li>
</ul>
<p><strong>真难受啊</strong></p>
<h1 id="To-Do"><a href="#To-Do" class="headerlink" title="To Do"></a>To Do</h1><ol>
<li>可以使用朴素贝叶斯做分类模型</li>
<li>使用机器学习性能评估指标预测精确率和准确率</li>
<li>欢迎补充</li>
</ol>
<h1 id="可参考资料"><a href="#可参考资料" class="headerlink" title="可参考资料"></a>可参考资料</h1><ol>
<li><a href="http://dsqiu.iteye.com/blog/1704960" target="_blank" rel="external">中文分词基本算法介绍</a></li>
<li><a href="https://my.oschina.net/letiantian/blog/352693" target="_blank" rel="external">ICTCLAS 汉语词性标注集</a></li>
<li><a href="http://www.blogjava.net/zhenandaci/category/31868.html" target="_blank" rel="external">文本分类技术</a></li>
<li><a href="http://blog.csdn.net/zhzhl202/article/details/8197109" target="_blank" rel="external">文本分类与SVM</a></li>
<li><a href="http://blog.csdn.net/tbkken/article/details/8062358" target="_blank" rel="external">基于贝叶斯算法的文本分类算法</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzA3MDg0MjgxNQ==&amp;mid=2652389734&amp;idx=1&amp;sn=585d22c0b2aea755a072f5dfefca868b&amp;scene=23&amp;srcid=0530UUkS6jjRAsVoT2icemoY#rd" target="_blank" rel="external">基于libsvm的中文文本分类原型</a></li>
<li><a href="https://cosx.org/2013/03/lda-math-text-modeling#comments" target="_blank" rel="external">LDA-math-文本建模</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_8af1069601019flb.html" target="_blank" rel="external">情感分析资源</a></li>
<li><a href="https://wenku.baidu.com/view/37e374355727a5e9856a61bc.html" target="_blank" rel="external">面向情感分析的特征抽取技术研究</a></li>
<li><a href="http://52opencourse.com/235/%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E7%AC%AC%E4%B8%83%E8%AF%BE-%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90%EF%BC%88sentiment-analysis%EF%BC%89" target="_blank" rel="external">斯坦福大学自然语言处理第七课-情感分析</a></li>
<li><a href="http://blog.jobbole.com/77709/0" target="_blank" rel="external">深度学习、自然语言处理和表征方法</a></li>
<li><a href="http://licstar.net/archives/328" target="_blank" rel="external">Deep Learning in NLP （一）词向量和语言模型</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这是崔斯特的第二十一篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/xf7kEI8.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="NLP" scheme="https://zhangslob.github.io/categories/NLP/"/>
    
    
      <category term="NLP" scheme="https://zhangslob.github.io/tags/NLP/"/>
    
      <category term="自然语言处理" scheme="https://zhangslob.github.io/tags/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
</feed>
