[{"title":"统计学学习笔记（二）数据整理与展示","date":"2017-12-06T14:19:18.000Z","path":"2017/12/06/统计学学习笔记（二）数据整理与展示/","text":"这是崔斯特的第十八篇原创文章 这是统计学的第二篇笔记，主要记录了如何整理数据与展示数据，书本上是这样说，但是我觉得现在人们会更多的叫做数据清洗与数据可视化。命名无所谓，掌握方法就好。 下面是正文。 可以接着这里看哦 统计学学习笔记（一） 数据整理与展示3.1 数据的预处理3.1.1 数据审核 概念：检查数据是否有错误 对于通过调查取得的原始数据，主要从完整性和准确性两个方面去审核 对于通过其他渠道获得的二手数据，主要审核数据的适用性和时效性 3.1.2 数据筛选 删除某些不符合要求的数据和有明显错误的数据 将符合某种特定条件的数据筛选出来，而将不符合特定条件的数据予以剔除 Excel举例 3.1.3 数据排序 概念：按一定顺序将数据排列，以便于研究者通过数据发现一些明显的特征或趋势，找到解决问题的线索 通过数据类型选择排序方式：字母型数据、汉字型数据、数值型数据 这个好像也叫做数据清洗 3.2 品质数据的整理与展示3.2.1 频数与频数分布 落在某一特定类别中的数据个数，成为频数 把各个类别及落在其中的相应频数全部列出，并用表格形式表现出来，成为频数分布 好像不止表格吧 一个总体（或样本）中各个部分的数据与全部数据之比，成为比例 将比例乘以100得到的数值，成为百分比或百分数用%表示 总体（或样本）中各不同类别数值之间的比值，成为比率 3.2.2 品质数据的展示 条形图 饼图 环形图 3.3 数值型数据的整理与展示3.3.1 数据分组 根据统计分析的需要，将原始数据按照某种标准划分成不同的组别，成为数据分组 在组距分组中，一个组的最小值称为下限，一个组的最大值称为上限 每一组的上限和下限之间的中间值称为组中值 3.3.2 数值型数据的图示 分组数据看分布：直方图（histogram） 未分组数据看分布：茎叶图和箱型图 多变量数据的展示：雷达图 3.4 使用图表的注意事项优秀图表特征： 显示数据 让读者把注意力放在图表内容上 避免歪曲 强调数据之间的比较 服务于一个明确的目的 有对图形的描述统计和文字说明 优秀图形应当： 精心设计，有助于洞察问题的实质 使复杂的观点得到简明、确切、高效的阐述 能在最短的时间内、以最少的笔墨给读者提供大量的信息 是多维的 表述数据的真实情况 品质数据您应该会和我一样提问，什么是品质数据？ 品质数据:对产品或商品进行各种化学、物理、力学等试验后所得出的数据。 品质数据：对产品或商品进行各种化学、物理、力学等试验后所得出的数据。 品质型数据：按品质标志分组所得到数据，包括分类数据和顺序数据，他们在整理和图形展示上的方法大体相同。 本文中提到的品质数据应该是后者 数据可视化这里重点说下数据图表的选择。 就我自己的工作中，比较常用的就是直方图、折线图与饼图，词云图（如果算的话）。教材中也说了很多没用过的图，这个东西还是要根据自己的具体业务来操作。 这里推荐一个很好的网站，图表使用 这个网站有多好，你一看便知，不多解释。 数据清洗有人说：一个分析项目基本八成时间在洗数据。那么什么是清洗数据。 数据清洗是指发现并纠正数据文件中可识别的错误的最后一道程序，包括检查数据一致性，处理无效值和缺失值等。与问卷审核不同，录入后的数据清理一般是由计算机而不是人工完成。 数据清洗的方法 解决不完整数据（ 即值缺失）的方法 错误值的检测及解决方法 重复记录的检测及消除方法 不一致性（ 数据源内部及数据源之间）的检测及解决方法 转换构造 数据压缩 老规矩，还是放一点代码 123456789101112131415161718192021222324252627282930313233343536373839import numpy as npimport matplotlib.pyplot as pltimport matplotlib.patches as patchesimport matplotlib.path as pathfig, ax = plt.subplots()# Fixing random state for reproducibilitynp.random.seed(19680801)# histogram our data with numpydata = np.random.randn(1000)n, bins = np.histogram(data, 50)# get the corners of the rectangles for the histogramleft = np.array(bins[:-1])right = np.array(bins[1:])bottom = np.zeros(len(left))top = bottom + n# we need a (numrects x numsides x 2) numpy array for the path helper# function to build a compound pathXY = np.array([[left, left, right, right], [bottom, top, top, bottom]]).T# get the Path objectbarpath = path.Path.make_compound_path_from_polys(XY)# make a patch out of itpatch = patches.PathPatch(barpath)ax.add_patch(patch)# update the view limitsax.set_xlim(left[0], right[-1])ax.set_ylim(bottom.min(), top.max())plt.show() 参考 数据清洗 数据挖掘中常用的数据清洗方法有哪些？","tags":[{"name":"统计学","slug":"统计学","permalink":"https://zhangslob.github.io/tags/统计学/"},{"name":"数据","slug":"数据","permalink":"https://zhangslob.github.io/tags/数据/"}]},{"title":"Scrapy学习实例（二）采集无限滚动页面","date":"2017-12-03T11:48:53.000Z","path":"2017/12/03/Scrapy学习实例（二）采集无限滚动页面/","text":"这是崔斯特的第十七篇原创文章 上一篇写的是采集虎嗅网首页的新闻数据，有朋友对我说，采集多页试试看。后来研究下，虎嗅网首页是POST加载，Form Data中携带参数，所以只需要带上一个循环就好了。这是我最初的想法，先让我们看看Scrapy中如何采集无限滚动页面？ 先举个栗子，采集网站是quotes 分析网页 下拉时，会发现更多新的请求，观察这些请求，返回的都是json数据，也就是我们所需的，再看看他们的不同，也就是参数的改变，完整链接是： 123http://spidyquotes.herokuapp.com/api/quotes?page=2http://spidyquotes.herokuapp.com/api/quotes?page=3http://spidyquotes.herokuapp.com/api/quotes?page=4 这就很清晰了。 返回的是json，我们需要解析，然后提取数据，那我们如何知道最多有多少条json呢，文件已经告诉我们了： has_next:true 创建项目12345scrapy startproject quotecd quotescrapy genspider spiderquote http://spidyquotes.herokuapp.com/scroll 定义Item查看网站，采集text、author和tags这三个 123456789import scrapyclass QuoteItem(scrapy.Item): # define the fields for your item here like: # name = scrapy.Field() text = scrapy.Field() author = scrapy.Field() tag = scrapy.Field() 编写spider1234567891011121314151617181920212223# -*- coding: utf-8 -*-import scrapyimport jsonclass SpiderquoteSpider(scrapy.Spider): name = 'spiderquote' quotes_base_url = 'http://spidyquotes.herokuapp.com/api/quotes?page=%s' start_urls = [quotes_base_url % 1] download_delay = 1.5 def parse(self, response): data = json.loads(response.body) for item in data.get('quotes', []): yield &#123; 'text': item.get('text'), 'author': item.get('author', &#123;&#125;).get('name'), 'tags': item.get('tags'), &#125; if data['has_next']: next_page = data['page'] + 1 yield scrapy.Request(self.quotes_base_url % next_page) 运行爬虫，然后就可以看到结果了。 应用到虎嗅网那么如何应用到虎嗅网呢？首先还是要去分析网页。 虎嗅网的参数有3个： 123huxiu_hash_code:13a3a353c52d424e1e263dda4d594e59page:3last_dateline:1512026700 我们知道page就是翻页页码，huxiu_hash_code是一个不变的字符，last_dateline看起来像unix时间戳，验证确实如此。这个时间戳有必要带上吗，我想验证试试看。 在postman中测试，不带上last_dateline也是可以返回数据，并且这个json中已经告诉我们一共有多少页： &quot;total_page&quot;: 1654 在主函数中我们可以依葫芦画瓢 12345678910111213141516171819202122232425262728293031# -*- coding: utf-8 -*-import scrapyfrom huxiu.items import HuxiuItemimport jsonfrom lxml import etreeclass HuxiuSpider(scrapy.Spider): name = 'HuXiu' def start_requests(self): url = 'https://www.huxiu.com/v2_action/article_list' for i in range(1, 10): # FormRequest 是Scrapy发送POST请求的方法 yield scrapy.FormRequest( url = url, formdata = &#123;\"huxiu_hash_code\" : \"13a3a353c52d424e1e263dda4d594e59\", \"page\" : str(i)&#125;, callback = self.parse ) def parse(self, response): item = HuxiuItem() data = json.loads(response.text) s = etree.HTML(data['data']) item['title'] = s.xpath('//a[@class=\"transition msubstr-row2\"]/text()') item['link'] = s.xpath('//a[@class=\"transition msubstr-row2\"]/@href') item['author'] = s.xpath('//span[@class=\"author-name\"]/text()') item['introduction'] = s.xpath('//div[@class=\"mob-sub\"]/text()') yield item 输出的数据有点难看，是一段一段的。。 因为data[&#39;data&#39;]是一段html文件，所以这里选择的是xpath，不清楚这里是否直接使用Scrapy的xpath解析工具，如果可以，欢迎在评论中告诉我。 本篇收获 Scrapy采集动态网站：分析网页 使用Scrapy模拟post请求方法，文档在这 刘亦菲好漂亮 待做事宜 完善文件保存与解析 全站抓取大概用了3分钟，速度有点慢 若想评论，先翻长城","tags":[{"name":"爬虫","slug":"爬虫","permalink":"https://zhangslob.github.io/tags/爬虫/"},{"name":"Scrapy","slug":"Scrapy","permalink":"https://zhangslob.github.io/tags/Scrapy/"},{"name":"虎嗅","slug":"虎嗅","permalink":"https://zhangslob.github.io/tags/虎嗅/"}]},{"title":"统计学学习笔记（一）","date":"2017-11-30T15:45:14.000Z","path":"2017/11/30/统计学学习笔记（一）/","text":"这是崔斯特的第十六篇原创文章 这是学习统计学的第一篇笔记，以后尽量都放在这里吧。 发现使用hexo发文章的快捷键： hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 下面是正文： 1、统计中的基本概念 总体和样本。总体：所研究的全部个体；样本：总体中的一部分 参数和统计量。参数：用来描述总体特征的概括性数字度量；统计量：用来描述样本特征的概括性数字度量。 变量。变量、分类变量（事物类别的一个名称）、顺序变量（事物有序类别的一个名称）、数值型变量、离散型变量（只能取可数值的变量）、连续性变量。 2、数据的收集1、数据的间接来源二手数据：公开出版的或公开报道的数据。 2、数据的直接来源（1）统计调查方式 抽样调查：经济性、时效性强、适应面广、准确性高。 普查：一次性或周期性、规定调查时间、数据比较准确、范围比较狭窄。 （2）数据的收集方法 询问调查：访问调查、邮寄调查、电话调查、计算机辅助调查、座谈会、个别深度访问。 观察与实验：观察法、实验法。 竟然没网络爬虫，嘤嘤嘤 3、调查设计（1）调查方案设计 调查目的 调查对象和调查单位 调查项目和调查表 （2）调查问卷设计a.调查问卷的基本结构： 开头部分（问候语、填表说明、问卷编号 ） 甄别部分：过滤——筛选掉不需要的部分——针对特定人群 主体部分：调查的全部问题 背景部分：被调查者的背景资料 b.提问项目的设计： 提问的内容尽可能短 用词要确切、通俗 一个项目只包含一项内容 避免诱导性提问 避免否定式提问 避免敏感性问题 c.回答项目的设计 开放性问题：灵活；整理资料困难 封闭性问题：两项选择法、多项选择法（单项选择型、多项选择型、限制选择型） 顺序选择法：按顺序排列 评定尺度法：和NPS有点像哦 双向列联法：表格表现 d.问题顺序的设计 问题的安排硬具有逻辑性 问题的顺序应先难后易 能引起被调查者兴趣的问题放在最前面 开放性问题放在后面 （3）统计数据的质量a.统计数据的误差b.统计数据的误差 精度 准确性 关联性 及时性 一致性 最低成本 这是统计学基础 第三版 (贾俊平)的记录，看了前两章，感觉受益匪浅，尤其是问卷的设计，比较系统、完整，可以应用在以后的工作中。 书名：统计学基础 第三版 作者：贾俊平 出版社：中国人民大学出版社 最后说一说为什么要学统计学最直接原因是工资高。可以去拉勾上看看“数据分析”、“数据挖掘”、“数据科学家”等职位，他们对学历的要求基本上都会有“统计学”。 对于我这种文科生来说，学习统计学是必经之路。敲门砖啊！ 最后记录下最近学习的数据科学的流程： 业务理解 分析方法 数据要求 收集数据 数据理解 数据准备 建模（use and test） 模型评估 部署与反馈 自己判断，缺少的是业务理解，对相关的业务知识了解太少；分析方法知道的太少了，接下来会着重学习一些常见的算法；数据准备也是一个大坑，不过好在自己有一些Python基础；建模才是最难的，慢慢来吧。 最近几天需要个自己定一个学习任务，内容主要包括：统计学基础、常见算法、pandas处理数据及可视化、业务理解、Scrapy框架学习、前端（没错，学点前端很有必要） 欢迎加我微信，一起来学习，嘤嘤嘤 下面是常见的分析方法","tags":[{"name":"统计学","slug":"统计学","permalink":"https://zhangslob.github.io/tags/统计学/"},{"name":"数据","slug":"数据","permalink":"https://zhangslob.github.io/tags/数据/"}]},{"title":"Scrapy学习实例（一）","date":"2017-11-29T13:52:32.000Z","path":"2017/11/29/Scrapy学习实例（一）/","text":"这是崔斯特的第十五篇原创文章 Hello，我又回来啦。以后就在这发文章吧，记录自己的学习历程。 举头卖竹鼠，低头嘤嘤嘤。 我会记录自己对Scrapy的学历经历，更重要的是理解。下面就开始吧，首先当然是创建一个项目啦！ 我选择爬取虎嗅网首页的新闻列表。 1、创建项目1234567891011121314151617F:\\Python\\huxiu&gt;scrapy startproject huxiuNew Scrapy project 'huxiu', using template directory 'c:\\\\users\\\\administrator\\\\appdata\\\\local\\\\programs\\\\python\\\\python36\\\\lib\\\\site-packages\\\\scrapy\\\\templates\\\\project', created in: F:\\Python\\huxiu\\huxiuYou can start your first spider with: cd huxiu scrapy genspider example example.comF:\\Python\\huxiu&gt;cd huxiuF:\\Python\\huxiu\\huxiu&gt;scrapy genspider huxiu huxiu.comCannot create a spider with the same name as your projectF:\\Python\\huxiu\\huxiu&gt;scrapy genspider HuXiu huxiu.comCreated spider 'HuXiu' using template 'basic' in module: huxiu.spiders.HuXiu 记住爬虫和项目命名不一样 2、定义Item在item.py中创建scrapy.Item类，并定义它的类型为scrapy.Field的属性。 123456789101112import scrapyclass HuxiuItem(scrapy.Item): # define the fields for your item here like: # name = scrapy.Field() title = scrapy.Field() #标题 link = scrapy.Field() #链接 author = scrapy.Field() #作者 introduction = scrapy.Field() #简介 time = scrapy.Field() #时间 3、编写Spider 一目了然 在huxiu/spider/HuXiu.py中编写代码 12345678910111213141516171819202122# -*- coding: utf-8 -*-import scrapyfrom huxiu.items import HuxiuItemclass HuxiuSpider(scrapy.Spider): name = 'HuXiu' allowed_domains = ['huxiu.com'] start_urls = ['http://huxiu.com/'] def parse(self, response): for s in response.xpath('//div[@class=\"mod-info-flow\"]/div/div[@class=\"mob-ctt\"]'): item = HuxiuItem() item['title'] = s.xpath('h2/a/text()')[0].extract() item['link'] = s.xpath('h2/a/@href')[0].extract() url = response.urljoin(item['link']) item['author'] = s.xpath('div/a/span/text()')[0].extract() item['introduction'] = s.xpath('div[2]/text()')[0].extract() item['time'] = s.xpath('div/span/text()')[0].extract() print(item) 在终端输入命令 scrapy crawl HuXiu 部分输出 4、深度爬取哈哈，这里借用造数的命名了。其实就是爬取新闻详情页。1234567891011121314151617181920212223242526272829303132333435# -*- coding: utf-8 -*-import scrapyfrom huxiu.items import HuxiuItemclass HuxiuSpider(scrapy.Spider): name = 'HuXiu' allowed_domains = ['huxiu.com'] start_urls = ['http://huxiu.com/'] def parse(self, response): for s in response.xpath('//div[@class=\"mod-info-flow\"]/div/div[@class=\"mob-ctt\"]'): item = HuxiuItem() item['title'] = s.xpath('h2/a/text()')[0].extract() item['link'] = s.xpath('h2/a/@href')[0].extract() url = response.urljoin(item['link']) item['author'] = s.xpath('div/a/span/text()')[0].extract() item['introduction'] = s.xpath('div[2]/text()')[0].extract() item['time'] = s.xpath('div/span/text()')[0].extract() #print(item) yield scrapy.Request(url, callback=self.parse_article) def parse_article(self, response): item = HuxiuItem() detail = response.xpath('//div[@class=\"article-wrap\"]') item['title'] = detail.xpath('h1/text()')[0].extract().strip() item['link'] = response.url item['author'] = detail.xpath('div[@class=\"article-author\"]/span/a/text()')[0].extract() item['time'] = detail.xpath('div[@class=\"article-author\"]/div[@class=\"column-link-box\"]/span/text()')[0].extract() print(item) word = detail.xpath('div[5]') print(word[0].xpath('string(.)').extract()[0]) yield item 输出结果 说明一点，如何使用xpath获得多个标签下的文本，这里参考了解决：xpath取出指定多标签内所有文字text，把文章详细内容打印出来，但是会遇到一些错误，可以使用goose来试试看。 Python-Goose - Article Extractor1234567891011&gt;&gt;&gt; from goose import Goose&gt;&gt;&gt; from goose.text import StopWordsChinese&gt;&gt;&gt; url = 'http://www.bbc.co.uk/zhongwen/simp/chinese_news/2012/12/121210_hongkong_politics.shtml'&gt;&gt;&gt; g = Goose(&#123;'stopwords_class': StopWordsChinese&#125;)&gt;&gt;&gt; article = g.extract(url=url)&gt;&gt;&gt; print article.cleaned_text[:150]香港行政长官梁振英在各方压力下就其大宅的违章建筑（僭建）问题到立法会接受质询，并向香港民众道歉。梁振英在星期二（12月10日）的答问大会开始之际在其演说中道歉，但强调他在违章建筑问题上没有隐瞒的意图和动机。一些亲北京阵营议员欢迎梁振英道歉，且认为应能获得香港民众接受，但这些议员也质问梁振英有 参考文章： Scrapy笔记02- 完整示例 解决：xpath取出指定多标签内所有文字text 若想评论，先翻长城","tags":[{"name":"爬虫","slug":"爬虫","permalink":"https://zhangslob.github.io/tags/爬虫/"},{"name":"Scrapy","slug":"Scrapy","permalink":"https://zhangslob.github.io/tags/Scrapy/"},{"name":"虎嗅","slug":"虎嗅","permalink":"https://zhangslob.github.io/tags/虎嗅/"}]},{"title":"爬虫三步走（二）解析源码","date":"2017-05-26T12:15:20.000Z","path":"2017/05/26/爬虫三步走（二）解析源码/","text":"这是崔斯特的第十四篇原创文章 爬虫三步走：获取源码、解析源码、数据储存 上一期讲了如何获取网页源码的方法，这一期说一说怎么从其中获得我们需要的和数据。 解析网页的方法很多，最常见的就是BeautifulSoup和正则了，其他的像xpath、PyQuery等等，其中我觉得最好用的就是xpath了，xpath真的超级简单好用，学了之后再也不想取用美丽汤了。下面介绍xpath的使用方法。 首先需要安装lxml，windows下安装lxml是个大坑，知乎上有人给出了解决方法Python LXML模块死活安装不了怎么办？ 详细的用法可以参考爬虫入门到精通-网页的解析（xpath） 在这里我们尝试使用xpath来迅速获取数据。 例如想要获熊猫直播虎牙直播下主播的ID import requests from lxml import etree url = &apos;http://www.huya.com/g/lol&apos; headers = {&apos;User-Agent&apos;:&apos;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36&apos;} res = requests.get(url,headers=headers).text s = etree.HTML(res) print(s.xpath(&apos;//i[@class=&quot;nick&quot;]/text()&apos;)) 输出： 下面一步步讲解为什么这样做。 import requests from lxml import etree 首先是导入模块，requests很常见，但是xpath需要 from lxml import etree，你肯点想问为什么这样写，回答是“我也不知道”，就像是约定俗成的东西一样。 url = &apos;http://www.huya.com/g/lol&apos; headers = {&apos;User-Agent&apos;:&apos;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36&apos;} res = requests.get(url,headers=headers).text 这三步就是平常获取源码的过程，很简单。 s = etree.HTML(res) 给一个html，返回xml结构，为什么这样写？？答案和上面一样。最重要的就是下面的这一步： s.xpath(&apos;//i[@class=&quot;nick&quot;]/text()&apos;) 按下F12看到“爱拍-古手羽”在i标签下，接着我们右键打开“查看网页源代码”，搜索“爱拍-古手羽” 确实找到了“爱拍-古手羽”就在i标签下，那我们就把他提出来吧！ s.xpath(&#39;//i[@class=&quot;nick&quot;]/text()&#39;) 这个段代码意思是，找到class为“nick”的i标签，返回其中的文本信息，当然你也可以返回i标签中的title，写法如下： s.xpath(&#39;//i[@class=&quot;nick&quot;]/@title&#39;) text()返回的是文本信息，@title则是标签里面的具体属性的值，例如我想知道观众人数 import requests from lxml import etree url = &apos;http://www.huya.com/g/lol&apos; headers = {&apos;User-Agent&apos;:&apos;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36&apos;} res = requests.get(url,headers=headers).text s = etree.HTML(res) print(s.xpath(&apos;//i[@class=&quot;js-num&quot;]/text()&apos;)) 只需在原来基础上修改一个属性，i标签class为“js-num”里面的值 print(s.xpath(&apos;//i[@class=&quot;js-num&quot;]/text()&apos;)) 返回结果是： 说明：在运行代码中，发现虎牙反爬虫做得挺好的，瞬间就识别爬虫身份并封了IP，所以我换了IP去访问，至于如何设置代理，在我的上一篇文章中有说到，去看看吧。 在实际操作中，你可能会遇到更加复杂的情况，所以一定记得去看看详细的教程。爬虫入门到精通-网页的解析（xpath） 小广告：喜欢爬虫、数据的可以关注一下我的微信公众号（zhangslob），多多交流。","tags":[{"name":"爬虫","slug":"爬虫","permalink":"https://zhangslob.github.io/tags/爬虫/"},{"name":"Python入门","slug":"Python入门","permalink":"https://zhangslob.github.io/tags/Python入门/"}]},{"title":"爬虫三步走（一）获取源码","date":"2017-05-25T07:21:06.000Z","path":"2017/05/25/爬虫三步走（一）获取源码/","text":"这是崔斯特的第十三篇原创文章 爬虫三步走：获取源码、解析源码、数据储存 举个例子，爬一爬知乎日报的相关数据 知乎日报 - 每天 3 次，每次 7 分钟 1、获取源码12345import requests url = 'http://daily.zhihu.com/'res = requests.get(url).textprint(res) 个人喜欢requests，直接访问，发现返回500错误 C:\\Python35\\python.exe F:/PyCharm/爬虫/daily.py &lt;html&gt;&lt;body&gt;&lt;h1&gt;500 Server Error&lt;/h1&gt; An internal server error occured. &lt;/body&gt;&lt;/html&gt; Process finished with exit code 0 根据经验判断，是知乎禁止爬虫，需要加上一些伪装，让我们看看加上浏览器伪装效果 import requests headers = {&apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36&apos;} url = &apos;http://daily.zhihu.com/&apos; res = requests.get(url,headers=headers).text print(res) 看看结果，已经返回我们需要的数据 C:\\Python35\\python.exe F:/PyCharm/爬虫/daily.py &lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;&lt;head&gt;&lt;title&gt;知乎日报 - 每天 3 次，每次 7 分钟&lt;/title&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;&lt;meta name=&quot;description&quot; content=&quot;在中国，资讯类移动应用的人均阅读时长是 5 分钟，而在知乎日报，这个数字是 21。以独有的方式为你提供最高质、最深度、最有收获的阅读体验。&quot;&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/base.auto.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/new_home_v3.auto.css&quot;&gt;&lt;script src=&quot;/js/jquery.1.9.1.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;/js/new_index_v3/home.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;shortcut icon&quot; href=&quot;/favicon.ico&quot; type=&quot;image/x-icon&quot;&gt;&lt;base target=&quot;_blank&quot;&gt;&lt;style&gt;h1,h2,h3 {padding: 0;margin:0}&lt;/style&gt;&lt;base target=&quot;_blank&quot;&gt;&lt;/head&gt;&lt;body class=&quot;home&quot;&gt;&lt;a href=&quot;javascript:;&quot; title=&quot;回到顶部&quot; class=&quot;back-to-top&quot;&gt;&lt;/a&gt;&lt;div class=&quot;header navbar-fixed-top&quot;&gt;&lt;div class=&quot;container-fixed-width clearfix&quot;&gt;&lt;div class=&quot;top-nav-link&quot;&gt;&lt;a href=&quot;javascript:;&quot; data-offset=&quot;470&quot;&gt;&lt;span&gt;浏览内容&lt;/span&gt;&lt;/a&gt;&lt;a href=&quot;javascript:;&quot; data-offset=&quot;0&quot; class=&quot;active&quot;&gt;&lt;span&gt;App 下载&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;h1 class=&quot;logo&quot;&gt;&lt;a href=&quot;http://daily.zhihu.com/&quot; title=&quot;知乎日报&quot; class=&quot;link-logo&quot;&gt;知乎日报&lt;/a&gt;&lt;/h1&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;download&quot;&gt; ... 但是这种写法是否可以应用到所有的网站，答案是“不” 2、代理设置有时候同一个IP去爬取同一网站上的内容，久了之后就会被该网站服务器屏蔽。解决方法就是更换IP。这个时候，在对方网站上，显示的不是我们真实地IP地址，而是代理服务器的IP地址。 国内高匿免费HTTP代理IP_国内高匿 西刺代理提供了很多可用的国内IP，可以直接拿来使用。 那么如何在爬虫里加入代理呢，看看requests的官方文档怎么说。高级用法 - Requests 2.10.0 文档 如果需要使用代理，你可以通过为任意请求方法提供 proxies 参数来配置单个请求: import requests proxies = { &quot;http&quot;: &quot;http://10.10.1.10:3128&quot;, &quot;https&quot;: &quot;http://10.10.1.10:1080&quot;, } requests.get(&quot;http://example.org&quot;, proxies=proxies) 用法很简单，加入proxies参数即可 import requests proxies = { &quot;http&quot;: &quot;http://121.201.24.248：8088&quot;, &quot;https&quot;: &quot;http://36.249.194.52：8118&quot;, } headers = {&apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36&apos;} url = &apos;http://daily.zhihu.com/&apos; res = requests.get(url,headers=headers，proxies=proxies).text print(len(res)) 为了便于测试，只打印出返回数据的长度 C:\\Python35\\python.exe F:/PyCharm/爬虫/daily.py 10830 Process finished with exit code 0 发现代理服务器成功爬取知乎日报的信息，内容是10830，故意把代理IP写错一位数，看看结果 import requests proxies = { &quot;http&quot;: &quot;http://121.201.24.248：8088&quot;, &quot;https&quot;: &quot;http://36.249.194.52: 222&quot;, } headers = {&apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36&apos;} url = &apos;http://daily.zhihu.com/&apos; res = requests.get(url,headers=headers,proxies=proxies).text print(len(res)) 我们把”https”: “http://36.249.194.52：8118&quot;修改为&quot;https“: “http://36.249.194.52: 222”，此时返回的结果如下，发现不能获取网页数据。所以，在使用代理服务器爬去网站时，如果出现异常，要考虑代理IP是否失效了。 当然你也可以写一个爬虫，实时抓取最新的代理IP用来爬取。 Traceback (most recent call last): File &quot;F:/PyCharm/爬虫/daily.py&quot;, line 9, in &lt;module&gt; res = requests.get(url,headers=headers,proxies=proxies).text File &quot;C:\\Python35\\lib\\site-packages\\requests\\api.py&quot;, line 70, in get return request(&apos;get&apos;, url, params=params, **kwargs) File &quot;C:\\Python35\\lib\\site-packages\\requests\\api.py&quot;, line 56, in request return session.request(method=method, url=url, **kwargs) File &quot;C:\\Python35\\lib\\site-packages\\requests\\sessions.py&quot;, line 488, in request resp = self.send(prep, **send_kwargs) File &quot;C:\\Python35\\lib\\site-packages\\requests\\sessions.py&quot;, line 609, in send r = adapter.send(request, **kwargs) File &quot;C:\\Python35\\lib\\site-packages\\requests\\adapters.py&quot;, line 485, in send raise ProxyError(e, request=request) requests.exceptions.ProxyError: HTTPConnectionPool(host=&apos;121.201.24.248：8088&apos;, port=80): Max retries exceeded with url: http://daily.zhihu.com/ (Caused by ProxyError(&apos;Cannot connect to proxy.&apos;, NewConnectionError(&apos;&lt;requests.packages.urllib3.connection.HTTPConnection object at 0x0000000003860DA0&gt;: Failed to establish a new connection: [Errno 11004] getaddrinfo failed&apos;,))) 3、模拟登录有些网站是需要登录才能看到信息的，例如知乎，直接用requests获取知乎首页信息，返回数据是需要你登录的，只有登录了才能看到数据。 &lt;button type=&quot;button&quot; class=&quot;signin-switch-button&quot;&gt;手机验证码登录&lt;/button&gt; &lt;a class=&quot;unable-login&quot; href=&quot;#&quot;&gt;无法登录？&lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;social-signup-wrapper&quot; data-za-module=&quot;SNSSignIn&quot;&gt; &lt;span class=&quot;name js-toggle-sns-buttons&quot;&gt;社交帐号登录&lt;/span&gt; &lt;div class=&quot;sns-buttons&quot;&gt; &lt;a title=&quot;微信登录&quot; class=&quot;js-bindwechat&quot; href=&quot;#&quot;&gt;&lt;i class=&quot;sprite-index-icon-wechat&quot;&gt;&lt;/i&gt;&lt;/a&gt; &lt;a title=&quot;微博登录&quot; class=&quot;js-bindweibo&quot; href=&quot;#&quot;&gt;&lt;i class=&quot;sprite-index-icon-weibo&quot;&gt;&lt;/i&gt;&lt;/a&gt; &lt;a title=&quot;QQ 登录&quot; class=&quot;js-bindqq&quot; href=&quot;#&quot;&gt;&lt;i class=&quot;sprite-index-icon-qq&quot;&gt;&lt;/i&gt;&lt;/a&gt; &lt;/div&gt; 再次回到官方文档快速上手 - Requests 2.10.0 文档 如果某个响应中包含一些 cookie，你可以快速访问它们： &gt;&gt;&gt; url = &apos;http://example.com/some/cookie/setting/url&apos; &gt;&gt;&gt; r = requests.get(url) &gt;&gt;&gt; r.cookies[&apos;example_cookie_name&apos;] &apos;example_cookie_value&apos; 要想发送你的cookies到服务器，可以使用 cookies 参数： &gt;&gt;&gt; url = &apos;http://httpbin.org/cookies&apos; &gt;&gt;&gt; cookies = dict(cookies_are=&apos;working&apos;) &gt;&gt;&gt; r = requests.get(url, cookies=cookies) &gt;&gt;&gt; r.text &apos;{&quot;cookies&quot;: {&quot;cookies_are&quot;: &quot;working&quot;}}&apos; 具体的分析过程可以参考xchaoinfo所写的文章和视频，讲解十分清晰Python 模拟登录哪些事儿 - 知乎专栏 下面是代码 import requests from bs4 import BeautifulSoup import os, time import re # import http.cookiejar as cookielib # 构造 Request headers agent = &apos;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Mobile Safari/537.36&apos; headers = { &quot;Host&quot;: &quot;www.zhihu.com&quot;, &quot;Referer&quot;: &quot;https://www.zhihu.com/&quot;, &apos;User-Agent&apos;: agent } ######### 构造用于网络请求的session session = requests.Session() # session.cookies = cookielib.LWPCookieJar(filename=&apos;zhihucookie&apos;) # try: # session.cookies.load(ignore_discard=True) # except: # print(&apos;cookie 文件未能加载&apos;) ############ 获取xsrf_token homeurl = &apos;https://www.zhihu.com&apos; homeresponse = session.get(url=homeurl, headers=headers) homesoup = BeautifulSoup(homeresponse.text, &apos;html.parser&apos;) xsrfinput = homesoup.find(&apos;input&apos;, {&apos;name&apos;: &apos;_xsrf&apos;}) xsrf_token = xsrfinput[&apos;value&apos;] print(&quot;获取到的xsrf_token为： &quot;, xsrf_token) ########## 获取验证码文件 randomtime = str(int(time.time() * 1000)) captchaurl = &apos;https://www.zhihu.com/captcha.gif?r=&apos;+\\ randomtime+&quot;&amp;type=login&quot; captcharesponse = session.get(url=captchaurl, headers=headers) with open(&apos;checkcode.gif&apos;, &apos;wb&apos;) as f: f.write(captcharesponse.content) f.close() # os.startfile(&apos;checkcode.gif&apos;) captcha = input(&apos;请输入验证码：&apos;) print(captcha) ########### 开始登陆 headers[&apos;X-Xsrftoken&apos;] = xsrf_token headers[&apos;X-Requested-With&apos;] = &apos;XMLHttpRequest&apos; loginurl = &apos;https://www.zhihu.com/login/email&apos; postdata = { &apos;_xsrf&apos;: xsrf_token, &apos;email&apos;: &apos;邮箱@qq.com&apos;, &apos;password&apos;: &apos;密码&apos; } loginresponse = session.post(url=loginurl, headers=headers, data=postdata) print(&apos;服务器端返回响应码：&apos;, loginresponse.status_code) print(loginresponse.json()) # 验证码问题输入导致失败: 猜测这个问题是由于session中对于验证码的请求过期导致 if loginresponse.json()[&apos;r&apos;]==1: # 重新输入验证码，再次运行代码则正常。也就是说可以再第一次不输入验证码，或者输入一个错误的验证码，只有第二次才是有效的 randomtime = str(int(time.time() * 1000)) captchaurl = &apos;https://www.zhihu.com/captcha.gif?r=&apos; + \\ randomtime + &quot;&amp;type=login&quot; captcharesponse = session.get(url=captchaurl, headers=headers) with open(&apos;checkcode.gif&apos;, &apos;wb&apos;) as f: f.write(captcharesponse.content) f.close() os.startfile(&apos;checkcode.gif&apos;) captcha = input(&apos;请输入验证码：&apos;) print(captcha) postdata[&apos;captcha&apos;] = captcha loginresponse = session.post(url=loginurl, headers=headers, data=postdata) print(&apos;服务器端返回响应码：&apos;, loginresponse.status_code) print(loginresponse.json()) ##########################保存登陆后的cookie信息 # session.cookies.save() ############################判断是否登录成功 profileurl = &apos;https://www.zhihu.com/settings/profile&apos; profileresponse = session.get(url=profileurl, headers=headers) print(&apos;profile页面响应码：&apos;, profileresponse.status_code) profilesoup = BeautifulSoup(profileresponse.text, &apos;html.parser&apos;) div = profilesoup.find(&apos;div&apos;, {&apos;id&apos;: &apos;rename-section&apos;}) print(div) 好了关于爬虫的第一步，获取源码这一节讲了很多，其实大多数网站加上User-Agent和代理IP就可以正常爬取。下一节会讲讲如何利用xpath来解析网页，获取我们想要的数据。 喜欢爬虫、数据的可以关注一下我的微信公众号，多多交流。","tags":[{"name":"爬虫","slug":"爬虫","permalink":"https://zhangslob.github.io/tags/爬虫/"},{"name":"Python入门","slug":"Python入门","permalink":"https://zhangslob.github.io/tags/Python入门/"}]},{"title":"知乎上妹子都爱取啥名？","date":"2017-05-20T09:45:48.000Z","path":"2017/05/20/知乎上妹子都爱取啥名？/","text":"这是崔斯特的第十二篇原创文章 闲来无事上知乎，看到好多妹子，于是抓取一波。 目标网址：轮子哥带我逛知乎 - 收藏夹 - 知乎 目标：抓取妹子的ID 1、抓取这次并没有使用Python做爬虫，使用工具来，速度更快。造数 - 新一代智能云爬虫 不到十分钟就完成了，遗失了部分数据，但是无所谓啦。保存下来，分析分析。 2、分析 使用pandas操作文件 import pandas as pd fp = pd.read_excel(&apos;D:\\Backup\\桌面\\lunzige.xlsx&apos;) fp name = fp[&apos;name&apos;].tolist() li1 = list(set(name)) li1 [&apos;阿蕾&apos;, &apos;杨面&apos;, &apos;陈10&apos;, &apos;杨顺顺&apos;, &apos;霧橤&apos;, &apos;真顺顺真&apos;, &apos;谢椿明&apos;, &apos;刀刀&apos;, &apos;水枪大帝&apos;, &apos;倾浅&apos;, &apos;Listening&apos;, &apos;小火龙&apos;, &apos;包子琛&apos;, &apos;杨笋笋&apos;, &apos;蜉蝣&apos;, &apos;十元&apos;, &apos;靡靡之音&apos;, &apos;Real机智张&apos;, &apos;陈梓小童鞋&apos;, &apos;花甲&apos;, &apos;窗里窗外&apos;, &apos;刘梓乔&apos;, &apos;璇璇97&apos;, &apos;Olivia菊香小姐姐&apos;, &apos;牛奶小夏目&apos;, &apos;周依宁&apos;, &apos;万阿咸&apos;, &apos;一蓑烟雨任平生&apos;, &apos;来都来了&apos;, &apos;就像周一&apos;, &apos;Mc蛋蛋&apos;, &apos;秉剑侯&apos;, &apos;李大梦Lee&apos;, &apos;Diss锐雯&apos;, &apos;雨音眞白&apos;, &apos;半仙幺幺&apos;, &apos;Natsuki是只蠢兔纸&apos;, &apos;夏冰莹&apos;, &apos;guuweihai&apos;, &apos;阿舞&apos;, &apos;肖柚妮&apos;, &apos;墨脱要开&apos;, &apos;芷珞&apos;, &apos;舒西婷&apos;, &apos;Childe0Q&apos;, &apos;被压扁的海螺&apos;, &apos;snow arc&apos;, &apos;灰灰灰灰灰plus&apos;, &apos;小兔子菲呀&apos;, &apos;士多啤梨羊咩咩&apos;, &apos;李小可可&apos;, &apos;谁来拽我的尾巴&apos;, &apos;飞鸽之舞&apos;, &apos;小美&apos;, &apos;樱雪绫sama&apos;, &apos;zshiyao&apos;, &apos;王漠里&apos;, &apos;Slivan&apos;, &apos;喵小虾&apos;, &apos;SUSAN苏&apos;, &apos;上官兰颜&apos;, &apos;这个杀手不太冷&apos;, &apos;看朱成碧纷思君&apos;, &apos;情绪&apos;, &apos;我系小忌廉&apos;, &apos;一只兔&apos;, &apos;June&apos;, &apos;我就想改名而已&apos;, &apos;温柔的大猫Leo&apos;, &apos;猫芙琳&apos;, &apos;以太&apos;, &apos;博丽魔理沙&apos;, &apos;洛丽塔&apos;, &apos;羽小团&apos;, &apos;娄良&apos;, &apos;Rosi&apos;, &apos;叶以北&apos;, &apos;吃不胖的小猫&apos;, &apos;Lina&apos;, &apos;ingrid&apos;, &apos;itttttx&apos;, &apos;胡杨&apos;, &apos;孙阿童&apos;, &apos;林美珍&apos;, &apos;赫蘿Taiga&apos;, &apos;宫曼曼&apos;, &apos;Yoonyicc&apos;, &apos;ZW711&apos;, &apos;笙箫&apos;, &apos;KIKI.Liu&apos;, &apos;另一只袜子&apos;, &apos;荒野大嫖客&apos;, &apos;少女诗&apos;, &apos;芸豆豆豆豆&apos;, &apos;璐璐噜&apos;, &apos;棹歌&apos;, &apos;梦里有只独角兽&apos;, &apos;Oo澄子oO&apos;, &apos;雷梅苔丝&apos;, &apos;CherryZhao&apos;, &apos;李萬一&apos;, &apos;琴脂&apos;, &apos;鹿斑比&apos;, &apos;Chris姬-云烟&apos;, &apos;hyoram&apos;, &apos;蔗蔗蔗&apos;, &apos;柚子Ruby&apos;, &apos;Sheena&apos;, &apos;孟德尔&apos;, &apos;kaka小师妹&apos;, &apos;桢视明&apos;, &apos;大豆苗&apos;, &apos;少女开膛手&apos;, &apos;陈诗茗&apos;] 那么，下一步就是对名字进行分词了，jieba分词，你值得拥有。fxsjy/jieba li2 = &apos;&apos;.join(li1) li2 &apos;阿蕾杨面陈10杨顺顺霧橤真顺顺真谢椿明刀刀水枪大帝倾浅Listening小火龙包子琛杨笋笋蜉蝣十元靡靡之音Real机智张陈梓小童鞋花甲窗里窗外刘梓乔璇璇97Olivia菊香小姐姐牛奶小夏目周依宁万阿咸一蓑烟雨任平生来都来了就像周一Mc蛋蛋秉剑侯李大梦LeeDiss锐雯雨音眞白半仙幺幺Natsuki是只蠢兔纸夏冰莹guuweihai阿舞肖柚妮墨脱要开芷珞舒西婷Childe0Q被压扁的海螺snow arc灰灰灰灰灰plus小兔子菲呀士多啤梨羊咩咩李小可可谁来拽我的尾巴飞鸽之舞小美樱雪绫samazshiyao王漠里Slivan喵小虾SUSAN苏上官兰颜这个杀手不太冷看朱成碧纷思君情绪我系小忌廉一只兔June我就想改名而已温柔的大猫Leo猫芙琳以太博丽魔理沙洛丽塔羽小团娄良Rosi叶以北吃不胖的小猫Linaingriditttttx胡杨孙阿童林美珍赫蘿Taiga宫曼曼YoonyiccZW711笙箫KIKI.Liu另一只袜子荒野大嫖客少女诗芸豆豆豆豆璐璐噜棹歌梦里有只独角兽Oo澄子oO雷梅苔丝CherryZhao李萬一琴脂鹿斑比Chris姬-云烟hyoram蔗蔗蔗柚子RubySheena孟德尔kaka小师妹桢视明大豆苗少女开膛手陈诗茗&apos; 有何感想？？ 下一步就是分词制作图云了 import jieba seg_list = jieba.cut(li2) word = &quot;/&quot;.join(seg_list) print(&quot;Full Mode: &quot; + &quot;/ &quot;.join(seg_list)) Building prefix dict from the default dictionary ... Dumping model to file cache C:\\Users\\ADMINI~1\\AppData\\Local\\Temp\\jieba.cache Loading model cost 1.148 seconds. Prefix dict has been built succesfully. Full Mode: 阿蕾/ 杨/ 面陈/ 10/ 杨/ 顺顺/ 霧/ 橤/ 真/ 顺顺/ 真/ 谢椿明/ 刀刀/ 水枪/ 大帝/ 倾浅/ Listening/ 小/ 火龙/ 包子/ 琛/ 杨笋/ 笋/ 蜉蝣/ 十元/ 靡靡之音/ Real/ 机智/ 张/ 陈梓/ 小/ 童鞋/ 花甲/ 窗里/ 窗外/ 刘梓乔/ 璇/ 璇/ 97Olivia/ 菊香/ 小姐姐/ 牛奶/ 小夏目/ 周依宁/ 万/ 阿/ 咸一/ 蓑/ 烟雨任/ 平生/ 来/ 都/ 来/ 了/ 就/ 像/ 周一/ Mc/ 蛋蛋/ 秉剑侯/ 李大梦/ LeeDiss/ 锐雯雨/ 音眞白/ 半仙/ 幺/ 幺/ Natsuki/ 是/ 只/ 蠢/ 兔纸/ 夏/ 冰莹/ guuweihai/ 阿舞/ 肖柚妮/ 墨脱/ 要/ 开芷/ 珞/ 舒西婷/ Childe0Q/ 被/ 压扁/ 的/ 海螺/ snow/ / arc/ 灰灰/ 灰灰/ 灰/ plus/ 小兔子/ 菲/ 呀/ 士多啤梨/ 羊/ 咩/ 咩/ 李小/ 可可/ 谁/ 来/ 拽/ 我/ 的/ 尾巴/ 飞鸽/ 之舞/ 小美/ 樱雪/ 绫/ samazshiyao/ 王漠/ 里/ Slivan/ 喵/ 小虾/ SUSAN/ 苏/ 上官/ 兰颜/ 这个/ 杀手/ 不/ 太冷/ 看朱成碧/ 纷思君/ 情绪/ 我系/ 小忌廉/ 一只/ 兔/ June/ 我/ 就/ 想/ 改名/ 而已/ 温柔/ 的/ 大猫/ Leo/ 猫/ 芙琳/ 以太/ 博丽/ 魔理沙/ 洛丽塔/ 羽小团/ 娄良/ Rosi/ 叶/ 以北/ 吃不胖/ 的/ 小猫/ Linaingriditttttx/ 胡杨/ 孙阿童/ 林美珍/ 赫蘿/ Taiga/ 宫曼曼/ YoonyiccZW711/ 笙箫/ KIKI/ ./ Liu/ 另一只/ 袜子/ 荒野/ 大/ 嫖客/ 少女/ 诗/ 芸豆/ 豆豆/ 豆璐璐噜/ 棹/ 歌梦里/ 有/ 只/ 独角兽/ Oo/ 澄子/ oO/ 雷梅/ 苔丝/ CherryZhao/ 李萬/ 一琴脂/ 鹿斑/ 比/ Chris/ 姬/ -/ 云烟/ hyoram/ 蔗蔗蔗/ 柚子/ RubySheena/ 孟德尔/ kaka/ 小/ 师妹/ 桢视/ 明大/ 豆苗/ 少女/ 开膛手/ 陈诗/ 茗 下一步绘制图云，用jupyter遇到了很多坑。。 # -*- coding: utf-8 -*- import matplotlib.pyplot as plt from wordcloud import WordCloud,STOPWORDS,ImageColorGenerator # 直接从文件读取数据 text = &apos;&apos;&apos;阿蕾/杨/面陈/10/杨/顺顺/霧/橤/真/顺顺/真/谢椿明/刀刀/水枪/大帝/倾浅/Listening/小/火龙/包子/琛/杨笋/笋/蜉蝣/十元/靡靡之音/Real/机智/张/陈梓/小/童鞋/花甲/窗里/窗外/刘梓乔/璇/璇/97Olivia/菊香/小姐姐/牛奶/小夏目/周依宁/万/阿/咸一/蓑/烟雨任/平生/来/都/来/了/就/像/周一/Mc/蛋蛋/秉剑侯/李大梦/LeeDiss/锐雯雨/音眞白/半仙/幺/幺/Natsuki/是/只/蠢/兔纸/夏/冰莹/guuweihai/阿舞/肖柚妮/墨脱/要/开芷/珞/舒西婷/Childe0Q/被/压扁/的/海螺/snow/ /arc/灰灰/灰灰/灰/plus/小兔子/菲/呀/士多啤梨/羊/咩/咩/李小/可可/谁/来/拽/我/的/尾巴/飞鸽/之舞/小美/樱雪/绫/samazshiyao/王漠/里/Slivan/喵/小虾/SUSAN/苏/上官/兰颜/这个/杀手/不/太冷/看朱成碧/纷思君/情绪/我系/小忌廉/一只/兔/June/我/就/想/改名/而已/温柔/的/大猫/Leo/猫/芙琳/以太/博丽/魔理沙/洛丽塔/羽小团/娄良/Rosi/叶/以北/吃不胖/的/小猫/Linaingriditttttx/胡杨/孙阿童/林美珍/赫蘿/Taiga/宫曼曼/YoonyiccZW711/笙箫/KIKI/./Liu/另一只/袜子/荒野/大/嫖客/少女/诗/芸豆/豆豆/豆璐璐噜/棹/歌梦里/有/只/独角兽/Oo/澄子/oO/雷梅/苔丝/CherryZhao/李萬/一琴脂/鹿斑/比/Chris/姬/-/云烟/hyoram/蔗蔗蔗/柚子/RubySheena/孟德尔/kaka/小/师妹/桢视/明大/豆苗/少女/开膛手/陈诗/茗&apos;&apos;&apos; backgroud_Image = plt.imread(&apos;girl.jpg&apos;) wc = WordCloud( background_color = &apos;white&apos;, # 设置背景颜色 mask = backgroud_Image, # 设置背景图片 max_words = 2000, # 设置最大现实的字数 stopwords = STOPWORDS, # 设置停用词 font_path = &apos;C:/Users/Windows/fonts/msyh.ttf&apos;,# 设置字体格式，如不设置显示不了中文 max_font_size = 300, # 设置字体最大值 random_state = 50, # 设置有多少种随机生成状态，即有多少种配色方案 ) wc.generate(text) image_colors = ImageColorGenerator(backgroud_Image) #wc.recolor(color_func = image_colors) plt.imshow(wc) plt.axis(&apos;off&apos;) plt.show() 来看看图云吧 其实这个并没有什么卵用，知识自己无聊时玩玩的。下面才是我想要的 0 陈诗茗 https://www.zhihu.com/people/chen-shi-ming-69 1 李大梦Lee https://www.zhihu.com/people/li-da-meng-58-44 2 snow arc https://www.zhihu.com/people/xiaoxueli 3 夏冰莹 https://www.zhihu.com/people/xia-bingying 4 Sheena https://www.zhihu.com/people/zhang-chu-yun-84 5 喵小虾 https://www.zhihu.com/people/maoxiaoxia233 6 李大梦Lee https://www.zhihu.com/people/li-da-meng-58-44 7 李大梦Lee https://www.zhihu.com/people/li-da-meng-58-44 8 以太 https://www.zhihu.com/people/elapse08 9 zshiyao https://www.zhihu.com/people/duo-rou-wan-zi-89 10 SUSAN苏 https://www.zhihu.com/people/susansu-66 11 温柔的大猫Leo https://www.zhihu.com/people/li-yue-90-56 12 琴脂 https://www.zhihu.com/people/qin-zhi-49 13 王漠里 https://www.zhihu.com/people/wang-mo-li-66 14 花甲 https://www.zhihu.com/people/hua-jia-1-71 15 雷梅苔丝 https://www.zhihu.com/people/lei-mei-tai-si-15 16 Olivia菊香小姐姐 https://www.zhihu.com/people/olivia-60-10 17 芷珞 https://www.zhihu.com/people/zhi-luo-90-6 18 Mc蛋蛋 https://www.zhihu.com/people/lee2egg 19 少女诗 https://www.zhihu.com/people/shao-nu-shi-75 20 ingrid https://www.zhihu.com/people/da-da-yao-guai 21 博丽魔理沙 https://www.zhihu.com/people/nan-xiao-niao-94-5 22 赫蘿Taiga https://www.zhihu.com/people/he-luo-taiga 23 kaka小师妹 https://www.zhihu.com/people/kakasis 24 芸豆豆豆豆 https://www.zhihu.com/people/yun-dou-dou-dou-dou 25 林美珍 https://www.zhihu.com/people/lin-mei-zhen 26 喵小虾 https://www.zhihu.com/people/maoxiaoxia233 27 这个杀手不太冷 https://www.zhihu.com/people/wei-jun-jie-9 28 喵小虾 https://www.zhihu.com/people/maoxiaoxia233 29 Rosi https://www.zhihu.com/people/rosi-91 ... ... ... 111 洛丽塔 https://www.zhihu.com/people/hua-hua-gu-niang-5 112 洛丽塔 https://www.zhihu.com/people/hua-hua-gu-niang-5 113 洛丽塔 https://www.zhihu.com/people/hua-hua-gu-niang-5 114 洛丽塔 https://www.zhihu.com/people/hua-hua-gu-niang-5 115 Diss锐雯 https://www.zhihu.com/people/DSRiven 116 水枪大帝 https://www.zhihu.com/people/shuiqiangge 117 樱雪绫sama https://www.zhihu.com/people/lin-xuan-ting-1 118 李小可可 https://www.zhihu.com/people/li-gao-xing-2 119 士多啤梨羊咩咩 https://www.zhihu.com/people/shi-duo-pi-li-yan... 120 李萬一 https://www.zhihu.com/people/moire 121 万阿咸 https://www.zhihu.com/people/wan-a-xian-58 122 笙箫 https://www.zhihu.com/people/sheng-xiao-36 123 谢椿明 https://www.zhihu.com/people/xie-chun-ming-16 124 孙阿童 https://www.zhihu.com/people/sun-a-tong 125 宫曼曼 https://www.zhihu.com/people/gong-nuo-6 126 荒野大嫖客 https://www.zhihu.com/people/ji-da-fa-37 127 我就想改名而已 https://www.zhihu.com/people/wowjessica 128 就像周一 https://www.zhihu.com/people/yin-qing-chu-kai 129 胡杨 https://www.zhihu.com/people/hu-yang-49-22 130 杨笋笋 https://www.zhihu.com/people/yang-sun-sun-98 131 蜉蝣 https://www.zhihu.com/people/yuan-xia-66 132 羽小团 https://www.zhihu.com/people/xiao-yu-bao-er 133 杨笋笋 https://www.zhihu.com/people/yang-sun-sun-98 134 Lina https://www.zhihu.com/people/li-nuo-84-28 135 另一只袜子 https://www.zhihu.com/people/151231 136 刘梓乔 https://www.zhihu.com/people/liu-zi-qiao-42 137 guuweihai https://www.zhihu.com/people/guuweihai 138 陈10 https://www.zhihu.com/people/chen-10-80 139 ZW711 https://www.zhihu.com/people/zw711 140 看朱成碧纷思君 https://www.zhihu.com/people/kan-zhu-cheng-bi-... 下周二晚上8点，我会在趣直播聊一聊Python爬虫，如果你感兴趣，欢迎你来参加。 趣直播 - 知识直播平台","tags":[{"name":"知乎","slug":"知乎","permalink":"https://zhangslob.github.io/tags/知乎/"},{"name":"妹子","slug":"妹子","permalink":"https://zhangslob.github.io/tags/妹子/"}]},{"title":"Leetcode_4.Median of Two Sorted Arrays","date":"2017-05-19T14:03:18.147Z","path":"2017/05/19/Leetcode-4-Median-of-Two-Sorted-Arrays/","text":"这是崔斯特的第十一篇原创文章 参考Median of Two Sorted Arrays 1、题目There are two sorted arrays nums1 and nums2 of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)). Example 1: nums1 = [1, 3] nums2 = [2] The median is 2.0 Example 2: nums1 = [1, 2] nums2 = [3, 4] The median is (2 + 3)/2 = 2.5 2、思路蛋疼的说，我有看不懂题目了，尤其是O(log (m+n))，啥玩意。没办法，去网上搜索，看看前辈们的想法。 翻译如下： 给你两个排序数组，容量为m的数组A，容量为n的数组B。求出两个数组的中位数（啥玩意？），硬性要求时间复杂度O(log (m+n)). 1：太汗颜了，median到底是个啥，查一下： 中位数是在一组数据中居于中间的数(特别注意的地方是：这组数据之前已经经过升序排列！！！)，即在这组数据中，有一半的数据比它大，有一半的数据比它小。如果这组数据包含偶数个数字，中值是位于中间的两个数的平均值。 2：好吧，中位数是这么个玩意，那么理论上首先我们需要先将两个数组合为一，再求这个新合并的数组的中位数。 3：但是，已经限定死了时间复杂度为log（m+n），原来LeetCode的题目也思路不开放嘛。 4：问题可以转化成两个有序序列找第num大的数，由于时间复杂度已经限定死了，只能采用类似二分的思想，每个步骤去掉一半数据元素。 出现了一个词语：时间复杂度，这是个啥？ 完全不懂，换个思路来吧，不去看题目了，直接看第四点： 问题可以转化成两个有序序列找第num大的数，由于时间复杂度已经限定死了，只能采用类似二分的思想，每个步骤去掉一半数据元素。 二分，又是二分，赶紧去复习下。 二分查找就是将查找的键和子数组的中间键作比较，如果被查找的键小于中间键，就在左子数组继续查找；如果大于中间键，就在右子数组中查找，否则中间键就是要找的元素。 这个好像还可以看得懂，嘿嘿。我还发现了Python源代码（百度这样说的）： def bin_search(data_list, val): low = 0 # 最小数下标 high = len(data_list) - 1 # 最大数下标 while low &lt;= high: mid = (low + high) // 2 # 中间数下标 if data_list[mid] == val: # 如果中间数下标等于val, 返回 return mid elif data_list[mid] &gt; val: # 如果val在中间数左边, 移动high下标 high = mid - 1 else: # 如果val在中间数右边, 移动low下标 low = mid + 1 return # val不存在, 返回None ret = bin_search(list(range(1, 10)), 3) print(ret) 大概明白他的意思了。 3、解法很多解法都提到：如果我们可以在两个数列中求出第K小的元素，便可以解决该问题 解题思路：这道题要求两个已经排好序的数列的中位数。中位数的定义：如果数列有偶数个数，那么中位数为中间两个数的平均值；如果数列有奇数个数，那么中位数为中间的那个数。比如{1，2，3，4，5}的中位数为3。{1，2，3，4，5，6}的中位数为（3+4）/ 2 = 3.5。那么这题最直接的思路就是将两个数列合并在一起，然后排序，然后找到中位数就行了。可是这样最快也要O((m+n)log(m+n))的时间复杂度，而题目要求O(log(m+n))的时间复杂度。这道题其实考察的是二分查找，是《算法导论》的一道课后习题，难度还是比较大的。 首先我们来看如何找到两个数列的第k小个数，即程序中getKth(A, B , k)函数的实现。用一个例子来说明这个问题：A = {1，3，5，7}；B = {2，4，6，8，9，10}；如果要求第7个小的数，A数列的元素个数为4，B数列的元素个数为6；k/2 = 7/2 = 3，而A中的第3个数A[2]=5；B中的第3个数B[2]=6；而A[2]&lt;B[2]；则A[0]，A[1]，A[2]中必然不可能有第7个小的数。因为A[2]&lt;B[2]，所以比A[2]小的数最多可能为A[0], A[1], B[0], B[1]这四个数，也就是说A[2]最多可能是第5个大的数，由于我们要求的是getKth(A, B, 7)；现在就变成了求getKth(A’, B, 4)；即A’ = {7}；B不变，求这两个数列的第4个小的数，因为A[0]，A[1]，A[2]中没有解，所以我们直接删掉它们就可以了。这个可以使用递归来实现。 class Solution: # @return a float # @line20 must multiply 0.5 for return a float else it will return an int def getKth(self, A, B, k): lenA = len(A); lenB = len(B) if lenA &gt; lenB: return self.getKth(B, A, k) if lenA == 0: return B[k - 1] if k == 1: return min(A[0], B[0]) pa = min(k/2, lenA); pb = k - pa if A[pa - 1] &lt;= B[pb - 1]: return self.getKth(A[pa:], B, pb) else: return self.getKth(A, B[pb:], pa) def findMedianSortedArrays(self, A, B): lenA = len(A); lenB = len(B) if (lenA + lenB) % 2 == 1: return self.getKth(A, B, (lenA + lenB)/2 + 1) else: return (self.getKth(A, B, (lenA + lenB)/2) + self.getKth(A, B, (lenA + lenB)/2 + 1)) * 0.5 在我提交了代码之后，发现超过50.24 % 我找出最快的解法，来学习下： class Solution(object): def findMedianSortedArrays(self, a, b): &quot;&quot;&quot; :type nums1: List[int] :type nums2: List[int] :rtype: float &quot;&quot;&quot; c = a+b c.sort() m = len(c) / 2 mm = len(c) % 2 if mm &gt; 0 : return c[m] return (c[m-1]+c[m])/2.# + (c[m-1]+c[m])%2 第二名的： class Solution(object): def findMedianSortedArrays(self, nums1, nums2): &quot;&quot;&quot; :type nums1: List[int] :type nums2: List[int] :rtype: float &quot;&quot;&quot; nums3 = nums1 + nums2 nums3.sort() l = len(nums3) if l%2 == 1: return nums3[l/2] else: return (float(nums3[l/2]) + float(nums3[l/2-1]))/2 每做一题，都会被打击好多次，但是算法是一定要学习的。","tags":[]},{"title":"Leetcode_2. Add Two Numbers","date":"2017-05-14T08:42:56.000Z","path":"2017/05/14/Leetcode-2-Add-Two-Numbers/","text":"这是崔斯特的第十篇原创文章 好久没写博客了，定个小目标，2天一篇，哈哈。 1、题目You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself. Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4) Output: 7 -&gt; 0 -&gt; 8 2、思路其实我并看不懂题目说得啥意思，如果说243+564，结果是807才是，但是很明显题目不会这么简单。怎么办？ 好像只能去看看别人的理解了，发现： 1.因为存储是反过来的，即数字342存成2-&gt;4-&gt;3，所以要注意进位是向后的； 2.链表l1或l2为空时，直接返回，这是边界条件，省掉多余的操作； 3.链表l1和l2长度可能不同，因此要注意处理某个链表剩余的高位； 4.2个数相加，可能会产生最高位的进位，因此要注意在完成以上1－3的操作后，判断进位是否为0，不为0则需要增加结点存储最高位的进位。 给个链接http://blog.csdn.net/zhouworld16/article/details/14045855 原来是倒着相加，342+465=807，结果倒序，正好是708，题目应该是这样理解的吧，哈哈。 思路本题的思路很简单，按照小学数学中学习的加法原理从末尾到首位，对每一位对齐相加即可。技巧在于如何处理不同长度的数字，以及进位和最高位的判断。这里对于不同长度的数字，我们通过将较短的数字补0来保证每一位都能相加。递归写法的思路比较直接，即判断该轮递归中两个ListNode是否为null。 全部为null时，返回进位值 有一个为null时，返回不为null的那个ListNode和进位相加的值 都不为null时，返回 两个ListNode和进位相加的值 来源一位大佬https://segmentfault.com/a/1190000002986101 原来是小学内容小学数学中学习的加法，使用递归写法。 递归，就是在运行的过程中调用自己。什么鬼啊，自己使用自己吗？ 目前我找到的对递归最恰当的比喻，就是查词典。 我们使用的词典，本身就是递归，为了解释一个词，需要使用更多的词。 当你查一个词，发现这个词的解释中某个词仍然不懂，于是你开始查这第二个词，可惜，第二个词里仍然有不懂的词，于是查第三个词，这样查下去，直到有一个词的解释是你完全能看懂的，那么递归走到了尽头，然后你开始后退，逐个明白之前查过的每一个词，最终，你明白了最开始那个词的意思。。。 好像明白了一点点~ 3、解法 #（Python）版本1 class Solution: def addTwoNumbers(self, l1, l2): addends = l1, l2 dummy = end = ListNode(0) carry = 0 while addends or carry: carry += sum(a.val for a in addends) addends = [a.next for a in addends if a.next] end.next = end = ListNode(carry % 10) carry /= 10 return dummy.next 版本2 class Solution: # @return a ListNode def addTwoNumbers(self, l1, l2): carry = 0 sum = ListNode(0) s = sum while l1 is not None or l2 is not None or carry: s.val = carry if l1: s.val += l1.val l1 = l1.next if l2: s.val += l2.val l2 = l2.next carry = s.val / 10 s.val = s.val % 10 if l1 or l2 or carry: s.next = ListNode(0) s = s.next return sum 好吧，承认版本1看不懂。至于版本2 ListNode 是一个元祖，然后。。。s.val是什么意思啊？又不懂。回去看看，原来是已经定义了ListNode # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None 也就是说有2个类，Solution 和 ListNode 今天先这样了，我需要去学习一下什么是“类”，也就是Python的面向对象编程","tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://zhangslob.github.io/tags/leetcode/"},{"name":"刷题","slug":"刷题","permalink":"https://zhangslob.github.io/tags/刷题/"}]},{"title":"使用Python计算文章中的字词频率丨学习笔记和反思","date":"2017-03-28T10:58:18.000Z","path":"2017/03/28/使用Python计算文章中的字词频率丨学习笔记和反思/","text":"这是崔斯特的第九篇原创文章 来源：天善智能-商业智能和大数据在线社区，用心创造价值https://edu.hellobi.com/course/159/play/lesson/2531 丘祐玮https://ask.hellobi.com/people/DavidChiu人人都爱数据科学家！Python数据科学精华实战课程 环境：Anaconda3 建议使用Anaconda，下载源文件后再阅读本文：https://github.com/zhangslob/DanmuFenxi 选择经典演讲稿，奥巴马2009年9月8日开学演讲。。https://wenku.baidu.com/view/ad77bc1caf45b307e8719758.html THE PRESIDENT: Hello, everybody! Thank you. Thank you. Thank you, everybody. All right, everybody go ahead and have a seat. How is everybody doing today? (Applause.) How about Tim Spicer? (Applause.) I am here with students at Wakefield High School in Arlington, Virginia. And we’ve got students tuning in from all across America, from kindergarten through 12th grade. And I am just so glad that all could join us today. And I want to thank Wakefield for being such an outstanding host. Give yourselves a big round of applause. (Applause.)… 1、World Count(Version 1)把数据命名为speech_text，首先需要对英文进行分词。英文中主要是空格，使用split()函数 # coding: utf-8 # In[1]: speech_text=&apos;&apos;&apos;#长文本使用&apos;&apos;&apos;..&apos;&apos;&apos; THE PRESIDENT: Hello, everybody! Thank you. Thank you. Thank you, everybody. All right, everybody go ahead and have a seat. How is everybody doing today? (Applause.) How about Tim Spicer? (Applause.) I am here with students at Wakefield High School in Arlington, Virginia. And we&apos;ve got students tuning in from all across America, from kindergarten through 12th grade. And I am just so glad that all could join us today. And I want to thank Wakefield for being such an outstanding host. Give yourselves a big round of applause. (Applause.) ...#省略文字 &apos;&apos;&apos; # In[2]: speech=speech_text.split() # In[3]: speech 下一步，计算speech中词语出现的次数 # In[4]: dic={} for word in speech: if word not in dic: dic[word] = 1 else: dic[word] = dic[word] + 1 # In[5]: dic 通过 items() 函数以列表返回可遍历的(键, 值) 元组数组。 下一步，对词语进行排序 # In[7]: import operator swd=sorted(dic.items(),key=operator.itemgetter(1),reverse=True)#从大到小排序 # In[9]: swd 发现其中“to”、“the”等单词是常见词，借用nltk我们可以把这些词语去掉 from nltk.corpus import stopwords stop_words = stopwords.words(&apos;English&apos;) 虽说Anaconda已经安装了NLTK，但是我自己操作时stopwords貌似没有，出错请参考https://www.douban.com/note/534906136/ 看看英文中的去停词，下一步，遍历，打印出不含有去停词 for k,v in swd2: if k not in stop_words: print(k,v) 发现出现了很多“–”，回去原文中观察，发现确实有很多， 那么问题来了，为什么出现这么多“–”。萌新求解！ 2、World Count(Version 2)from collections import Counter c=Counter(speech2) 使用Python 的collections模块更简洁，详细见http://www.jb51.net/article/48771.htm 同样可以使用stop_word，还可以使用most_common打印出前几个 for sw in stop_words: del c[sw] 3、反思上一篇文章https://zhuanlan.zhihu.com/p/25983014写的比较粗糙，很多人要求把“观众” “礼物”筛选出来，那我来试试。 stop = [&apos;！&apos;,&apos;*&apos;,&apos;观众&apos;,&apos;礼物&apos;,&apos;:&apos;,&apos;？&apos;,&apos;。&apos;,&apos;，&apos;,&apos;~&apos;,&apos;1&apos;] 去停词只有这些、可以根据实际情况添删。 看来观众很喜欢说“xx学院发来贺电~~”","tags":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://zhangslob.github.io/tags/学习笔记/"},{"name":"文字处理","slug":"文字处理","permalink":"https://zhangslob.github.io/tags/文字处理/"}]},{"title":"昨天看球时，球迷都说了啥——弹幕抓取与分析","date":"2017-03-24T12:41:58.000Z","path":"2017/03/24/昨天看球时，球迷都说了啥——弹幕抓取与分析/","text":"这是崔斯特的第八篇原创文章 数据来源：http://star.longzhu.com/teamchina 本次弹幕记录（开始时间: 2017-03-23-19:43:34，结束21:29:33)，共记录20788条数据。 使用OBS弹幕助手记录http://www.obsapp.com/apps/obsdanmu/ 1、分析 文件中含有时间记录，观众ID和送礼记录，其次是弹幕内容，所以决定对前两列内容不分析。 首先需要对文本分词，这里采用jieba分词 https://github.com/fxsjy/jieba/ 去除空格，使用strip()函数， 去掉换行符”\\n” line = line.strip(&apos;\\n&apos;) 把分析结果写入新的文档’text.txt’，Python join() 方法用于将序列中的元素以指定的字符连接生成一个新的字符串 text = &apos;&apos; with open(&apos;danmu.txt&apos;,encoding=&apos;utf-8&apos;) as fin: for line in fin.readlines(): line = line.strip(&apos;\\n&apos;) text += &apos;/&apos;.join(jieba.cut(line)) text += &apos; &apos; fout = open(&apos;text.txt&apos;,&apos;wb&apos;)#以二进制写模式写入 pickle.dump(text,fout) fout.close() 这样就完成了分词过程，结果如下： 2、绘制图云# 直接从文件读取数据 fr = open(&apos;text.txt&apos;,&apos;rb&apos;) text = pickle.load(fr) 使用word_cloud，具体用法https://github.com/amueller/word_cloud backgroud_Image = plt.imread(&apos;girl.jpg&apos;) wc = WordCloud( background_color = &apos;white&apos;, # 设置背景颜色 mask = backgroud_Image, # 设置背景图片 max_words = 2000, # 设置最大现实的字数 stopwords = STOPWORDS, # 设置停用词 font_path = &apos;C:/Users/Windows/fonts/msyh.ttf&apos;,# 设置字体格式，如不设置显示不了中文 max_font_size = 300, # 设置字体最大值 random_state = 50, # 设置有多少种随机生成状态，即有多少种配色方案 ) 使用matplotlib绘图http://matplotlib.org/2.0.0/index.html wc.generate(text) image_colors = ImageColorGenerator(backgroud_Image) #wc.recolor(color_func = image_colors) plt.imshow(wc) plt.axis(&apos;off&apos;) plt.show() OK，这样就完成了，附上结果 有没有你发过的弹幕呢？ 可自形修改数据，得到更好看图片。 能力有限，分析很少，如果你想进行更深入分析，请找我要文件。 对英雄联盟感兴趣的小伙伴可以看看这篇，对游戏直播弹幕的分析。 https://zhangslob.github.io/2017/03/24/%E5%88%A9%E7%94%A8Python%E5%AF%B9%E7%9B%B4%E6%92%AD%E5%BC%B9%E5%B9%95%E7%9A%84%E5%88%86%E6%9E%90/ github：https://github.com/zhangslob/DanmuFenxi","tags":[{"name":"足球","slug":"足球","permalink":"https://zhangslob.github.io/tags/足球/"},{"name":"数据分析","slug":"数据分析","permalink":"https://zhangslob.github.io/tags/数据分析/"}]},{"title":"利用Python对直播弹幕的分析","date":"2017-03-24T12:12:58.000Z","path":"2017/03/24/利用Python对直播弹幕的分析/","text":"这是崔斯特的第七篇原创文章 弹幕（ barrage），中文流行词语，原意指用大量或少量火炮提供密集炮击。而弹幕，顾名思义是指子弹多而形成的幕布， 大量吐槽评论从屏幕飘过时效果看上去像是飞行射击游戏里的弹幕。 今天就来说说游戏直播中， 弹幕都有哪些。 一、准备利用 danmu 弹幕接口对斗鱼主播赏金术士直播间的弹幕进行抓取，抓取时间约2 小时，共计 2534 条弹幕。赏金直播间： https://www.douyu.com/846805 二、 分析1、 弹幕词云词云， 由词汇组成类似云的彩色图形。 使用的是 Python 的模块 wordcloud。 通过 jieba 分词对弹幕中文分词， 使用 wordcloud 对结果构造词云， 最终结果为： 可以看到，高频率词语有： 外甥、无敌、厉害、可以、无限、火力、什么、垃圾、赏金。 2、关键词TextRank算法可以用来从文本中提取关键词和摘要 关键词： 不 0.010922664205428556 外甥 0.010484629632807344 玩 0.008177160003721682 无限 0.0058741805660283575 没 0.005665342357801469 说 0.005548941560115147 大 0.005541099430280024 主播 0.005498954448927515 出 0.0054948076800822405 看 0.0051528084835430555 可以看出来，作为汉字常用字，‘不’、‘玩’、‘没’、‘说’、‘大’、‘出’、‘看’这7个字出现频率高，这不奇怪。但是，‘外甥’、‘无限’、‘主播’就和英雄联盟主播赏金术士有责很大关系了。 外甥是赏金双排的一位选手、扮演着搞笑、逗乐的角色。‘无限’则是“无限火力”，一个特定模式，颇受玩家喜爱。主播可能是赏金，也有可能说别的主播。 关键短语： 对面不会 垃圾主播 不出 没带 不大 赏金玩 对面德玛 外甥说 大不 外甥大 摘要： 7337 0.0006968086282134394 真的有护眼模式666 3059 0.0006968086282134393 护眼模式为什么这么绿 10503 0.00047342729603724247 找儿子，爱好护眼 从摘要中看到三条弹幕中，都含有“护眼”二字，这是为什么呢？ lol护眼一词，其实主要来源于英雄联盟的直播平台，随着叫的人多了，这个词便火热了起来。起初是有人带节奏，说打护眼斗鱼可以进入护眼模式。一般在直播lol的主播使用的英雄死掉后，界面会呈现暗灰色的，亮度降低有利于防护眼睛，从而就有了lol护眼，当然意思就是嘲讽主播很菜的意思。 三、总结：由于自己所收集的数据过少、而且仅保存了一位主播的弹幕，造成结果不具有通用性，可以通过对各大直播平台的热门主播弹幕的爬取，获得观众的心理变化和网络风气。 以及主播有没有过气一说~ github：https://github.com/zhangslob/DanmuFenxi","tags":[{"name":"直播","slug":"直播","permalink":"https://zhangslob.github.io/tags/直播/"},{"name":"文本分析","slug":"文本分析","permalink":"https://zhangslob.github.io/tags/文本分析/"}]},{"title":"如何优雅的“轮带逛”初级篇——获取单张图片","date":"2017-03-20T12:35:00.000Z","path":"2017/03/20/如何优雅的“轮带逛”初级篇——获取单张图片/","text":"这是崔斯特的第六篇原创文章 轮子哥护体 首先上收藏夹 https://www.zhihu.com/collection/78172986?page=1 由@vega13创建，内容挺多的。例如， 等等，看的老夫脸都红了 写了一个简单爬取图片的程序。记录下过程。手动 @轮子哥 1、分析网页收藏夹只收藏了问题的一个答案，初步想法是获取当前页面的图片 因为上一次原因，直接去网页源代码 &lt;img src=&quot;https://pic4.zhimg.com/de5ecb16bcb912e99a83f647eb96c5bb_200x112.jpg&quot; data-rawwidth=&quot;1080&quot; data-rawheight=&quot;1080&quot; class=&quot;origin_image inline-img zh-lightbox-thumb&quot; data-original=&quot;https://pic4.zhimg.com/de5ecb16bcb912e99a83f647eb96c5bb_r.jpg&quot;&gt; &lt;img data-rawwidth=&quot;1280&quot; data-rawheight=&quot;1836&quot; src=&quot;https://pic2.zhimg.com/v2-61ba67d910104f99acdb805a3568ab05_200x112.jpg&quot; class=&quot;origin_image inline-img zh-lightbox-thumb&quot; data-original=&quot;https://pic2.zhimg.com/v2-61ba67d910104f99acdb805a3568ab05_r.jpg&quot;&gt; 在&lt;img&gt;标签下，src和data-original都含有图片链接，经验证data-original是大图，那就把每个问题的图片链接找到了，接下来就很简单了。 2、代码就18行的代码。简单吧~ import requests,urllib from lxml import etree def get_img(url): headers = {&apos;User-Agent&apos;:&apos;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36&apos;} r= requests.get(url,headers=headers).text s = etree.HTML(r) #print(r) link = s.xpath(&apos;//img/@data-original&apos;) for i in link: print(i) name = i.split(&apos;/&apos;)[-1]#图片名称 urllib.request.urlretrieve(i,name) if __name__ == &apos;__main__&apos;: for i in range(1,43): url = &apos;https://www.zhihu.com/collection/78172986?page=&apos; + str(i) get_img(url) 但是这样存在一个问题 link = s.xpath(&apos;//img/@data-original&apos;) 这里的link只有每个回答的第一张图片，更多的图片藏在文本中，除了正则不知道还有没有更好的办法 只有200多张图片。结尾有百度云 下载了几分钟出现错误，有一张图片下载不了，知友们有什么好办法吗？ 三、“轮带逛”高级篇既然有初级篇，肯定还有高级篇。 其实这个收藏夹中每一个问题下面都含有很多回答，收藏夹只是选取其中一个，也就是被轮子哥点赞的那个，那么还有那些没有被点赞的呢？ 下一期讲一讲怎么获取所有图片链接。 放一张图片，卡死我程序的 —————————————最后的小广告—————————————– 有朋友竟然叫我去作一期直播，讲一讲Python。 打算根据自己的经历分享一些经验，主要是关于Python入门的，想听听可以私信我。 时间是周二晚9点~ 百度云下载 链接：http://pan.baidu.com/s/1dFOPbUx 密码：abrl","tags":[{"name":"知乎爬虫","slug":"知乎爬虫","permalink":"https://zhangslob.github.io/tags/知乎爬虫/"},{"name":"轮带逛","slug":"轮带逛","permalink":"https://zhangslob.github.io/tags/轮带逛/"}]},{"title":"Python爬虫实战——免费图片 - Pixabay","date":"2017-03-19T09:24:58.000Z","path":"2017/03/19/Python爬虫实战——免费图片-Pixabay/","text":"这是崔斯特的第五篇原创文章 Pixabay，一个挺不错的高清无码图片网站，可以免费下载。 https://pixabay.com/ 一些介绍 超过 900000 高质量照片、 插图和矢量图形。可免费用于商业用途。没有所需的归属。 Pixabay是一家高质量图片分享网站。最初，该网站由Hans Braxmeier和Simon Steinberger在德国发展起来。2013年2月，网站拥有由影师和其社区的插画家提供的大约7万张免费的照片和矢量图形。该公司于2010年12月在德国乌尔姆成立。 2012年3月，Pixabay开始从一个私人图像搜集网站转变成一个互动的网上社区，该网站支持20种语言。同年5月，网站推出公共应用程序编程接口，从而使第三方用户和网站开发人员搜索其图像数据库。网站还与Flickr，YouTube和维基共享资源。 Pixabay用户无需注册就可以获得免费版权的高质量图像。根据知识共享契约CC0相关的肖像权，用户在该网站通过上传图片就默认放弃图片版权，从而使图片广泛流通。网站允许任何人使用，修改图片 - 即便是在商业应用 - 不要求许可并且未认可。 Pixabay为了确保高品质图片标准，用户上传的所有图片将由网站工作人员手动审批。大约27％的用户会说英语，20％的用户会说西班牙语，11％的用户会说葡萄牙语，7％的用户会说德语和5％的用户会说法语。其用户主要是博客、图形设计师、作家、记者和广告商。 今天的目标就是爬取小编精选的图片 https://pixabay.com/zh/editors_choice/?media_type=photo&amp;pagi=1 一、分析我们需要写3个函数 一个Download(url)，用来下载图片 一个用来获取小编精选一共有的165页FullUrl() 最后用来调用main() 下面开始一个个写吧~ https://pixabay.com/zh/editors_choice/?media_type=photo&amp;pagi=1 打开网页，F12，查看图片链接所在的标签 可以看到图片链接都在&lt;img&gt;标签下，但是我自己发现前几张和后几张的属性是不一样的，提取出&lt;img&gt;中“src”就可以了，使用的是xpath import requests from lxml import etree header = {&apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36&apos;} url = &apos;https://pixabay.com/zh/editors_choice/&apos; r = requests.get(url,headers=header).text s = etree.HTML(r) print(s.xpath(&apos;//img/@src&apos;)) 结果是 前面都是正确的图片链接，可是后面出现了’/static/img/blank.gif’，这个是什么鬼，查看网页源代码，搜索 可以发现确实有这一段字符串，我自己在这一点上花了很多时间。感谢@李宏杰的帮助，https://www.zhihu.com/question/57188290 浏览器中的代码是JavaScript修改过的, 你直接用requests请求然后打印出来看就会发现 &lt;div class=&quot;item&quot; data-w=&quot;640&quot; data-h=&quot;426&quot;&gt; &lt;a href=&quot;/zh/%E8%9B%8B%E7%B3%95-%E4%B8%80%E5%9D%97%E8%9B%8B%E7%B3%95-%E9%A3%9F%E8%B0%B1-%E4%B8%80%E7%89%87-%E7%B3%96%E6%9E%9C-%E6%8F%92%E5%9B%BE-%E7%83%98%E7%83%A4-%E7%94%9C%E7%82%B9-%E9%A3%9F%E5%93%81-1971556/&quot;&gt; &lt;img src=&quot;/static/img/blank.gif&quot; data-lazy-srcset=&quot;https://cdn.pixabay.com/photo/2017/01/11/11/33/cake-1971556__340.jpg 1x, https://cdn.pixabay.com/photo/2017/01/11/11/33/cake-1971556__480.jpg 2x&quot; data-lazy=&quot;https://cdn.pixabay.com/photo/2017/01/11/11/33/cake-1971556__340.jpg&quot; alt=&quot;&quot;&gt; &lt;/a&gt; &lt;div&gt; requests返回的数据中可以看到，“data-lazy”总含有我们需要的数据，修改代码 发现现在返回的数据是我们需要的，打开一张图片查看 下面的图片要清晰很多，我们只需要把__340换成_960_720即可 小编精选一共有165页，我们需要获取下一页URL https://pixabay.com/zh/editors_choice/?media_type=photo&amp;pagi=2 https://pixabay.com/zh/editors_choice/?media_type=photo&amp;pagi=3 。。。 规律很简单 full_link = [] for i in range(1,165): #print(i) full_link.append( &apos;https://pixabay.com/zh/editors_choice/?media_type=photo&amp;pagi=&apos;+ str(i)) 到现在，准备工作做好了，思路可能不是很清楚，请谅解~ 二、代码import requests from lxml import etree import time import urllib def Download(url): header = { &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36&apos;} r = s.get(url, headers=header).text s = etree.HTML(r) r = s.xpath(&apos;//img/@data-lazy&apos;) for i in r: imglist = i.replace(&apos;__340&apos;, &apos;_960_720&apos;) name = imglist.split(&apos;/&apos;)[-1]#图片名称 urllib.request.urlretrieve(imglist,name) time.sleep(1) def FullUrl(): full_link = [] for i in range(2,165): #print(i) full_link.append( &apos;https://pixabay.com/zh/editors_choice/?media_type=photo&amp;pagi=&apos;+ str(i)) #print(full) return full_link if __name__ == &apos;__main__&apos;: urls = FullUrl() for url in urls: Download(url) 爬取图片的工作就完成了，粗略的计算6600张，每一张下载需要5秒钟，一分钟60秒、一小时60分钟，天呐，需要9个小时才能爬取全部的图片。想一想还是算了吧，整站爬取还是要使用Scrapy+mongodb。 &gt;&gt;&gt; 165*40 6600 &gt;&gt;&gt; from __future__ import division &gt;&gt;&gt; 6600*5/60/60 9.166666666666666 下载了700多张，108M，也算是留着看看吧。 一会上传到Github上 三、结语昨天学习了崔庆才老师的爬虫，感觉真的学习到了好多，对Python爬虫提高很有帮助，还有，原来他就是静觅，刚开始学习爬虫就在看他的博客，没想到他现在又在出爬虫教程，打算跟着学习。 分享内容： 1. 分析知乎Ajax请求及爬取逻辑 2. 用Scrapy实现递归爬取 3. 爬取结果存储到MongoDB 废话不多说，自己看看就知道了。 静觅丨崔庆才的个人博客http://cuiqingcai.com/ 微课录播 | 03月17日 爬取知乎所有用户详细信息https://edu.hellobi.com/course/163 最后的小广告 有朋友竟然叫我去作一期直播，讲一讲Python。 打算根据自己的经历分享一些经验，主要是关于Python入门的，想听听可以私信我。 时间是周二晚9点~ Hello World！ Try to be a Pythoner！","tags":[{"name":"爬虫","slug":"爬虫","permalink":"https://zhangslob.github.io/tags/爬虫/"},{"name":"图片下载","slug":"图片下载","permalink":"https://zhangslob.github.io/tags/图片下载/"}]},{"title":"Python练习第九题，爬取贴吧图片","date":"2017-03-14T11:56:07.000Z","path":"2017/03/14/Python练习第九题，爬取贴吧图片/","text":"这是崔斯特的第四篇原创文章 一、问题：用 Python爬取妹子图片 :) http://tieba.baidu.com/p/2166231880 二、分析贴吧网页源码打开网页http://tieba.baidu.com/p/2166231880，F12 发现图片链接都在&lt;img&gt;标签中 &lt;cc&gt; &lt;div...&gt; &lt;img...&gt; &lt;img...&gt; 测试发现，src中的链接就是图片链接。那么就很简单，只需要把&lt;img&gt;中的src的链接拿出来即可。 三、写代码环境：Python3，Pycharm 使用requests和xpath，最近才学了xpath，发现超级好用，比bs4简洁，有兴趣看看这个https://zhuanlan.zhihu.com/p/25572729 import requests from lxml import etree url = &apos;http://tieba.baidu.com/p/2166231880&apos; header = {&apos;User-Agent&apos;:&apos;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36&apos;} r = requests.get(url,headers=header).content s = etree.HTML(r) print(s.xpath(&apos;//div/img/@src&apos;)) 发现链接都已经拿到手，下一步就是下载了~ 下载图片的语句： import urllib.request path = &apos;......&apos; #下载链接 jpg_link ＝ &apos;......&apos; #图片链接 request.urlretrieve(jpg_link, path) 加在一起，大功告成。 四、总结经测试，贴吧里面其他网页如：http://tieba.baidu.com/p/1165861759 本代码都可以下载，顺便说一说问题。 1、图片名称使用图片链接中的名称，包含大量数字和字母，可以优化。 2、可以看到，下载文件中包含了一个表情，查看那是用户所发，说明筛选出了问题。 3、帖子数量多，翻页过后，需要在代码中加入获取下一页链接。 除此之外，还有什么问题呢？ 源码请见：https://github.com/zhangslob/TiebaImg","tags":[{"name":"福利","slug":"福利","permalink":"https://zhangslob.github.io/tags/福利/"},{"name":"美女图片","slug":"美女图片","permalink":"https://zhangslob.github.io/tags/美女图片/"}]},{"title":"Python练习第七题，我要倒过来看","date":"2017-03-06T10:47:46.000Z","path":"2017/03/06/Python练习第七题，我要倒过来看/","text":"这是崔斯特的第三篇原创文章 一、ChallengeUsing the Python language, have the function FirstReverse(str) take the str parameter being passed and return the string in reversed（颠倒的） order. For example: if the input string is “Hello World and Coders” then your program should return the string sredoC dna dlroW olleH.题目意思是，给定字符串，返回原来的倒序。例如给出的是“Hello World and Coders”，返回“sredoC dna dlroW olleH.” Sample Test Cases Input:”coderbyte” Output:”etybredoc” Input:”I Love Code” Output:”edoC evoL I” Hint Think of how you can loop through a string or array of characters backwards to produce a new string. def FirstReverse(str): # code goes here return str # keep this function call here print FirstReverse(raw_input()) 二、解法:切片环境：Python3.5 A simple way to reverse a string would be to create a new string and fill it with the characters from the original string, but backwards. To do this, we need to loop through the original string starting from the end, and every iteration of the loop we move to the previous character in the string. Here is an example: def FirstReverse(str): return str[::-1] print (FirstReverse(input())) 非常简洁str[::-1]就可以完成目标。 三、切片详解1、取字符串中第几个字符 &gt;&gt;&gt; &apos;hello&apos;[0]#表示输出字符串中第一个字符 &apos;h&apos; &gt;&gt;&gt; &apos;hello&apos;[-1]#表示输出字符串中最后一个字符 &apos;o&apos; 2、字符串分割 &gt;&gt;&gt; &apos;hello&apos;[1:3] &apos;el&apos; 第一个参数表示原来字符串中的下表第二个参数表示分割后剩下的字符串的第一个字符 在 原来字符串中的下标 注意，Python从0开始计数 3、几种特殊情况 &gt;&gt;&gt; &apos;hello&apos;[:3]#从第一个字符开始截取，直到最后 &apos;hel&apos; &gt;&gt;&gt; &apos;hello&apos;[0:]#从第一个字符开始截取，截取到最后 &apos;hello&apos; &gt;&gt;&gt; &apos;hello&apos;[:] &apos;hello&apos; 4、步长截取 &gt;&gt;&gt; &apos;abcde&apos;[::2]#表示从第一个字符开始截取，间隔2个字符取一个。 &apos;ace&apos; &gt;&gt;&gt; &apos;abcde&apos;[::-2] &apos;eca&apos; &gt;&gt;&gt; &apos;abcde&apos;[::-1] &apos;edcba&apos; 推荐阅读： 官方文档https://docs.python.org/3/tutorial/introduction.html#strings 廖雪峰的教程 http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431756919644a792ee4ead724ef7afab3f7f771b04f5000 更多解法： def FirstReverse(str): # reversed(str) turns the string into an iterator object (similar to an array) # and reverses the order of the characters # then we join it with an empty string producing a final string for us return &apos;&apos;.join(reversed(str)) print(FirstReverse(input())) 使用了什么语法？评论中见。","tags":[{"name":"Python语法","slug":"Python语法","permalink":"https://zhangslob.github.io/tags/Python语法/"},{"name":"切片介绍","slug":"切片介绍","permalink":"https://zhangslob.github.io/tags/切片介绍/"}]},{"title":"教你免费搭建个人博客，Hexo&Github","date":"2017-02-28T12:01:50.000Z","path":"2017/02/28/教你免费搭建个人博客，Hexo-Github/","text":"这是崔斯特的第二篇原创文章 说在前面： 为什么自己搭建博客，知乎不行吗？可以看看刘未鹏 | Mind Hacks，前些天发布了某篇文章应该是被人举报了，结果知乎就删了。有自己的博客自由，自在。更多请看为什么要自建博客？https://www.zhihu.com/question/19916345 说在前面： 为什么自己搭建博客，知乎不行吗？可以看看刘未鹏 | Mind Hacks，前些天发布了某篇文章应该是被人举报了，结果知乎就删了。有自己的博客自由，自在。更多请看为什么要自建博客？https://www.zhihu.com/question/19916345 我用了多久才完成博客的搭建？不瞒您说，我花了有3天时间。对着别人的“5分钟 搭建免费个人博客”花了3天才完成，中间遇到了无数困难。查看很多资料，所以当你遇到困难，别放弃，仔细看文档或资料。 为了发布这篇教程，重新注册了Github，崔斯特的博客https://zhangslob.github.io/这个是我自己的博客，崔斯特测试所用博客https://zhihuya.github.io/这个是我一边写这篇教程一边搭建的。所以如果你也和我一样，喜欢自由，喜欢捣腾，那就来吧。 系统：windows 7 64位，编辑器：sublime text3，控制台：cmder搭建博客使用hexo+Github 什么是 Hexo？https://hexo.io/zh-cn/docs/ Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 一、配置Github首先注册、登录 https://github.com/ 记住自己的Username（很重要） 然后右上角选择 Create a new repository https://github.com/new Repository name （填自己的名字） yourname.github.io(yourname与你的注册用户名一致,这个就是你博客的域名了) 例如，我的域名是github.com/zhihuya，就填入zhihuya.github.io。成功后出现下面的画面 二、环境安装（node、git）1、安装 Node.js https://nodejs.org/en/ 2、安装 Git https://github.com/waylau/git-for-win Git教程 https://github.com/waylau/git-for-win廖雪峰老师的教程，非常好。 3、安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，名称和邮箱是Github上的 4、安装 Hexo。所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。 $ npm install -g hexo-cli （使用的cmder，超级好用~~。等待时间可能有点长） 好了到这一步我们环境全部安装好了。 三、设置在电脑F盘（自己随意）目录下新建文件夹 test，进入test，按住Shift键点击鼠标右键 因为我有安装Cmder，没有安装的点击“在此处打开命令窗口”，输入 hexo init blog 稍微等待下，速度有点慢。成功提示 INFO Start blogging with Hexo! 因为你初始化hexo 之后source目录下自带一篇hello world文章, 所以直接执行下方命令 $ hexo generate # 启动本地服务器 $ hexo server # 在浏览器输入 http://localhost:4000/就可以看见网页和模板了 INFO Start processing INFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 访问http://localhost:4000/，便可以看到网站初步的模样，不要激动，我们还要把网页发布到Github上去。 重新打开CMD，输入： ssh-keygen -t rsa -C &quot;Github的注册邮箱地址&quot; 一路Enter过来就好，得到信息： Your public key has been saved in /c/Users/user/.ssh/id_rsa.pub. 找到该文件，打开（sublime text），Ctrl + a复制里面的所有内容，然后进入Sign in to GitHub：https://github.com/settings/ssh New SSH key ——Title：blog —— Key：输入刚才复制的—— Add SSH key 四、配置博客在blog目录下，用sublime打开_config.yml文件，修改参数信息 特别提醒，在每个参数的：后都要加一个空格 修改网站相关信息 title: 崔斯特测试所用博客 subtitle: 副标题 description: 网页描述 author: 崔斯特 language: zh-CN timezone: Asia/Shanghai 配置部署（我的是zhihuya，修改成自己的） deploy: type: git repo: https://github.com/zhihuya/zhihuya.github.io.git branch: master 五、发表文章在CMD中输入 $ hexo new &quot;崔斯特测试文章&quot; INFO Created: F:\\test\\blog\\source\\_posts\\崔斯特测试文章.md 找到该文章，打开，使用Markdown语法，该语法介绍可以查看https://zhangslob.github.io/2017/02/26/%E5%88%A9%E7%94%A8HEXO%E6%90%AD%E5%BB%BA%E7%9A%84%E5%8D%9A%E5%AE%A2/ --- title: 崔斯特测试文章 date: 2017-02-28 13:03:44 tags: --- 这是一篇测试文章，欢迎关注作者博客[1]: https://zhangslob.github.io/ 保存，然后执行下列步骤： F:\\test\\blog $ hexo clean INFO Deleted database. INFO Deleted public folder. F:\\test\\blog $ hexo generate INFO Start processing INFO Files loaded in 1.48 s #省略 INFO 29 files generated in 4.27 s F:\\test\\blog $ hexo server INFO Start processing INFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 这个时候，打开http://localhost:4000/，发现刚才的文章已经成功了 最后一步，发布到网上，执行： F:\\test\\blog $ hexo deploy INFO Deploying: git INFO Clearing .deploy_git folder... INFO Copying files from public folder... #省略 其中会跳出Github登录，直接登录，如果没有问题输入zhihuya（换成你的）.github.io/ 崔斯特测试所用博客https://zhihuya.github.io/ 然后就可以看到已经发布了 六、总结发布文章的步骤： 1、hexo new 创建文章 2、Markdown语法编辑文章 3、部署（所有打开CMD都是在blog目录下） hexo clean #清除缓存 网页正常情况下可以忽略此条命令 hexo generate #生成 hexo server #启动服务预览，非必要，可本地浏览网页 hexo deploy #部署发布 简写Tips： hexo n “我的博客” == hexo new “我的博客” #新建文章 hexo p == hexo publish hexo g == hexo generate#生成 hexo s == hexo server #启动服务预览 hexo d == hexo deploy#部署 如果在执行 hexo deploy 后,出现 error deployer not found:github 的错误，执行： npm install hexo-deployer-git --save 出错是正常的，出错了自己先百度或google，实在不知道的可以询问我。 托管的话不仅有github可以用，还有个国内的https://coding.net/可选 到这里已经完成了博客的搭建，但是还有很多需要设置和调整的。这是我的博客，也许你会发现，我和刚才搭建的不一样，因为我修改了博客主题，简洁、优美。 主题介绍https://github.com/litten/hexo-theme-yilia 欢迎大家关注，定会有更多精彩 知乎https://www.zhihu.com/people/cuishite 博客https://zhangslob.github.io/","tags":[{"name":"个人博客","slug":"个人博客","permalink":"https://zhangslob.github.io/tags/个人博客/"},{"name":"Hexo&Github","slug":"Hexo-Github","permalink":"https://zhangslob.github.io/tags/Hexo-Github/"}]},{"title":"利用HEXO搭建的博客及Markdown语法介绍","date":"2017-02-26T09:20:57.000Z","path":"2017/02/26/利用HEXO搭建的博客/","text":"这是崔斯特的第一篇原创文章 Markdown的一些语法 花了不少时间。终于把自己的第一个博客搭建成功了。但是遇到新问题，发表文章需要使用Markdown语法，下面就来说说。 Markdown的文档介绍http://www.appinn.com/markdown/看看简单介绍就可以了，以后有需求再去学习。 1、标题和引用。Markdown 支持两种标题的语法，Setext 和 atx 形式。Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），Atx 形式在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶。 区块引用则使用 email 形式的 ‘&gt;’ 角括号。 如你所见，左边是编辑区，右边可以直接看到结果。编辑器是MarkdownPad，下载链接是http://markdownpad.com/download.html 2、修辞和强调。 3、链接和图片。（如果你有下载MarkdownPad这个编辑器，会更加方便哦） 4、加入代码,使用单引号。 这些应该可以帮助我完成一般书写，好的呢，第一篇文章就完成了。 欢迎评论。。 人生苦短，我学Python (๑• . •๑) 2017/2/27 19:11:11","tags":[{"name":"黑魔法","slug":"黑魔法","permalink":"https://zhangslob.github.io/tags/黑魔法/"},{"name":"个人博客","slug":"个人博客","permalink":"https://zhangslob.github.io/tags/个人博客/"},{"name":"Markdown语法","slug":"Markdown语法","permalink":"https://zhangslob.github.io/tags/Markdown语法/"}]}]